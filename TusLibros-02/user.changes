

----STARTUP---- (10 June 2021 19:41:50) as C:\Users\matia\Downloads\windows64\windows64\CuisUniversity-4532.image!


!classRemoval: #ShoppingCart stamp: 'MS 6/10/2021 19:41:53'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'products catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #ProductsCatalog stamp: 'MS 6/10/2021 19:41:54'!
Object subclass: #ProductsCatalog
	instanceVariableNames: 'validProducts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #ShoppingCartTest stamp: 'MS 6/10/2021 19:41:54'!
TestCase subclass: #ShoppingCartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #ProductsCatalogTest stamp: 'MS 6/10/2021 19:41:55'!
TestCase subclass: #ProductsCatalogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\matia\Downloads\2021\1C\Inge1\2021-1c\20-TusLibros\Iteracion 1\TusLibros-18.st----!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'MS 6/10/2021 19:45:14'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'nil' stamp: 'MS 6/10/2021 19:45:52'!
test01

	| emptyCart |
	
	emptyCart := Cart.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/10/2021 19:45:58' prior: 50943109!
test01

	| emptyCart |
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/10/2021 19:46:27' prior: 50943114!
test01

	| emptyCart |
	
	emptyCart := Cart acceptingItemsOf: OrderedCollection new.! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'MS 6/10/2021 19:51:06'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/10/2021 19:50:57'!
test01CheckoutWithEmptyCartShouldRaiseAnError

	| emptyCart |
	
	emptyCart := Cart acceptingItemsOf: OrderedCollection new.
	
	self 
		should: (Cashier new checkout: emptyCart)
		raise:  Error
		withMessageText: Cashier checkoutWithEmptyCartErrorMessage.
	
	! !

!methodRemoval: CashierTest #test01 stamp: 'MS 6/10/2021 19:51:12'!
test01

	| emptyCart |
	
	emptyCart := Cart acceptingItemsOf: OrderedCollection new.!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/10/2021 19:51:16'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 'MS 6/10/2021 19:51:56'!
checkout: aCart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checkout' stamp: 'MS 6/10/2021 19:53:00' prior: 50943149!
checkout: aCart 
	
	^self class checkoutWithEmptyCartErrorMessage.! !

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/10/2021 19:53:02'!
ERROR!
!Cashier class methodsFor: 'exceptions' stamp: 'MS 6/10/2021 19:53:16'!
checkoutWithEmptyCartErrorMessage
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'exceptions' stamp: 'MS 6/10/2021 19:53:45' prior: 50943161!
checkoutWithEmptyCartErrorMessage
	
	^'Can not checkout with empty cart'.! !

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/10/2021 19:53:46'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'MS 6/10/2021 19:54:15' prior: 50943153!
checkout: aCart 
	
	^self error: self class checkoutWithEmptyCartErrorMessage.! !

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/10/2021 19:54:16'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/10/2021 19:54:31' prior: 50943130!
test01CheckoutWithEmptyCartShouldRaiseAnError

	| emptyCart |
	
	emptyCart := Cart acceptingItemsOf: OrderedCollection new.
	
	self 
		should: [Cashier new checkout: emptyCart]
		raise:  Error
		withMessageText: Cashier checkoutWithEmptyCartErrorMessage.
	
	! !

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/10/2021 19:54:32'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/10/2021 19:54:32'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/10/2021 19:54:40' prior: 50943184!
test01CheckoutWithEmptyCartShouldRaiseAnError

	| emptyCart |
	
	emptyCart := Cart acceptingItemsOf: OrderedCollection new.
	
	self 
		should: [ Cashier new checkout: emptyCart ]
		raise:  Error
		withMessageText: Cashier checkoutWithEmptyCartErrorMessage.
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/10/2021 19:57:45'!
test02

	| cart |
	
	cart := Cart acceptingItemsOf: OrderedCollection with: '123'.
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/10/2021 19:58:06' prior: 50943214!
test02

	| cart |
	
	cart := Cart acceptingItemsOf: (OrderedCollection with: '123').
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/10/2021 19:58:51' prior: 50943220!
test02

	| cart |
	
	cart := Cart acceptingItemsOf: (OrderedCollection with: '123').
	
	cart add: '123'.
	
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/10/2021 20:01:34' prior: 50943226!
test02

	| cart |
	
	cart := Cart acceptingItemsOf: (OrderedCollection with: '123').
	
	cart add: '123'.
	
	self assert: (Cashier new checkout: cart) equals: 1.
	
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/10/2021 20:02:14' prior: 50943233!
test02

	| cart |
	
	cart := Cart acceptingItemsOf: (OrderedCollection with: '123').
	
	cart add: '123'.
	
	self assert: (Cashier new checkout: cart) equals: 1.
	
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/10/2021 20:30:17'!
test02CheckoutCartShouldReturnCartXXX

	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	
	self assert: (Cashier new checkout: cart) equals: 10.
	
	
	
	
	
	! !

!methodRemoval: CashierTest #test02 stamp: 'MS 6/10/2021 20:30:20'!
test02

	| cart |
	
	cart := Cart acceptingItemsOf: (OrderedCollection with: '123').
	
	cart add: '123'.
	
	self assert: (Cashier new checkout: cart) equals: 1.
	
	
	
	
	
	!

!testRun: #CashierTest #test02CheckoutCartShouldReturnCartXXX stamp: 'MS 6/10/2021 20:30:25'!
ERROR!

!testRun: #CashierTest #test02CheckoutCartShouldReturnCartXXX stamp: 'MS 6/10/2021 20:30:41'!
ERROR!

catalog includes: 1!

catalog includes: '1'!

catalog includes: '1'->10!
!Cart methodsFor: 'assertions' stamp: 'MS 6/10/2021 20:31:50' prior: 50942934!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CashierTest #test02CheckoutCartShouldReturnCartXXX stamp: 'MS 6/10/2021 20:31:51'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 'MS 6/10/2021 20:36:26' prior: 50943175!
checkout: aCart 
	
	(aCart isEmpty) ifTrue: [ ^self error: self class checkoutWithEmptyCartErrorMessage].
	^10.
	
	
	! !

!testRun: #CashierTest #test02CheckoutCartShouldReturnCartXXX stamp: 'MS 6/10/2021 20:36:27'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/10/2021 20:36:27'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartShouldReturnCartXXX stamp: 'MS 6/10/2021 20:36:27'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartShouldReturnCartXXX stamp: 'MS 6/10/2021 20:36:43'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartShouldReturnCartXXX stamp: 'MS 6/10/2021 20:36:48'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/10/2021 20:36:48'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartShouldReturnCartXXX stamp: 'MS 6/10/2021 20:36:48'!
PASSED!
!Cashier methodsFor: 'checkout' stamp: 'MS 6/10/2021 20:37:08' prior: 50943287!
checkout: aCart 
	
	(aCart isEmpty) ifTrue: [ ^self error: self class checkoutWithEmptyCartErrorMessage ].
	^10.
	
	
	! !

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/10/2021 20:37:28'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartShouldReturnCartXXX stamp: 'MS 6/10/2021 20:37:28'!
PASSED!
!Cashier methodsFor: 'checkout' stamp: 'MS 6/10/2021 20:38:29' prior: 50943317!
checkout: aCart 
	
	(aCart isEmpty) ifTrue: [ ^self error: self class checkoutWithEmptyCartErrorMessage ].
	^10
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/10/2021 20:38:54'!
test02CheckoutCartWithOneItemShouldReturnCartXXX

	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	
	self assert: (Cashier new checkout: cart) equals: 10.
	
	
	
	
	
	! !

!methodRemoval: CashierTest #test02CheckoutCartShouldReturnCartXXX stamp: 'MS 6/10/2021 20:38:54'!
test02CheckoutCartShouldReturnCartXXX

	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	
	self assert: (Cashier new checkout: cart) equals: 10.
	
	
	
	
	
	!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/10/2021 20:40:12'!
test03CheckoutCartWithManyItemShouldReturnCartXXX

	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self assert: (Cashier new checkout: cart) equals: 30.
	
	
	
	
	
	! !

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartXXX stamp: 'MS 6/10/2021 20:40:13'!
FAILURE!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartXXX stamp: 'MS 6/10/2021 20:52:30'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'MS 6/10/2021 20:53:59' prior: 50943330!
checkout: aCart 
	
	(aCart isEmpty) ifTrue: [ ^self error: self class checkoutWithEmptyCartErrorMessage ].
	^aCart totalValue.
	
	
	! !

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartXXX stamp: 'MS 6/10/2021 20:54:10'!
ERROR!
!Cart methodsFor: 'value' stamp: 'MS 6/10/2021 20:55:07'!
totalValue
	self shouldBeImplemented.! !
!Cart methodsFor: 'value' stamp: 'MS 6/10/2021 20:55:57' prior: 50943388!
totalValue
	"encuentra el total "! !

----QUIT----(10 June 2021 20:56:04) CuisUniversity-4532.image priorSource: 19559371!

----STARTUP---- (13 June 2021 17:36:15) as C:\Users\matia\Downloads\windows64\windows64\CuisUniversity-4532.image!

!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 17:37:27'!
test02CheckoutCartWithOneItemShouldReturnCartTotalValue

	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	
	self assert: (Cashier new checkout: cart) equals: 10.
	
	
	
	
	
	! !

!methodRemoval: CashierTest #test02CheckoutCartWithOneItemShouldReturnCartXXX stamp: 'MS 6/13/2021 17:37:27'!
test02CheckoutCartWithOneItemShouldReturnCartXXX

	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	
	self assert: (Cashier new checkout: cart) equals: 10.
	
	
	
	
	
	!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 17:37:33'!
test03CheckoutCartWithManyItemShouldReturnCartTotalValue

	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self assert: (Cashier new checkout: cart) equals: 30.
	
	
	
	
	
	! !

!methodRemoval: CashierTest #test03CheckoutCartWithManyItemShouldReturnCartXXX stamp: 'MS 6/13/2021 17:37:33'!
test03CheckoutCartWithManyItemShouldReturnCartXXX

	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self assert: (Cashier new checkout: cart) equals: 30.
	
	
	
	
	
	!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 17:37:35'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 17:37:35'!
FAILURE!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 17:37:35'!
FAILURE!
!Cart methodsFor: 'value' stamp: 'MS 6/13/2021 17:37:51' prior: 50943392!
totalValue

	
	"encuentra el total "! !
!Cart methodsFor: 'value' stamp: 'MS 6/13/2021 17:39:13' prior: 50943460!
totalValue

	^catalog values sum.
	"encuentra el total "! !

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 17:39:15'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 17:39:15'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 17:39:15'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 17:39:33' prior: 50943203!
test01CheckoutWithEmptyCartShouldRaiseAnError

	| emptyCart catalog |
	
	catalog := 
	
	emptyCart := Cart acceptingItemsOf: OrderedCollection new.
	
	self 
		should: [ Cashier new checkout: emptyCart ]
		raise:  Error
		withMessageText: Cashier checkoutWithEmptyCartErrorMessage.
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 17:39:40' prior: 50943480!
test01CheckoutWithEmptyCartShouldRaiseAnError

	| emptyCart catalog |
	
	catalog := Dictionary new.
	
	
	emptyCart := Cart acceptingItemsOf: OrderedCollection new.
	
	self 
		should: [ Cashier new checkout: emptyCart ]
		raise:  Error
		withMessageText: Cashier checkoutWithEmptyCartErrorMessage.
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 17:40:03' prior: 50943492!
test01CheckoutWithEmptyCartShouldRaiseAnError

	| emptyCart |
	
	emptyCart := Cart acceptingItemsOf: Dictionary new.
	
	self 
		should: [ Cashier new checkout: emptyCart ]
		raise:  Error
		withMessageText: Cashier checkoutWithEmptyCartErrorMessage.
	
	! !

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 17:40:04'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 17:40:04'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 17:40:04'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 17:40:04'!
PASSED!

Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'MS 6/13/2021 17:57:50'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'MS 6/13/2021 17:58:00'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'nil' stamp: 'MS 6/13/2021 18:00:38'!
test01CreditCardShouldBeInitializedWithValidNumber

	
	
	self 
		should: (CreditCard number: 123456)
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumberErrorDescription.
		! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 18:00:45' prior: 50943552!
test01CreditCardShouldBeInitializedWithValidNumber

	self 
		should: (CreditCard number: 123456)
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumberErrorDescription.
		! !

!testRun: #CreditCardTest #test01CreditCardShouldBeInitializedWithValidNumber stamp: 'MS 6/13/2021 18:00:46'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 18:00:55'!
number: aSmallInteger 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNumber: aSmallInteger ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 18:02:24' prior: 50943575!
number: aCreditCardNumber 

	(aCreditCardNumber length isEqualTo: 16) ifTrue: [self error: CreditCard invalidCreditCardNumberErrorDescription].

	^self new initializeNumber: aCreditCardNumber.! !

!testRun: #CreditCardTest #test01CreditCardShouldBeInitializedWithValidNumber stamp: 'MS 6/13/2021 18:02:27'!
ERROR!

!testRun: #CreditCardTest #test01CreditCardShouldBeInitializedWithValidNumber stamp: 'MS 6/13/2021 18:02:27'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 18:03:40' prior: 50943584!
number: aCreditCardNumber 

	(aCreditCardNumber digitLength isEqualTo: 16) ifTrue: [self error: CreditCard invalidCreditCardNumberErrorDescription].

	^self new initializeNumber: aCreditCardNumber.! !

16 digitLength!

1111 digitLength !

111 numberOfDigitsInBase: 10!
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 18:04:31' prior: 50943601!
number: aCreditCardNumber 

	((aCreditCardNumber numberOfDigitsInBase: 10) isEqualTo: 16) ifTrue: [self error: CreditCard invalidCreditCardNumberErrorDescription].

	^self new initializeNumber: aCreditCardNumber.! !

!testRun: #CreditCardTest #test01CreditCardShouldBeInitializedWithValidNumber stamp: 'MS 6/13/2021 18:04:32'!
ERROR!

!testRun: #CreditCardTest #test01CreditCardShouldBeInitializedWithValidNumber stamp: 'MS 6/13/2021 18:04:32'!
ERROR!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'MS 6/13/2021 18:04:45'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'instance creation' stamp: 'MS 6/13/2021 18:04:45'!
initializeNumber: aCreditCardNumber 
	self shouldBeImplemented.
	creditCardNumber := aCreditCardNumber.! !
!CreditCard methodsFor: 'instance creation' stamp: 'MS 6/13/2021 18:04:58' prior: 50943637!
initializeNumber: aCreditCardNumber 
	
	creditCardNumber := aCreditCardNumber.
	! !

!testRun: #CreditCardTest #test01CreditCardShouldBeInitializedWithValidNumber stamp: 'MS 6/13/2021 18:05:00'!
ERROR!

!testRun: #CreditCardTest #test01CreditCardShouldBeInitializedWithValidNumber stamp: 'MS 6/13/2021 18:05:00'!
ERROR!

!testRun: #CreditCardTest #test01CreditCardShouldBeInitializedWithValidNumber stamp: 'MS 6/13/2021 18:05:09'!
ERROR!

!testRun: #CreditCardTest #test01CreditCardShouldBeInitializedWithValidNumber stamp: 'MS 6/13/2021 18:05:09'!
ERROR!
!Object class methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 18:05:12'!
invalidCreditCardNumberErrorDescription
	self shouldBeImplemented.! !

!methodRemoval: Object class #invalidCreditCardNumberErrorDescription stamp: 'MS 6/13/2021 18:05:48'!
invalidCreditCardNumberErrorDescription
	self shouldBeImplemented.!

!testRun: #CreditCardTest #test01CreditCardShouldBeInitializedWithValidNumber stamp: 'MS 6/13/2021 18:05:54'!
ERROR!

!testRun: #CreditCardTest #test01CreditCardShouldBeInitializedWithValidNumber stamp: 'MS 6/13/2021 18:05:54'!
ERROR!
!CreditCard class methodsFor: 'exceptions' stamp: 'MS 6/13/2021 18:06:06'!
invalidCreditCardNumberErrorDescription
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'exceptions' stamp: 'MS 6/13/2021 18:06:24' prior: 50943682!
invalidCreditCardNumberErrorDescription
	
	^'Credit Card number should have 16 digits'! !

!testRun: #CreditCardTest #test01CreditCardShouldBeInitializedWithValidNumber stamp: 'MS 6/13/2021 18:06:26'!
FAILURE!

!testRun: #CreditCardTest #test01CreditCardShouldBeInitializedWithValidNumber stamp: 'MS 6/13/2021 18:07:03'!
FAILURE!

!testRun: #CreditCardTest #test01CreditCardShouldBeInitializedWithValidNumber stamp: 'MS 6/13/2021 18:07:03'!
FAILURE!

!testRun: #CreditCardTest #test01CreditCardShouldBeInitializedWithValidNumber stamp: 'MS 6/13/2021 18:07:11'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardShouldBeInitializedWithValidNumber stamp: 'MS 6/13/2021 18:07:16'!
FAILURE!

!testRun: #CreditCardTest #test01CreditCardShouldBeInitializedWithValidNumber stamp: 'MS 6/13/2021 18:07:16'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 18:07:34' prior: 50943613!
number: aCreditCardNumber 

	((aCreditCardNumber numberOfDigitsInBase: 10) isEqualTo: 16) ifFalse: [self error: CreditCard invalidCreditCardNumberErrorDescription].

	^self new initializeNumber: aCreditCardNumber.! !

!testRun: #CreditCardTest #test01CreditCardShouldBeInitializedWithValidNumber stamp: 'MS 6/13/2021 18:07:36'!
ERROR!

!testRun: #CreditCardTest #test01CreditCardShouldBeInitializedWithValidNumber stamp: 'MS 6/13/2021 18:07:41'!
ERROR!

!testRun: #CreditCardTest #test01CreditCardShouldBeInitializedWithValidNumber stamp: 'MS 6/13/2021 18:07:41'!
ERROR!

!testRun: #CreditCardTest #test01CreditCardShouldBeInitializedWithValidNumber stamp: 'MS 6/13/2021 18:08:12'!
ERROR!

!testRun: #CreditCardTest #test01CreditCardShouldBeInitializedWithValidNumber stamp: 'MS 6/13/2021 18:08:12'!
ERROR!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 18:08:37' prior: 50943562!
test01CreditCardShouldBeInitializedWithValidNumber

	self 
		should: [(CreditCard number: 123456)]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumberErrorDescription.
		! !

!testRun: #CreditCardTest #test01CreditCardShouldBeInitializedWithValidNumber stamp: 'MS 6/13/2021 18:08:38'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardShouldBeInitializedWithValidNumber stamp: 'MS 6/13/2021 18:08:38'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 18:08:46' prior: 50943746!
test01CreditCardShouldBeInitializedWithValidNumber

	self 
		should: [ CreditCard number: 123456 ]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumberErrorDescription.
		! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 18:09:10'!
test01CreditCardShouldBeInitializedWith16DigitNumber

	self 
		should: [ CreditCard number: 123456 ]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumberErrorDescription.
		! !

!methodRemoval: CreditCardTest #test01CreditCardShouldBeInitializedWithValidNumber stamp: 'MS 6/13/2021 18:09:10'!
test01CreditCardShouldBeInitializedWithValidNumber

	self 
		should: [ CreditCard number: 123456 ]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumberErrorDescription.
		!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 18:10:40'!
test02CreditCardShouldBeInitializedWithPositiveNumber

	self 
		should: [ CreditCard number: -123456 ]
		raise: Error
		withMessageText: CreditCard invalidCreditCardSignErrorDescription.
		! !

!testRun: #CreditCardTest #test02CreditCardShouldBeInitializedWithPositiveNumber stamp: 'MS 6/13/2021 18:10:45'!
ERROR!
!CreditCard class methodsFor: 'exceptions' stamp: 'MS 6/13/2021 18:10:58'!
invalidCreditCardSignErrorDescription
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'exceptions' stamp: 'MS 6/13/2021 18:11:06' prior: 50943804!
invalidCreditCardSignErrorDescription
	
	^'Credit card number should be positive'.! !

!testRun: #CreditCardTest #test02CreditCardShouldBeInitializedWithPositiveNumber stamp: 'MS 6/13/2021 18:11:08'!
FAILURE!

!testRun: #CreditCardTest #test02CreditCardShouldBeInitializedWithPositiveNumber stamp: 'MS 6/13/2021 18:11:19'!
FAILURE!

!testRun: #CreditCardTest #test02CreditCardShouldBeInitializedWithPositiveNumber stamp: 'MS 6/13/2021 18:11:42'!
FAILURE!

!testRun: #CreditCardTest #test02CreditCardShouldBeInitializedWithPositiveNumber stamp: 'MS 6/13/2021 18:11:42'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 18:13:32' prior: 50943717!
number: aCreditCardNumber 

	((aCreditCardNumber numberOfDigitsInBase: 10) isEqualTo: 16) ifFalse: [self error: CreditCard invalidCreditCardNumberErrorDescription].
	
	(aCreditCardNumber positive) ifFalse: [self error: CreditCard invalidCreditCardSignErrorDescription ].

	^self new initializeNumber: aCreditCardNumber.! !

!testRun: #CreditCardTest #test01CreditCardShouldBeInitializedWith16DigitNumber stamp: 'MS 6/13/2021 18:13:34'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardShouldBeInitializedWithPositiveNumber stamp: 'MS 6/13/2021 18:13:34'!
FAILURE!

!testRun: #CreditCardTest #test02CreditCardShouldBeInitializedWithPositiveNumber stamp: 'MS 6/13/2021 18:13:34'!
FAILURE!

!testRun: #CreditCardTest #test01CreditCardShouldBeInitializedWith16DigitNumber stamp: 'MS 6/13/2021 18:13:50'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardShouldBeInitializedWithPositiveNumber stamp: 'MS 6/13/2021 18:13:50'!
FAILURE!

!testRun: #CreditCardTest #test02CreditCardShouldBeInitializedWithPositiveNumber stamp: 'MS 6/13/2021 18:13:50'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 18:14:21' prior: 50943791!
test02CreditCardShouldBeInitializedWithPositiveNumber

	self 
		should: [ CreditCard number: -123456789123456 ]
		raise: Error
		withMessageText: CreditCard invalidCreditCardSignErrorDescription.
		! !

!testRun: #CreditCardTest #test02CreditCardShouldBeInitializedWithPositiveNumber stamp: 'MS 6/13/2021 18:14:22'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 18:14:42' prior: 50943868!
test02CreditCardShouldBeInitializedWithPositiveNumber

	self 
		should: [ CreditCard number: -1234567891234567 ]
		raise: Error
		withMessageText: CreditCard invalidCreditCardSignErrorDescription.
		! !

!testRun: #CreditCardTest #test02CreditCardShouldBeInitializedWithPositiveNumber stamp: 'MS 6/13/2021 18:14:43'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardShouldBeInitializedWith16DigitNumber stamp: 'MS 6/13/2021 18:14:43'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardShouldBeInitializedWithPositiveNumber stamp: 'MS 6/13/2021 18:14:43'!
PASSED!

123 isInteger !

1263 numberOfDigitsInBase: 10!

1.5 numberOfDigitsInBase: 10!
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 18:16:53' prior: 50943831!
number: aCreditCardNumber 

	(aCreditCardNumber isInteger) ifFalse: [self error: CreditCard invalidCreditCardNumberTypeErrorDescription].
	
	((aCreditCardNumber numberOfDigitsInBase: 10) isEqualTo: 16) ifFalse: [self error: CreditCard invalidCreditCardNumberErrorDescription].
	
	(aCreditCardNumber positive) ifFalse: [self error: CreditCard invalidCreditCardSignErrorDescription ].

	^self new initializeNumber: aCreditCardNumber.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 18:17:46'!
test03CreditCardNumberShouldBeInitializedWithIntegerValue

	self 
		should: [ CreditCard number: 1.2 ]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumberTypeErrorDescription.
		! !

!testRun: #CreditCardTest #test03CreditCardNumberShouldBeInitializedWithIntegerValue stamp: 'MS 6/13/2021 18:17:48'!
ERROR!
!CreditCard class methodsFor: 'exceptions' stamp: 'MS 6/13/2021 18:17:56'!
invalidCreditCardNumberTypeErrorDescription
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'exceptions' stamp: 'MS 6/13/2021 18:18:04' prior: 50943936!
invalidCreditCardNumberTypeErrorDescription
	^'Credit card number must be an integer'.! !

!testRun: #CreditCardTest #test03CreditCardNumberShouldBeInitializedWithIntegerValue stamp: 'MS 6/13/2021 18:18:05'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardShouldBeInitializedWith16DigitNumber stamp: 'MS 6/13/2021 18:18:05'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardShouldBeInitializedWithPositiveNumber stamp: 'MS 6/13/2021 18:18:05'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberShouldBeInitializedWithIntegerValue stamp: 'MS 6/13/2021 18:18:05'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 18:18:28'!
test01CreditCardNumberShouldHave16Digits

	self 
		should: [ CreditCard number: 123456 ]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumberErrorDescription.
		! !

!methodRemoval: CreditCardTest #test01CreditCardShouldBeInitializedWith16DigitNumber stamp: 'MS 6/13/2021 18:18:29'!
test01CreditCardShouldBeInitializedWith16DigitNumber

	self 
		should: [ CreditCard number: 123456 ]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumberErrorDescription.
		!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 18:19:00'!
test02CreditCardNumberShouldBeInitializedWithPositiveValue

	self 
		should: [ CreditCard number: -1234567891234567 ]
		raise: Error
		withMessageText: CreditCard invalidCreditCardSignErrorDescription.
		! !

!methodRemoval: CreditCardTest #test02CreditCardShouldBeInitializedWithPositiveNumber stamp: 'MS 6/13/2021 18:19:00'!
test02CreditCardShouldBeInitializedWithPositiveNumber

	self 
		should: [ CreditCard number: -1234567891234567 ]
		raise: Error
		withMessageText: CreditCard invalidCreditCardSignErrorDescription.
		!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 18:19:15'!
test01CreditCardNumberShouldBeInitializedWith16Digits

	self 
		should: [ CreditCard number: 123456 ]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumberErrorDescription.
		! !

!methodRemoval: CreditCardTest #test01CreditCardNumberShouldHave16Digits stamp: 'MS 6/13/2021 18:19:15'!
test01CreditCardNumberShouldHave16Digits

	self 
		should: [ CreditCard number: 123456 ]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumberErrorDescription.
		!
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 18:20:02' prior: 50943906!
number: aCreditCardNumber 

	self assertCreditCardNumberIsValid.

	(aCreditCardNumber isInteger) ifFalse: [self error: CreditCard invalidCreditCardNumberTypeErrorDescription].
	
	((aCreditCardNumber numberOfDigitsInBase: 10) isEqualTo: 16) ifFalse: [self error: CreditCard invalidCreditCardNumberErrorDescription].
	
	(aCreditCardNumber positive) ifFalse: [self error: CreditCard invalidCreditCardSignErrorDescription ].

	^self new initializeNumber: aCreditCardNumber.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 18:20:34'!
assertCreditCardNumberIsValid: aCreditCardNumber

	(aCreditCardNumber isInteger) ifFalse: [self error: CreditCard invalidCreditCardNumberTypeErrorDescription].
	
	((aCreditCardNumber numberOfDigitsInBase: 10) isEqualTo: 16) ifFalse: [self error: CreditCard invalidCreditCardNumberErrorDescription].
	
	(aCreditCardNumber positive) ifFalse: [self error: CreditCard invalidCreditCardSignErrorDescription ].
! !
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 18:20:41' prior: 50944020!
number: aCreditCardNumber 

	self assertCreditCardNumberIsValid: aCreditCardNumber .

	(aCreditCardNumber isInteger) ifFalse: [self error: CreditCard invalidCreditCardNumberTypeErrorDescription].
	
	((aCreditCardNumber numberOfDigitsInBase: 10) isEqualTo: 16) ifFalse: [self error: CreditCard invalidCreditCardNumberErrorDescription].
	
	(aCreditCardNumber positive) ifFalse: [self error: CreditCard invalidCreditCardSignErrorDescription ].

	^self new initializeNumber: aCreditCardNumber.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 18:20:46' prior: 50944054!
number: aCreditCardNumber 

	self assertCreditCardNumberIsValid: aCreditCardNumber .

	^self new initializeNumber: aCreditCardNumber.! !

!testRun: #CreditCardTest #test01CreditCardNumberShouldBeInitializedWith16Digits stamp: 'MS 6/13/2021 18:20:47'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberShouldBeInitializedWithPositiveValue stamp: 'MS 6/13/2021 18:20:47'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberShouldBeInitializedWithIntegerValue stamp: 'MS 6/13/2021 18:20:47'!
PASSED!

month!

month!

 month !

Date!

 Date !

Month!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 19:03:04' prior: 50943424!
test03CheckoutCartWithManyItemShouldReturnCartTotalValue

	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self assert: (Cashier new checkout: cart) equals: 30.
	
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 19:03:12'!
test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError

	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self assert: (Cashier new checkout: cart) equals: 30.
	
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 19:05:44' prior: 50944106!
test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError
		
	| cart catalog creditCard |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	creditCard  := CreditCard number: 123456.
	
	self 
		should: [Cashier new highlight: cart with: creditCard ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberErrorDescription.
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 19:05:58' prior: 50944119!
test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError
		
	| cart catalog creditCard |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	creditCard  := CreditCard number: 123456.
	
	self 
		should: [Cashier new checkout: cart with: creditCard ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberErrorDescription.
	
	
	
	
	! !
!Cashier methodsFor: 'checkout' stamp: 'MS 6/13/2021 19:06:25'!
checkout: aCart with: aCreditCard
	
	(aCart isEmpty) ifTrue: [ ^self error: self class checkoutWithEmptyCartErrorMessage ].
	^aCart totalValue.
	
	
	! !

!methodRemoval: Cashier #checkout: stamp: 'MS 6/13/2021 19:06:31'!
checkout: aCart 
	
	(aCart isEmpty) ifTrue: [ ^self error: self class checkoutWithEmptyCartErrorMessage ].
	^aCart totalValue.
	
	
	!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 19:07:35' prior: 50943505!
test01CheckoutWithEmptyCartShouldRaiseAnError

	| emptyCart creditCard |
	
	emptyCart := Cart acceptingItemsOf: Dictionary new.
	
	creditCard := CreditCard for: 1231123112311231.
	
	self 
		should: [ Cashier new checkout: emptyCart with: creditCard ]
		raise:  Error
		withMessageText: Cashier checkoutWithEmptyCartErrorMessage.
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 19:08:34' prior: 50943402!
test02CheckoutCartWithOneItemShouldReturnCartTotalValue

	| cart catalog creditCard |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	
	creditCard := CreditCard for: 1231123112311231.
	
	self assert: (Cashier new checkout: cart with: creditCard ) equals: 10.
	
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 19:08:53' prior: 50944094!
test03CheckoutCartWithManyItemShouldReturnCartTotalValue

	| cart catalog creditCard |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	creditCard := CreditCard for: 1231123112311231.
	
	self assert: (Cashier new checkout: cart with: creditCard ) equals: 30.
	
	
	
	
	
	! !

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 19:09:05'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 19:19:41' prior: 50944137!
test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: 123456) ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberErrorDescription.
	
	
	
	
	! !

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 19:19:44'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 19:19:44'!
ERROR!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 19:19:44'!
ERROR!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 19:19:44'!
ERROR!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 19:19:44'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 19:19:50'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 19:19:59' prior: 50944216!
test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: 123456) ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberErrorDescription.
	
	
	
	
	! !

Month month: 10 year: 1998 !

Month month: 105 year: 1245!

GregorianMonthOfYear yearNumber: 20 monthNumber: 10. !

GregorianMonthOfYear yearNumber: 1998 monthNumber: 15.!

GregorianMonthOfYear yearNumber: -1998 monthNumber: 10.!

GregorianMonthOfYear yearNumber: 19958 monthNumber: 10.!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:04:09'!
test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: 123456) ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberErrorDescription.
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:04:34' prior: 50944281!
test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: -1111222233334444) ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardSignErrorDescription 
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:04:35' prior: 50944298!
test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: -1111222233334444) ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardSignErrorDescription.
	
	
	
	
	! !

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:04:36'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:04:36'!
ERROR!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:04:36'!
ERROR!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:04:36'!
ERROR!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:04:36'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:04:36'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:04:40'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:05:51'!
test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: 1.2) ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberTypeErrorDescription.
	
	
	
	
	! !

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:05:53'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:05:53'!
ERROR!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:05:53'!
ERROR!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:05:53'!
ERROR!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:05:53'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:05:53'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:05:53'!
PASSED!

!classRemoval: #CreditCardTest stamp: 'MS 6/13/2021 20:06:00'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:06:05'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:06:10'!
ERROR!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:06:10'!
ERROR!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:06:10'!
ERROR!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:06:10'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:06:10'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:06:10'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:06:15'!
ERROR!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:06:30'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:06:33'!
ERROR!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:06:33'!
ERROR!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:06:33'!
ERROR!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:06:33'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:06:33'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:06:33'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:06:35'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:06:55' prior: 50944169!
test01CheckoutWithEmptyCartShouldRaiseAnError

	| emptyCart creditCard |
	
	emptyCart := Cart acceptingItemsOf: Dictionary new.
	
	creditCard := CreditCard number: 1111222233334444.
	
	self 
		should: [ Cashier new checkout: emptyCart with: creditCard ]
		raise:  Error
		withMessageText: Cashier checkoutWithEmptyCartErrorMessage.
	
	! !

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:06:56'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:06:57'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:07:09' prior: 50944183!
test02CheckoutCartWithOneItemShouldReturnCartTotalValue

	| cart catalog creditCard |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	
	creditCard := CreditCard number: 1111222233334444.
	
	self assert: (Cashier new checkout: cart with: creditCard ) equals: 10.
	
	
	
	
	
	! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:07:10'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:07:11'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:07:23' prior: 50944197!
test03CheckoutCartWithManyItemShouldReturnCartTotalValue

	| cart catalog creditCard |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	creditCard := CreditCard number: 1111222233334444.
	
	self assert: (Cashier new checkout: cart with: creditCard ) equals: 30.
	
	
	
	
	
	! !

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:07:24'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:07:29'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:07:29'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:07:29'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:07:29'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:07:29'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:07:29'!
PASSED!
!CreditCard class methodsFor: 'exceptions' stamp: 'MS 6/13/2021 20:09:15'!
invalidCreditCardNumberLengthErrorDescription
	
	^'Credit Card number should have 16 digits'! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:09:15' prior: 50944038!
assertCreditCardNumberIsValid: aCreditCardNumber

	(aCreditCardNumber isInteger) ifFalse: [self error: CreditCard invalidCreditCardNumberTypeErrorDescription].
	
	((aCreditCardNumber numberOfDigitsInBase: 10) isEqualTo: 16) ifFalse: [self error: CreditCard invalidCreditCardNumberLengthErrorDescription].
	
	(aCreditCardNumber positive) ifFalse: [self error: CreditCard invalidCreditCardSignErrorDescription ].
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:09:15' prior: 50944256!
test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: 123456) ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberLengthErrorDescription.
	
	
	
	
	! !

!methodRemoval: CreditCard class #invalidCreditCardNumberErrorDescription stamp: 'MS 6/13/2021 20:09:15'!
invalidCreditCardNumberErrorDescription
	
	^'Credit Card number should have 16 digits'!
!CreditCard class methodsFor: 'exceptions' stamp: 'MS 6/13/2021 20:09:41'!
creditCardNumberMustBePositiveErrorDescription
	
	^'Credit card number should be positive'.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:09:41' prior: 50944561!
assertCreditCardNumberIsValid: aCreditCardNumber

	(aCreditCardNumber isInteger) ifFalse: [self error: CreditCard invalidCreditCardNumberTypeErrorDescription].
	
	((aCreditCardNumber numberOfDigitsInBase: 10) isEqualTo: 16) ifFalse: [self error: CreditCard invalidCreditCardNumberLengthErrorDescription].
	
	(aCreditCardNumber positive) ifFalse: [self error: CreditCard creditCardNumberMustBePositiveErrorDescription ].
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:09:41' prior: 50944315!
test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: -1111222233334444) ]
		raise:  Error
		withMessageText: CreditCard creditCardNumberMustBePositiveErrorDescription.
	
	
	
	
	! !

!methodRemoval: CreditCard class #invalidCreditCardSignErrorDescription stamp: 'MS 6/13/2021 20:09:41'!
invalidCreditCardSignErrorDescription
	
	^'Credit card number should be positive'.!
!CreditCard class methodsFor: 'assertions' stamp: 'MS 6/13/2021 20:11:40'!
assertCreditCardNumberIsInteger: aCreditCardNumber

	(aCreditCardNumber isInteger) ifFalse: [self error: CreditCard invalidCreditCardNumberTypeErrorDescription].
	! !
!CreditCard class methodsFor: 'assertions' stamp: 'MS 6/13/2021 20:11:53' prior: 50944606!
assertCreditCardNumberIsValid: aCreditCardNumber

	self assertCreditCardNumberIsInteger: aCreditCardNumber.
	
	((aCreditCardNumber numberOfDigitsInBase: 10) isEqualTo: 16) ifFalse: [self error: CreditCard invalidCreditCardNumberLengthErrorDescription].
	
	(aCreditCardNumber positive) ifFalse: [self error: CreditCard creditCardNumberMustBePositiveErrorDescription ].
! !
!CreditCard class methodsFor: 'assertions' stamp: 'MS 6/13/2021 20:12:09'!
assertCreditCardNumberHas16Digits: aCreditCardNumber

	((aCreditCardNumber numberOfDigitsInBase: 10) isEqualTo: 16) ifFalse: [self error: CreditCard invalidCreditCardNumberLengthErrorDescription].
! !
!CreditCard class methodsFor: 'assertions' stamp: 'MS 6/13/2021 20:12:19' prior: 50944654!
assertCreditCardNumberIsValid: aCreditCardNumber

	self assertCreditCardNumberIsInteger: aCreditCardNumber.
	
	self assertCreditCardNumberHas16Digits: aCreditCardNumber.
	
	(aCreditCardNumber positive) ifFalse: [self error: CreditCard creditCardNumberMustBePositiveErrorDescription ].
! !
!CreditCard class methodsFor: 'assertions' stamp: 'MS 6/13/2021 20:12:33'!
assertCreditCardNumberIsPositive: aCreditCardNumber

	(aCreditCardNumber positive) ifFalse: [self error: CreditCard creditCardNumberMustBePositiveErrorDescription ].
! !
!CreditCard class methodsFor: 'assertions' stamp: 'MS 6/13/2021 20:12:46' prior: 50944678!
assertCreditCardNumberIsValid: aCreditCardNumber

	self assertCreditCardNumberIsInteger: aCreditCardNumber.
	
	self assertCreditCardNumberHas16Digits: aCreditCardNumber.
	
	self assertCreditCardNumberIsPositive: aCreditCardNumber.
! !

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:12:48'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:12:48'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:12:48'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:12:48'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:12:49'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:12:49'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:13:50'!
test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: 1.2) ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberTypeErrorDescription.
	
	
	
	
	! !
!Cashier methodsFor: 'checkout' stamp: 'MS 6/13/2021 20:14:36'!
checkout: aCart with: aCreditCard expiring: expiring 
	
	(aCart isEmpty) ifTrue: [ ^self error: self class checkoutWithEmptyCartErrorMessage ].
	^aCart totalValue.
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:14:36' prior: 50944623!
test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: -1111222233334444) expiring: expiring ]
		raise:  Error
		withMessageText: CreditCard creditCardNumberMustBePositiveErrorDescription.
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:14:36' prior: 50944469!
test01CheckoutWithEmptyCartShouldRaiseAnError

	| emptyCart creditCard |
	
	emptyCart := Cart acceptingItemsOf: Dictionary new.
	
	creditCard := CreditCard number: 1111222233334444.
	
	self 
		should: [ Cashier new checkout: emptyCart with: creditCard expiring: expiring ]
		raise:  Error
		withMessageText: Cashier checkoutWithEmptyCartErrorMessage.
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:14:36' prior: 50944577!
test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: 123456) expiring: expiring ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberLengthErrorDescription.
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:14:36' prior: 50944358!
test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: 1.2) expiring: expiring ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberTypeErrorDescription.
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:14:36' prior: 50944512!
test03CheckoutCartWithManyItemShouldReturnCartTotalValue

	| cart catalog creditCard |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	creditCard := CreditCard number: 1111222233334444.
	
	self assert: (Cashier new checkout: cart with: creditCard expiring: expiring ) equals: 30.
	
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:14:36' prior: 50944490!
test02CheckoutCartWithOneItemShouldReturnCartTotalValue

	| cart catalog creditCard |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	
	creditCard := CreditCard number: 1111222233334444.
	
	self assert: (Cashier new checkout: cart with: creditCard expiring: expiring ) equals: 10.
	
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:14:36' prior: 50944732!
test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: 1.2) expiring: expiring ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberTypeErrorDescription.
	
	
	
	
	! !

!methodRemoval: Cashier #checkout:with: stamp: 'MS 6/13/2021 20:14:36'!
checkout: aCart with: aCreditCard
	
	(aCart isEmpty) ifTrue: [ ^self error: self class checkoutWithEmptyCartErrorMessage ].
	^aCart totalValue.
	
	
	!
!Cashier methodsFor: 'checkout' stamp: 'MS 6/13/2021 20:15:10'!
checkout: aCart with: aCreditCard  
	
	(aCart isEmpty) ifTrue: [ ^self error: self class checkoutWithEmptyCartErrorMessage ].
	^aCart totalValue.
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:10' prior: 50944775!
test01CheckoutWithEmptyCartShouldRaiseAnError

	| emptyCart creditCard |
	
	emptyCart := Cart acceptingItemsOf: Dictionary new.
	
	creditCard := CreditCard number: 1111222233334444.
	
	self 
		should: [ Cashier new checkout: emptyCart with: creditCard ]
		raise:  Error
		withMessageText: Cashier checkoutWithEmptyCartErrorMessage.
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:10' prior: 50944841!
test02CheckoutCartWithOneItemShouldReturnCartTotalValue

	| cart catalog creditCard |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	
	creditCard := CreditCard number: 1111222233334444.
	
	self assert: (Cashier new checkout: cart with: creditCard ) equals: 10.
	
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:10' prior: 50944856!
test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: 1.2) ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberTypeErrorDescription.
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:10' prior: 50944825!
test03CheckoutCartWithManyItemShouldReturnCartTotalValue

	| cart catalog creditCard |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	creditCard := CreditCard number: 1111222233334444.
	
	self assert: (Cashier new checkout: cart with: creditCard ) equals: 30.
	
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:10' prior: 50944790!
test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: 123456) ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberLengthErrorDescription.
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:10' prior: 50944808!
test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: 1.2) ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberTypeErrorDescription.
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:10' prior: 50944757!
test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: -1111222233334444) ]
		raise:  Error
		withMessageText: CreditCard creditCardNumberMustBePositiveErrorDescription.
	
	
	
	
	! !

!methodRemoval: Cashier #checkout:with:expiring: stamp: 'MS 6/13/2021 20:15:10'!
checkout: aCart with: aCreditCard expiring: expiring 
	
	(aCart isEmpty) ifTrue: [ ^self error: self class checkoutWithEmptyCartErrorMessage ].
	^aCart totalValue.
	
	
	!
!NumberToArithmeticObjectAdapter class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 20:15:36'!
number: aNumber expirationDate: expiring 
	^ self new initializeNumber: aNumber! !
!InvalidGregorianYearNumberException class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 20:15:36'!
number: aNumber expirationDate: expiring 

	^self new initializeNumber: aNumber! !
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 20:15:36'!
number: aCreditCardNumber expirationDate: expiring  

	self assertCreditCardNumberIsValid: aCreditCardNumber .

	^self new initializeNumber: aCreditCardNumber.! !
!GregorianYear class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 20:15:36'!
number: aNumber expirationDate: expiring 

	^(self isValidYearNumber: aNumber)
		ifTrue: [ self createYear: aNumber ]
		ifFalse: [ InvalidGregorianYearNumberException signalNumber: aNumber ]! !
!InvalidGregorianMonthNumberException class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 20:15:36'!
number: aNumber expirationDate: expiring 

	^self new initializeNumber: aNumber! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50766285!
testLastDay

	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) lastDay = GregorianDay saturday.
	self assert: (GregorianMonthOfYear februaryOf: (GregorianYear number: 2004 expirationDate: expiring)) lastDay = GregorianDay sunday.
	self assert: (GregorianMonthOfYear februaryOf: (GregorianYear number: 2003 expirationDate: expiring)) lastDay = GregorianDay friday! !
!ArithmeticObject methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50752347!
adaptToNumber: aNumber andSend: aSelector 
	^ (NumberToArithmeticObjectAdapter number: aNumber expirationDate: expiring) 
		perform: aSelector
		with: self! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50766644!
testGreaterThan

	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) > (GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expirationDate: expiring)).
						
	self assert: (GregorianMonthOfYear februaryOf: (GregorianYear number: 2003 expirationDate: expiring)) >(GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expirationDate: expiring)).
	
	self deny: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expirationDate: expiring)) > (GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expirationDate: expiring))! !
!GregorianDayOfMonth methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50758806!
, aYearNumber

	^self ofYear: (GregorianYear number: aYearNumber expirationDate: expiring)! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50766240!
testFirstDate

	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) firstDate = (FixedGregorianDate yearNumber: 2004 monthNumber: 1 dayNumber: 1)! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50768203!
testInvalidPreviousANumberOfYears

	| anyUnit |
	
	anyUnit := BaseUnit named: 'Any Unit'.
	
	self should: [ (GregorianYear number: 2004 expirationDate: expiring) previous: 1] raise: CanNotConvertMeasureException.
	self should: [ (GregorianYear number: 2004 expirationDate: expiring) previous: (anyUnit with: 1) ] raise: CanNotConvertMeasureException.
	

	
	
	
	! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50767862!
testInvalidYear

	self 
		should: [ GregorianYear number: 0 expirationDate: expiring ]
		raise: InvalidGregorianYearNumberException
		withExceptionDo: [ :anException |
			self assert: anException number = 0.
			self assert: anException description = '0 is an invalid number for a year' ].
				
	self 
		should: [ GregorianYear number: 1.5 expirationDate: expiring ]
		raise: InvalidGregorianYearNumberException
		withExceptionDo: [ :anException |
			self assert: anException number = 1.5.
			self assert: anException description = ('{1} is an invalid number for a year' format: { 1.5 }) ]! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50766800!
testNextANumberOfMonths

	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) next: self oneMonth) =
		(GregorianMonthOfYear februaryOf: (GregorianYear number: 2004 expirationDate: expiring)).
	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) next: self elevenMonths) =
		(GregorianMonthOfYear decemberOf: (GregorianYear number: 2004 expirationDate: expiring)).
	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) next: self twelveMonths) =
		(GregorianMonthOfYear januaryOf: (GregorianYear number: 2005 expirationDate: expiring)).
	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) next: self thirteenMonths) =
		(GregorianMonthOfYear februaryOf: (GregorianYear number: 2005 expirationDate: expiring)).
	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) next: self ceroMonths) =
		(GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)).
	
	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) next: self oneYear) =
		(GregorianMonthOfYear januaryOf: (GregorianYear number: 2005 expirationDate: expiring)).
	self assert: ((GregorianMonthOfYear aprilOf: (GregorianYear number: 2004 expirationDate: expiring)) next: self oneYear) =
		(GregorianMonthOfYear aprilOf: (GregorianYear number: 2005 expirationDate: expiring)).
	
	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) next: (TimeUnits month with: 0.5)) =
		(GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)).
	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) next: (TimeUnits month with: 1.5)) =
		(GregorianMonthOfYear februaryOf: (GregorianYear number: 2004 expirationDate: expiring))! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50767054!
testToByDo

	| number |
	
	number := 1.
	
	((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) 
		to: (GregorianMonthOfYear decemberOf: (GregorianYear number: 2004 expirationDate: expiring))
		by: self twoMonths)
		do: [ :aGregorianMonth | 
			self assert: aGregorianMonth monthNumber = number.
			number := number + 2. ].
		
	self assert: number = 13! !
!NumberToArithmeticObjectAdapterTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50742428!
testPrintString
	self 
		assert: (NumberToArithmeticObjectAdapter number: 10 expirationDate: expiring) 
				printString = 'NumberMeasureAdapter for: 10'! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50768024!
testTo

	self assert: ((GregorianYear number: 2004 expirationDate: expiring) to: (GregorianYear number: 2010 expirationDate: expiring)) from=(GregorianYear number: 2004 expirationDate: expiring).
	self assert: ((GregorianYear number: 2004 expirationDate: expiring) to: (GregorianYear number: 2010 expirationDate: expiring)) to=(GregorianYear number: 2010 expirationDate: expiring).
	self assert: ((GregorianYear number: 2004 expirationDate: expiring) to: (GregorianYear number: 2010 expirationDate: expiring)) by=self oneYear.
	

	! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50768234!
testNextANumberOfYears

	self assert: ((GregorianYear number: 2004 expirationDate: expiring) next: self zeroYears) =(GregorianYear number: 2004 expirationDate: expiring).
	self assert: ((GregorianYear number: 2004 expirationDate: expiring) next: self oneYear) =(GregorianYear number: 2005 expirationDate: expiring).
	self assert: ((GregorianYear number: 2004 expirationDate: expiring) next: self tenYears) =(GregorianYear number: 2014 expirationDate: expiring).
	self assert: ((GregorianYear number: -1 expirationDate: expiring) next: self oneYear) =(GregorianYear number: 1 expirationDate: expiring).
	self should: [ (GregorianYear number: 2004 expirationDate: expiring) next: self thirteenMonths ]
		raise: InvalidGregorianYearNumberException.
	self should: [ (GregorianYear number: 2004 expirationDate: expiring) next: self sixMonths ]
		raise: InvalidGregorianYearNumberException! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50944932!
test03CheckoutCartWithManyItemShouldReturnCartTotalValue

	| cart catalog creditCard |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	creditCard := CreditCard number: 1111222233334444 expirationDate: expiring.
	
	self assert: (Cashier new checkout: cart with: creditCard ) equals: 30.
	
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50944982!
test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: -1111222233334444 expirationDate: expiring) ]
		raise:  Error
		withMessageText: CreditCard creditCardNumberMustBePositiveErrorDescription.
	
	
	
	
	! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50767958!
testLastDay

	self assert: (GregorianYear number: 2004 expirationDate: expiring) lastDay = (FixedGregorianDate yearNumber: 2004 monthNumber: 12 dayNumber: 31) day.
	self assert: (GregorianYear number: 2003 expirationDate: expiring) lastDay = (FixedGregorianDate yearNumber: 2003 monthNumber: 12 dayNumber: 31) day.

	! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50768017!
testDistanceTo

	self assert:
		((GregorianYear createYear: 2005) absoluteDistanceTo: (GregorianYear number: 2008 expirationDate: expiring)) =
			(TimeUnits year with: 3)! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50767995!
testNumberOfDays

	self assert: (GregorianYear number: 2004 expirationDate: expiring) numberOfDays=(TimeUnits day with: 366).
	self assert: (GregorianYear number: 2003 expirationDate: expiring) numberOfDays=(TimeUnits day with: 365).

	! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50768037!
testToBy

	self assert: ((GregorianYear number: 2004 expirationDate: expiring) to: (GregorianYear number: 2010 expirationDate: expiring) by: self twoYears ) from=(GregorianYear number: 2004 expirationDate: expiring).
	self assert: ((GregorianYear number: 2004 expirationDate: expiring) to: (GregorianYear number: 2010 expirationDate: expiring) by: self twoYears ) to=(GregorianYear number: 2010 expirationDate: expiring).
	self assert: ((GregorianYear number: 2004 expirationDate: expiring) to: (GregorianYear number: 2010 expirationDate: expiring) by: self twoYears ) by=self twoYears.
	

	! !
!ArithmeticObject methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50752374!
coerce: aNumber 
	^ NumberToArithmeticObjectAdapter number: aNumber expirationDate: expiring! !
!CardinalDayMonthRuleTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50761110!
testDifferentMonth

	| rule months |
	
	rule := CardinalDayMonthRule cardinal: 3 day: GregorianDay monday month: GregorianMonth august.
	months := (GregorianYear number: 2003 expirationDate: expiring) months reject: [ :aMonthOfYear | aMonthOfYear month = GregorianMonth august ].
	
	months do: [ :aMonthOfYear | self deny: (rule includes: (aMonthOfYear cardinal: 3 day: GregorianDay monday)) ].
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50944901!
test02CheckoutCartWithOneItemShouldReturnCartTotalValue

	| cart catalog creditCard |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	
	creditCard := CreditCard number: 1111222233334444 expirationDate: expiring.
	
	self assert: (Cashier new checkout: cart with: creditCard ) equals: 10.
	
	
	
	
	
	! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50766788!
testNext

	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) next) = (GregorianMonthOfYear februaryOf: (GregorianYear number: 2004 expirationDate: expiring)).
	self assert: ((GregorianMonthOfYear decemberOf: (GregorianYear number: 2004 expirationDate: expiring)) next) = (GregorianMonthOfYear januaryOf: (GregorianYear number: 2005 expirationDate: expiring))
	! !
!GregorianMonthTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50767269!
testOfYear

	self assert: (GregorianMonth february ofYear: (GregorianYear number: 2003 expirationDate: expiring)) = (GregorianMonthOfYear yearNumber: 2003 monthNumber: 2 )! !
!InvalidGregorianMonthNumberException class methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50760879!
signalNumber: aNumber

	(self number: aNumber expirationDate: expiring) signal! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50767882!
testDates

	self assert: (GregorianYear number: 2004 expirationDate: expiring) dates first=(FixedGregorianDate yearNumber: 2004 monthNumber: 1 dayNumber: 1).
	self assert: (GregorianYear number: 2004 expirationDate: expiring) dates last=(FixedGregorianDate yearNumber: 2004 monthNumber: 12 dayNumber: 31).

	self assert: (GregorianYear number: 2003 expirationDate: expiring) dates first=(FixedGregorianDate yearNumber: 2003 monthNumber: 1 dayNumber: 1).
	self assert: (GregorianYear number: 2003 expirationDate: expiring) dates last=(FixedGregorianDate yearNumber: 2003 monthNumber: 12 dayNumber: 31).

	! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50768215!
testIsLeap

	self assert: (GregorianYear number: 2004 expirationDate: expiring) isLeap.
	self assert: (GregorianYear number: 2000 expirationDate: expiring) isLeap.
	self assert: (GregorianYear number: 2400 expirationDate: expiring) isLeap.
	
	self deny: (GregorianYear number: 2003 expirationDate: expiring) isLeap.
	self deny: (GregorianYear number: 1900 expirationDate: expiring) isLeap.
	self deny: (GregorianYear number: 2100 expirationDate: expiring) isLeap.

	! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50766497!
testCreation

	self assert: (GregorianMonthOfYear yearNumber: 2004 monthNumber:1) year = (GregorianYear number: 2004 expirationDate: expiring).
	self assert: (GregorianMonthOfYear yearNumber: 2004 monthNumber:1) monthNumber = 1.

	self assert: (GregorianMonthOfYear yearNumber: 2004 month: GregorianMonth january) year = (GregorianYear number: 2004 expirationDate: expiring).
	self assert: (GregorianMonthOfYear yearNumber: 2004 month: GregorianMonth january) monthNumber = 1.

	self assert: (GregorianMonthOfYear year: (GregorianYear number: 2004 expirationDate: expiring) monthNumber:1) year = (GregorianYear number: 2004 expirationDate: expiring).
	self assert: (GregorianMonthOfYear year: (GregorianYear number: 2004 expirationDate: expiring) monthNumber:1) monthNumber = 1.

	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) year = (GregorianYear number: 2004 expirationDate: expiring).
	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) monthNumber = 1.
	
	self assert: (GregorianMonthOfYear februaryOf: (GregorianYear number: 2004 expirationDate: expiring)) year = (GregorianYear number: 2004 expirationDate: expiring).
	self assert: (GregorianMonthOfYear februaryOf: (GregorianYear number: 2004 expirationDate: expiring)) monthNumber = 2.
	
	self assert: (GregorianMonthOfYear marchOf: (GregorianYear number: 2004 expirationDate: expiring)) year = (GregorianYear number: 2004 expirationDate: expiring).
	self assert: (GregorianMonthOfYear marchOf: (GregorianYear number: 2004 expirationDate: expiring)) monthNumber = 3.
	
	self assert: (GregorianMonthOfYear aprilOf: (GregorianYear number: 2004 expirationDate: expiring)) year = (GregorianYear number: 2004 expirationDate: expiring).
	self assert: (GregorianMonthOfYear aprilOf: (GregorianYear number: 2004 expirationDate: expiring)) monthNumber = 4.
	
	self assert: (GregorianMonthOfYear mayOf: (GregorianYear number: 2004 expirationDate: expiring)) year = (GregorianYear number: 2004 expirationDate: expiring).
	self assert: (GregorianMonthOfYear mayOf: (GregorianYear number: 2004 expirationDate: expiring)) monthNumber = 5.
	
	self assert: (GregorianMonthOfYear juneOf: (GregorianYear number: 2004 expirationDate: expiring)) year = (GregorianYear number: 2004 expirationDate: expiring).
	self assert: (GregorianMonthOfYear juneOf: (GregorianYear number: 2004 expirationDate: expiring)) monthNumber = 6.
	
	self assert: (GregorianMonthOfYear julyOf: (GregorianYear number: 2004 expirationDate: expiring)) year = (GregorianYear number: 2004 expirationDate: expiring).
	self assert: (GregorianMonthOfYear julyOf: (GregorianYear number: 2004 expirationDate: expiring)) monthNumber = 7.
	
	self assert: (GregorianMonthOfYear augustOf: (GregorianYear number: 2004 expirationDate: expiring)) year = (GregorianYear number: 2004 expirationDate: expiring).
	self assert: (GregorianMonthOfYear augustOf: (GregorianYear number: 2004 expirationDate: expiring)) monthNumber = 8.
	
	self assert: (GregorianMonthOfYear septemberOf: (GregorianYear number: 2004 expirationDate: expiring)) year = (GregorianYear number: 2004 expirationDate: expiring).
	self assert: (GregorianMonthOfYear septemberOf: (GregorianYear number: 2004 expirationDate: expiring)) monthNumber = 9.
	
	self assert: (GregorianMonthOfYear octoberOf: (GregorianYear number: 2004 expirationDate: expiring)) year = (GregorianYear number: 2004 expirationDate: expiring).
	self assert: (GregorianMonthOfYear octoberOf: (GregorianYear number: 2004 expirationDate: expiring)) monthNumber = 10.
	
	self assert: (GregorianMonthOfYear novemberOf: (GregorianYear number: 2004 expirationDate: expiring)) year = (GregorianYear number: 2004 expirationDate: expiring).
	self assert: (GregorianMonthOfYear novemberOf: (GregorianYear number: 2004 expirationDate: expiring)) monthNumber = 11.
	
	self assert: (GregorianMonthOfYear decemberOf: (GregorianYear number: 2004 expirationDate: expiring)) year = (GregorianYear number: 2004 expirationDate: expiring).
	self assert: (GregorianMonthOfYear decemberOf: (GregorianYear number: 2004 expirationDate: expiring)) monthNumber = 12! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50766267!
testLastDate

	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) lastDate = (FixedGregorianDate yearNumber: 2004 monthNumber: 1 dayNumber: 31).
	self assert: (GregorianMonthOfYear februaryOf: (GregorianYear number: 2004 expirationDate: expiring)) lastDate = (FixedGregorianDate yearNumber: 2004 monthNumber: 2 dayNumber: 29).
	self assert: (GregorianMonthOfYear februaryOf: (GregorianYear number: 2003 expirationDate: expiring)) lastDate = (FixedGregorianDate yearNumber: 2003 monthNumber: 2 dayNumber: 28)
	

	! !
!GregorianYear methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50760215!
nextNumberOfYears: numberOfYears

	| newNumber |
	newNumber := self newNumberFrom: numberOfYears.
	^self class number: newNumber expirationDate: expiring! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50766906!
testPreviousANumberOfMonths

	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) previous: self oneMonth) =
		(GregorianMonthOfYear decemberOf: (GregorianYear number: 2003 expirationDate: expiring)).
	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) previous: self elevenMonths) =
		(GregorianMonthOfYear februaryOf: (GregorianYear number: 2003 expirationDate: expiring)).
	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) previous: self twelveMonths) =
		(GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expirationDate: expiring)).
	self assert: ((GregorianMonthOfYear februaryOf: (GregorianYear number: 2004 expirationDate: expiring)) previous: self thirteenMonths) =
		(GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expirationDate: expiring)).
	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) previous: self thirteenMonths) =
		(GregorianMonthOfYear decemberOf: (GregorianYear number: 2002 expirationDate: expiring)).
	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) previous: self ceroMonths) =
		(GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)).
	
	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) previous: self oneYear) =
		(GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expirationDate: expiring)).
	self assert: ((GregorianMonthOfYear aprilOf: (GregorianYear number: 2004 expirationDate: expiring)) previous: self oneYear) =
		(GregorianMonthOfYear aprilOf: (GregorianYear number: 2003 expirationDate: expiring)).

	self assert: ((GregorianMonthOfYear julyOf: (GregorianYear number: 2004 expirationDate: expiring)) previous: self oneMonth) =
		(GregorianMonthOfYear juneOf: (GregorianYear number: 2004 expirationDate: expiring)).
	self assert: ((GregorianMonthOfYear julyOf: (GregorianYear number: 2004 expirationDate: expiring)) previous: self elevenMonths) =
		(GregorianMonthOfYear augustOf: (GregorianYear number: 2003 expirationDate: expiring)).
	self assert: ((GregorianMonthOfYear julyOf: (GregorianYear number: 2004 expirationDate: expiring)) previous: self twelveMonths) =
		(GregorianMonthOfYear julyOf: (GregorianYear number: 2003 expirationDate: expiring))! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50766968!
testPreviousMonthDefinedAs

	| month |
	
	month := GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring).
	self assert: (month previousMonth: GregorianMonth january) =  (GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expirationDate: expiring)).
	self assert: (month previousMonth: GregorianMonth january in: self twoYears)  = (GregorianMonthOfYear januaryOf: (GregorianYear number: 2002 expirationDate: expiring)).

	month := GregorianMonthOfYear aprilOf: (GregorianYear number: 2004 expirationDate: expiring).
	self assert: (month previousMonth: GregorianMonth february) =  (GregorianMonthOfYear februaryOf: (GregorianYear number: 2004 expirationDate: expiring)).
	self assert: (month previousMonth: GregorianMonth february in: self twoYears)  = (GregorianMonthOfYear februaryOf: (GregorianYear number: 2003 expirationDate: expiring)).
	
	month := GregorianMonthOfYear julyOf: (GregorianYear number: 2004 expirationDate: expiring).
	self assert: (month previousMonth: GregorianMonth january) =  (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)).
	self assert: (month previousMonth: GregorianMonth january in: self twoYears ) =  (GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expirationDate: expiring)).

	month := GregorianMonthOfYear januaryOf: (GregorianYear number: 1 expirationDate: expiring).
	self assert: (month previousMonth: GregorianMonth january) =  (GregorianMonthOfYear januaryOf: (GregorianYear number: -1 expirationDate: expiring)).
	self assert: (month previousMonth: GregorianMonth december) =  (GregorianMonthOfYear decemberOf: (GregorianYear number: -1 expirationDate: expiring))! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50768003!
testNumberOfDaysFromBaseDate

	self assert: (GregorianYear number: 1901 expirationDate: expiring) numberOfDaysFromBaseDate=(TimeUnits day with: 0).
	self assert: (GregorianYear number: 2004 expirationDate: expiring) numberOfDaysFromBaseDate=(TimeUnits day with: 37620).

! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50767038!
testToBy

	| interval |
	
	interval := (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) 
		to: (GregorianMonthOfYear marchOf: (GregorianYear number: 2004 expirationDate: expiring))
		by: self twoMonths.
		
	self assert: interval from = (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)).
	self assert: interval to = (GregorianMonthOfYear marchOf: (GregorianYear number: 2004 expirationDate: expiring)).
	self assert: interval by = self twoMonths
	! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50766298!
testLastDayNumber

	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) lastDayNumber =
		(GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) numberOfDays amount.
	self assert: (GregorianMonthOfYear februaryOf: (GregorianYear number: 2004 expirationDate: expiring)) lastDayNumber =
		(GregorianMonthOfYear februaryOf: (GregorianYear number: 2004 expirationDate: expiring)) numberOfDays amount.
	self assert: (GregorianMonthOfYear februaryOf: (GregorianYear number: 2003 expirationDate: expiring)) lastDayNumber =
		(GregorianMonthOfYear februaryOf: (GregorianYear number: 2003 expirationDate: expiring)) numberOfDays amount.
	self assert: (GregorianMonthOfYear marchOf: (GregorianYear number: 2004 expirationDate: expiring)) lastDayNumber =
		(GregorianMonthOfYear marchOf: (GregorianYear number: 2004 expirationDate: expiring)) numberOfDays amount.
	self assert: (GregorianMonthOfYear aprilOf: (GregorianYear number: 2004 expirationDate: expiring)) lastDayNumber =
		(GregorianMonthOfYear aprilOf: (GregorianYear number: 2004 expirationDate: expiring)) numberOfDays amount.
	self assert: (GregorianMonthOfYear mayOf: (GregorianYear number: 2004 expirationDate: expiring)) lastDayNumber =
		(GregorianMonthOfYear mayOf: (GregorianYear number: 2004 expirationDate: expiring)) numberOfDays amount.
	self assert: (GregorianMonthOfYear juneOf: (GregorianYear number: 2004 expirationDate: expiring)) lastDayNumber =
		(GregorianMonthOfYear juneOf: (GregorianYear number: 2004 expirationDate: expiring)) numberOfDays amount.
	self assert: (GregorianMonthOfYear julyOf: (GregorianYear number: 2004 expirationDate: expiring)) lastDayNumber =
		(GregorianMonthOfYear julyOf: (GregorianYear number: 2004 expirationDate: expiring)) numberOfDays amount.
	self assert: (GregorianMonthOfYear augustOf: (GregorianYear number: 2004 expirationDate: expiring)) lastDayNumber =
		(GregorianMonthOfYear augustOf: (GregorianYear number: 2004 expirationDate: expiring)) numberOfDays amount.
	self assert: (GregorianMonthOfYear septemberOf: (GregorianYear number: 2004 expirationDate: expiring)) lastDayNumber =
		(GregorianMonthOfYear septemberOf: (GregorianYear number: 2004 expirationDate: expiring)) numberOfDays amount.
	self assert: (GregorianMonthOfYear octoberOf: (GregorianYear number: 2004 expirationDate: expiring)) lastDayNumber =
		(GregorianMonthOfYear octoberOf: (GregorianYear number: 2004 expirationDate: expiring)) numberOfDays amount.
	self assert: (GregorianMonthOfYear novemberOf: (GregorianYear number: 2004 expirationDate: expiring)) lastDayNumber =
		(GregorianMonthOfYear novemberOf: (GregorianYear number: 2004 expirationDate: expiring)) numberOfDays amount.
	self assert: (GregorianMonthOfYear decemberOf: (GregorianYear number: 2004 expirationDate: expiring)) lastDayNumber =
		(GregorianMonthOfYear decemberOf: (GregorianYear number: 2004 expirationDate: expiring)) numberOfDays amount! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50767900!
testDaysInFebruary

	self assert: (GregorianYear number: 2004 expirationDate: expiring) numberOfDaysInFebruary=GregorianDay twentyNineDays.
	self assert: (GregorianYear number: 2003 expirationDate: expiring) numberOfDaysInFebruary=GregorianDay twentyEightDays.

	! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50768161!
testIncludesMonthOfYear

	self assert: ((GregorianYear number: 2005 expirationDate: expiring) includes: (GregorianMonthOfYear yearNumber: 2005 monthNumber: 1)).
	self assert: ((GregorianYear number: 2005 expirationDate: expiring) includes: (GregorianMonthOfYear yearNumber: 2005 monthNumber: 12)).	
	
	self assert: ((GregorianYear number: 2004 expirationDate: expiring) includes: (GregorianMonthOfYear yearNumber: 2004 monthNumber: 1)).	
	self assert: ((GregorianYear number: 2004 expirationDate: expiring) includes: (GregorianMonthOfYear yearNumber: 2004 monthNumber: 12)).
	
	self deny: ((GregorianYear number: 2004 expirationDate: expiring) includes: (GregorianMonthOfYear yearNumber: 2005 monthNumber: 1)).	
	self deny: ((GregorianYear number: 2004 expirationDate: expiring) includes: (GregorianMonthOfYear yearNumber: 2003 monthNumber: 12)).	
	! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50768084!
testEqual

	self assert: (GregorianYear number: 2004 expirationDate: expiring) = (GregorianYear number: 2004 expirationDate: expiring).
	self deny: (GregorianYear number: 2004 expirationDate: expiring) = (GregorianYear number: 2003 expirationDate: expiring).
! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50768091!
testGreaterThan

	self assert: (GregorianYear number: 2004 expirationDate: expiring) > (GregorianYear number: 2003 expirationDate: expiring).
	self deny: (GregorianYear number: 2004 expirationDate: expiring) > (GregorianYear number: 2004 expirationDate: expiring).
	
	! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50767947!
testLastDate

	self assert: (GregorianYear number: 2004 expirationDate: expiring) lastDate = (FixedGregorianDate yearNumber: 2004 monthNumber: 12 dayNumber: 31).
	self assert: (GregorianYear number: 2003 expirationDate: expiring) lastDate = (FixedGregorianDate yearNumber: 2003 monthNumber: 12 dayNumber: 31).

	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50944948!
test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: 123456 expirationDate: expiring) ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberLengthErrorDescription.
	
	
	
	
	! !
!FebruaryGregorianMonthTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50763362!
testNumberOfDaysIn

	| month |
	
	month := FebruaryGregorianMonth new.

	self assert: (month numberOfDaysIn: (GregorianYear number: 2004 expirationDate: expiring))=(SimpleMeasure amount: 29 unit: TimeUnits day).
	self assert: (month numberOfDaysIn: (GregorianYear number: 2003 expirationDate: expiring))=(SimpleMeasure amount: 28 unit: TimeUnits day)! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50944965!
test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: 1.2 expirationDate: expiring) ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberTypeErrorDescription.
	
	
	
	
	! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50766373!
testName

	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) name = 'January'.
	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expirationDate: expiring)) name = 'January'.
	
	self assert: (GregorianMonthOfYear februaryOf: (GregorianYear number: 2004 expirationDate: expiring)) name = 'February'.
	self assert: (GregorianMonthOfYear februaryOf: (GregorianYear number: 2003 expirationDate: expiring)) name = 'February'.
	
	self assert: (GregorianMonthOfYear marchOf: (GregorianYear number: 2004 expirationDate: expiring)) name = 'March'.
	self assert: (GregorianMonthOfYear marchOf: (GregorianYear number: 2003 expirationDate: expiring)) name = 'March'.
	
	self assert: (GregorianMonthOfYear aprilOf: (GregorianYear number: 2004 expirationDate: expiring)) name = 'April'.
	self assert: (GregorianMonthOfYear aprilOf: (GregorianYear number: 2003 expirationDate: expiring)) name = 'April'.
	
	self assert: (GregorianMonthOfYear mayOf: (GregorianYear number: 2004 expirationDate: expiring)) name = 'May'.
	self assert: (GregorianMonthOfYear mayOf: (GregorianYear number: 2003 expirationDate: expiring)) name = 'May'.
	
	self assert: (GregorianMonthOfYear juneOf: (GregorianYear number: 2004 expirationDate: expiring)) name = 'June'.
	self assert: (GregorianMonthOfYear juneOf: (GregorianYear number: 2003 expirationDate: expiring)) name = 'June'.
	
	self assert: (GregorianMonthOfYear julyOf: (GregorianYear number: 2004 expirationDate: expiring)) name = 'July'.
	self assert: (GregorianMonthOfYear julyOf: (GregorianYear number: 2003 expirationDate: expiring)) name = 'July'.
	
	self assert: (GregorianMonthOfYear augustOf: (GregorianYear number: 2004 expirationDate: expiring)) name = 'August'.
	self assert: (GregorianMonthOfYear augustOf: (GregorianYear number: 2003 expirationDate: expiring)) name = 'August'.
	
	self assert: (GregorianMonthOfYear septemberOf: (GregorianYear number: 2004 expirationDate: expiring)) name = 'September'.
	self assert: (GregorianMonthOfYear septemberOf: (GregorianYear number: 2003 expirationDate: expiring)) name = 'September'.
	
	self assert: (GregorianMonthOfYear octoberOf: (GregorianYear number: 2004 expirationDate: expiring)) name = 'October'.
	self assert: (GregorianMonthOfYear octoberOf: (GregorianYear number: 2003 expirationDate: expiring)) name = 'October'.
	
	self assert: (GregorianMonthOfYear novemberOf: (GregorianYear number: 2004 expirationDate: expiring)) name = 'November'.
	self assert: (GregorianMonthOfYear novemberOf: (GregorianYear number: 2003 expirationDate: expiring)) name = 'November'.
	
	self assert: (GregorianMonthOfYear decemberOf: (GregorianYear number: 2004 expirationDate: expiring)) name = 'December'.
	self assert: (GregorianMonthOfYear decemberOf: (GregorianYear number: 2003 expirationDate: expiring)) name = 'December'! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50768298!
testPreviousLeapYear

	self assert: (GregorianYear number: 2005 expirationDate: expiring) previousLeapYear= (GregorianYear number: 2004 expirationDate: expiring).
	self assert: (GregorianYear number: 2004 expirationDate: expiring) previousLeapYear= (GregorianYear number: 2000 expirationDate: expiring).
	self assert: (GregorianYear number: 1901 expirationDate: expiring) previousLeapYear= (GregorianYear number: 1896 expirationDate: expiring).

	! !
!GregorianMonthOfYear class methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50760020!
yearNumber: aYearNumber monthNumber: aMonthNumber

	^self year: (GregorianYear number: aYearNumber expirationDate: expiring) monthNumber: aMonthNumber! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50768267!
testPrevious

	self assert: (GregorianYear number: 2004 expirationDate: expiring) previous=(GregorianYear number: 2003 expirationDate: expiring).
	self assert: (GregorianYear number: 1 expirationDate: expiring) previous=(GregorianYear number: -1 expirationDate: expiring).
	

	! !
!FixedGregorianDateTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50763910!
testCreation

	self assert: (FixedGregorianDate yearNumber: 2004 monthNumber: 1 dayNumber: 1) monthOfYear=(GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)).
	self assert: (FixedGregorianDate yearNumber: 2004 monthNumber: 1 dayNumber: 1) dayNumber=1.
	
	self assert: (FixedGregorianDate monthOfYear: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) dayNumber: 1) monthOfYear=(GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)).
	self assert: (FixedGregorianDate monthOfYear: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) dayNumber: 1) dayNumber=1.

	self assert: (FixedGregorianDate year: (GregorianYear number: 2004 expirationDate: expiring) month: GregorianMonth january dayNumber: 1) monthOfYear=(GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)).
	self assert: (FixedGregorianDate year: (GregorianYear number: 2004 expirationDate: expiring) month: GregorianMonth january dayNumber: 1) dayNumber=1.

	self assert: (FixedGregorianDate yearNumber: 2004 month: GregorianMonth january dayNumber: 1) monthOfYear=(GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)).
	self assert: (FixedGregorianDate yearNumber: 2004 month: GregorianMonth january dayNumber: 1) dayNumber=1.
! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50766660!
testLessThan

	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expirationDate: expiring)) < (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)).
						
	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expirationDate: expiring)) < (GregorianMonthOfYear februaryOf: (GregorianYear number: 2003 expirationDate: expiring)).
	
	self deny: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expirationDate: expiring)) < (GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expirationDate: expiring))! !
!GregorianMonthOfYear class methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50760014!
yearNumber: aYearNumber month: aGregorianMonth

	^self year: (GregorianYear number: aYearNumber expirationDate: expiring) month: aGregorianMonth! !
!GregorianMonth methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50758990!
, aYearNumber

	^self ofYear: (GregorianYear number: aYearNumber expirationDate: expiring)! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50768062!
testToByReverse

	| coll number |
	
	coll := ((GregorianYear number: 2004 expirationDate: expiring) to: (GregorianYear number: 2011 expirationDate: expiring) by: self twoYears ) reverse.
	number := 2010.
	coll do: [ :aGregorianYear |
		self assert: aGregorianYear number=number.
		number := number - 2. ].
	
	self assert: number=2002.
	! !
!FixedGregorianDateTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50764493!
testIncludesYear

	self 
		should: [ (FixedGregorianDate yearNumber: 2005 monthNumber: 1 dayNumber: 1) includes: (GregorianYear number: 2005 expirationDate: expiring) ]
		raise: Exception! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50767921!
testFirstDay

	self assert: (GregorianYear number: 2004 expirationDate: expiring) firstDay = (FixedGregorianDate yearNumber: 2004 monthNumber: 1 dayNumber: 1) day.
	self assert: (GregorianYear number: 2003 expirationDate: expiring) firstDay = (FixedGregorianDate yearNumber: 2003 monthNumber: 1 dayNumber: 1) day.

	! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50767931!
testFirstMonth

	self assert: (GregorianYear number: 2004 expirationDate: expiring) firstMonth = (GregorianMonthOfYear yearNumber: 2004 monthNumber: 1).
	self assert: (GregorianYear number: 2003 expirationDate: expiring) firstMonth = (GregorianMonthOfYear yearNumber: 2003 monthNumber: 1)

	! !
!GregorianDayOfMonthTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50765339!
testDateOfYear

	self assert: ((GregorianDayOfMonth monthNumber: 1 dayNumber: 1) ofYear: (GregorianYear number: 2005 expirationDate: expiring)) =
		(FixedGregorianDate yearNumber: 2005 monthNumber: 1 dayNumber: 1)! !
!JanuaryGregorianMonthTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50768449!
testNumberOfDaysIn

	| month |
	
	month := JanuaryGregorianMonth new.

	self assert: (month numberOfDaysIn: (GregorianYear number: 2004 expirationDate: expiring))=(SimpleMeasure amount: 31 unit: TimeUnits day).
	self assert: (month numberOfDaysIn: (GregorianYear number: 2003 expirationDate: expiring))=(SimpleMeasure amount: 31 unit: TimeUnits day)! !
!GregorianTimespanTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50767806!
testTo

	self assert: (GregorianTimespan from: januaryFirstOf2004 duration: GregorianDay oneDay) to
		= (FixedGregorianDate yearNumber: 2004 monthNumber: 01 dayNumber: 02).
	self assert: (GregorianTimespan from: (GregorianDayOfMonth monthNumber: 01 dayNumber: 01) duration: GregorianDay oneDay) to
		= (GregorianDayOfMonth monthNumber: 01 dayNumber: 02).
	self assert: (GregorianTimespan from: (TimeOfDay hours: 1) duration: (TimeUnits hour with: 10)) to = (TimeOfDay hours: 11).
	self assert: (GregorianTimespan from: GregorianMonth january duration: (TimeUnits month with: 10)) to = GregorianMonth november.
	self assert: (GregorianTimespan from: GregorianDay sunday duration: GregorianDay twoDays) to = GregorianDay tuesday.
	self assert: (GregorianTimespan from: (GregorianYear number: 2004 expirationDate: expiring) duration: (TimeUnits year with: 10)) to = (GregorianYear number: 2014 expirationDate: expiring)! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50767941!
testHash

	self assert: (GregorianYear number: 2004 expirationDate: expiring) hash = (GregorianYear number: 2004 expirationDate: expiring) hash.
! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50768275!
testPreviousANumberOfYears

	self assert: ((GregorianYear number: 2004 expirationDate: expiring) previous: self zeroYears) =(GregorianYear number: 2004 expirationDate: expiring).
	self assert: ((GregorianYear number: 2004 expirationDate: expiring) previous: self oneYear) =(GregorianYear number: 2003 expirationDate: expiring).
	self assert: ((GregorianYear number: 2004 expirationDate: expiring) previous: self tenYears) =(GregorianYear number: 1994 expirationDate: expiring).
	self assert: ((GregorianYear number: 1 expirationDate: expiring) previous: self oneYear) =(GregorianYear number: -1 expirationDate: expiring).
	self should:  [ (GregorianYear number: 2004 expirationDate: expiring) previous: self thirteenMonths ]
		raise: InvalidGregorianYearNumberException.
	self should: [ (GregorianYear number: 2004 expirationDate: expiring) previous: self sixMonths ]
		raise: InvalidGregorianYearNumberException
	
	
	! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50767968!
testLastMonth

	self assert: (GregorianYear number: 2004 expirationDate: expiring) lastMonth = (GregorianMonthOfYear yearNumber: 2004 monthNumber: 12).
	self assert: (GregorianYear number: 2003 expirationDate: expiring) lastMonth = (GregorianMonthOfYear yearNumber: 2003 monthNumber: 12).

	! !
!InvalidGregorianYearNumberException class methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50760901!
signalNumber: aNumber

	(self number: aNumber expirationDate: expiring) signal! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50766446!
testNumberOfDays

	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) numberOfDays = (TimeUnits day with: 31).
	self assert: (GregorianMonthOfYear februaryOf: (GregorianYear number: 2004 expirationDate: expiring)) numberOfDays = (TimeUnits day with: 29).
	self assert: (GregorianMonthOfYear februaryOf: (GregorianYear number: 2003 expirationDate: expiring)) numberOfDays = (TimeUnits day with: 28).
	self assert: (GregorianMonthOfYear marchOf: (GregorianYear number: 2004 expirationDate: expiring)) numberOfDays = (TimeUnits day with: 31).
	self assert: (GregorianMonthOfYear aprilOf: (GregorianYear number: 2004 expirationDate: expiring)) numberOfDays = (TimeUnits day with: 30).
	self assert: (GregorianMonthOfYear mayOf: (GregorianYear number: 2004 expirationDate: expiring)) numberOfDays = (TimeUnits day with: 31).
	self assert: (GregorianMonthOfYear juneOf: (GregorianYear number: 2004 expirationDate: expiring)) numberOfDays = (TimeUnits day with: 30).
	self assert: (GregorianMonthOfYear julyOf: (GregorianYear number: 2004 expirationDate: expiring)) numberOfDays = (TimeUnits day with: 31).
	self assert: (GregorianMonthOfYear augustOf: (GregorianYear number: 2004 expirationDate: expiring)) numberOfDays = (TimeUnits day with: 31).
	self assert: (GregorianMonthOfYear septemberOf: (GregorianYear number: 2004 expirationDate: expiring)) numberOfDays = (TimeUnits day with: 30).
	self assert: (GregorianMonthOfYear octoberOf: (GregorianYear number: 2004 expirationDate: expiring)) numberOfDays = (TimeUnits day with: 31).
	self assert: (GregorianMonthOfYear novemberOf: (GregorianYear number: 2004 expirationDate: expiring)) numberOfDays = (TimeUnits day with: 30).
	self assert: (GregorianMonthOfYear decemberOf: (GregorianYear number: 2004 expirationDate: expiring)) numberOfDays = (TimeUnits day with: 31)! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50768133!
testIncludesDateTime

	self assert: ((GregorianYear number: 2005 expirationDate: expiring) includes: (FixedGregorianDate yearNumber: 2005 monthNumber: 1 dayNumber: 1) atMidnight).
	self assert: ((GregorianYear number: 2005 expirationDate: expiring) includes: (FixedGregorianDate yearNumber: 2005 monthNumber: 12 dayNumber: 31) atLastTimeOfDay).	
	
	self assert: ((GregorianYear number: 2004 expirationDate: expiring) includes: (FixedGregorianDate yearNumber: 2004 monthNumber: 1 dayNumber: 1) atMidnight).	
	self assert: ((GregorianYear number: 2004 expirationDate: expiring) includes: (FixedGregorianDate yearNumber: 2004 monthNumber: 12 dayNumber: 31) atLastTimeOfDay).
	
	self deny: ((GregorianYear number: 2004 expirationDate: expiring) includes: (FixedGregorianDate yearNumber: 2005 monthNumber: 1 dayNumber: 1) atMidnight).
	self deny: ((GregorianYear number: 2004 expirationDate: expiring) includes: (FixedGregorianDate yearNumber: 2003 monthNumber: 12 dayNumber: 31) atLastTimeOfDay).
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50944915!
test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: 1.2 expirationDate: expiring) ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberTypeErrorDescription.
	
	
	
	
	! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50766248!
testFirstDay

	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) firstDay = GregorianDay thursday! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50768073!
testToNegativeBy

	| interval number |
	
	interval := (GregorianYear number: 2011 expirationDate: expiring) to: (GregorianYear number: 2004 expirationDate: expiring) by: self twoYears negated.
	number := 2011.
	interval do: [ :aGregorianYear |
		self assert: aGregorianYear number=number.
		number := number - 2. ].
	
	self assert: number=2003.
	! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50768395!
testPrintString

	self assert: (GregorianYear number: 2004 expirationDate: expiring) printString = 'Year 2004'
! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50768192!
testInvalidNextANumberOfYears

	| anyUnit |
	
	anyUnit := BaseUnit named: 'Any Unit'.
	
	self should: [ (GregorianYear number: 2004 expirationDate: expiring) next: 1] raise: CanNotConvertMeasureException.
	self should: [ (GregorianYear number: 2004 expirationDate: expiring) next: (anyUnit with: 1) ] raise: CanNotConvertMeasureException.
	! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50766894!
testPrevious

	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) previous) =  (GregorianMonthOfYear decemberOf: (GregorianYear number: 2003 expirationDate: expiring)).
	self assert: ((GregorianMonthOfYear decemberOf: (GregorianYear number: 2004 expirationDate: expiring)) previous) =  (GregorianMonthOfYear novemberOf: (GregorianYear number: 2004 expirationDate: expiring))! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50766737!
testMonthsFrom

	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) distanceFrom: 
		(GregorianMonthOfYear decemberOf: (GregorianYear number: 2003 expirationDate: expiring))) = self oneMonth.
						
	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) distanceFrom:  
		(GregorianMonthOfYear decemberOf: (GregorianYear number: 2004 expirationDate: expiring))) = self elevenMonths negated.

	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) distanceFrom:  
		(GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring))) = self ceroMonths.

	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2005 expirationDate: expiring)) distanceFrom:  
		(GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring))) = self twelveMonths! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50766226!
testDates

	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) dates first = (FixedGregorianDate yearNumber: 2004 monthNumber: 1 dayNumber: 1).
	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) dates last = (FixedGregorianDate yearNumber: 2004 monthNumber: 1 dayNumber: 31)! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50766212!
testCardinalDay
	"To obtain a certain day of the month, for example the second Wednesday."

	| monthOfYear |
	monthOfYear := GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring).
	self assert: (monthOfYear cardinal: 2 day: GregorianDay wednesday) =
		(FixedGregorianDate yearNumber: 2004 monthNumber: 01 dayNumber: 14)! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50768309!
testYearsFrom

	self assert: ((GregorianYear number: 2004 expirationDate: expiring) distanceFrom: (GregorianYear number: 2003 expirationDate: expiring)) = self oneYear.
	self assert: ((GregorianYear number: 2004 expirationDate: expiring) distanceFrom: (GregorianYear number: 2005 expirationDate: expiring)) = self oneYear negated.
	self assert: ((GregorianYear number: 2005 expirationDate: expiring) distanceFrom: (GregorianYear number: 2005 expirationDate: expiring)) = self zeroYears.
	
	self assert: ((GregorianYear number: -1 expirationDate: expiring) distanceFrom: (GregorianYear number: 1 expirationDate: expiring)) = self oneYear negated.
	self assert: ((GregorianYear number: 1 expirationDate: expiring) distanceFrom: (GregorianYear number: -1 expirationDate: expiring)) = self oneYear.
	! !
!FixedGregorianDateTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50763902!
testYear

	self assert: (FixedGregorianDate yearNumber: 2004 monthNumber: 10 dayNumber: 1) year = (GregorianYear number: 2004 expirationDate: expiring).
! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50766763!
testMonthsTo

	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) distanceTo:  
		(GregorianMonthOfYear decemberOf: (GregorianYear number: 2003 expirationDate: expiring))) = self oneMonth negated.
						
	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) distanceTo:  
		(GregorianMonthOfYear decemberOf: (GregorianYear number: 2004 expirationDate: expiring))) = self elevenMonths.

	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) distanceTo:  
		(GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring))) = self ceroMonths.

	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) distanceTo:  
		(GregorianMonthOfYear januaryOf: (GregorianYear number: 2005 expirationDate: expiring))) = self twelveMonths! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50767989!
testNumber

	self assert: (GregorianYear number: 2004 expirationDate: expiring) number=2004.
	self assert: (GregorianYear number: 2003 expirationDate: expiring) number=2003.

	! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50768106!
testIncludesDate

	self assert: ((GregorianYear number: 2005 expirationDate: expiring) includes: (FixedGregorianDate yearNumber: 2005 monthNumber: 1 dayNumber: 1)).
	self assert: ((GregorianYear number: 2005 expirationDate: expiring) includes: (FixedGregorianDate yearNumber: 2005 monthNumber: 12 dayNumber: 31)).	
	
	self assert: ((GregorianYear number: 2004 expirationDate: expiring) includes: (FixedGregorianDate yearNumber: 2004 monthNumber: 1 dayNumber: 1)).	
	self assert: ((GregorianYear number: 2004 expirationDate: expiring) includes: (FixedGregorianDate yearNumber: 2004 monthNumber: 12 dayNumber: 31)).
	
	self deny: ((GregorianYear number: 2004 expirationDate: expiring) includes: (FixedGregorianDate yearNumber: 2005 monthNumber: 1 dayNumber: 1)).
	self deny: ((GregorianYear number: 2004 expirationDate: expiring) includes: (FixedGregorianDate yearNumber: 2003 monthNumber: 12 dayNumber: 31)).
	! !
!FixedGregorianDate class methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50757962!
newWithDaysFromBaseDate: aNumberOfDays

	| days yearNumber approxYears dayCount year |
	
	dayCount := (aNumberOfDays convertTo: TimeUnits day) amount.
	days := dayCount.
	yearNumber := 1901.
	
	[approxYears := days quo: 365.
	approxYears = 0] whileFalse: [ | daysToSubtract |
		yearNumber := yearNumber + approxYears.
		daysToSubtract := yearNumber > 1900 
			ifTrue: [ (yearNumber - 1901) * 365 + ((yearNumber - 1901) quo: 4) - ((yearNumber - 1901) quo: 100) + ((yearNumber - 1601) quo: 400)]
			ifFalse: [(yearNumber - 1901) * 365 + ((yearNumber - 1900) quo: 4) - ((yearNumber - 1900) quo: 100) + ((yearNumber - 2000) quo: 400)].
		days := dayCount - daysToSubtract ].
	
	days < 0 
		ifTrue: [
			year := GregorianYear number: (yearNumber - 1) expirationDate: expiring.
			days := days + 365 + (year isLeap ifTrue: [ 1 ] ifFalse: [ 0 ]) ]
		ifFalse: [ 
			year := GregorianYear number: yearNumber expirationDate: expiring ].
	
	^self year: year numberOfDaysFromJanuaryFirst: (SimpleMeasure amount: days unit: TimeUnits day)! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50766730!
testIncludesYear

	self 
		should: [ (GregorianMonthOfYear yearNumber: 2005 monthNumber: 1) includes: (GregorianYear number: 2005 expirationDate: expiring) ]
		raise: Exception! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50768186!
testIncludesYear

	self 
		should: [ (GregorianYear number: 2005 expirationDate: expiring) includes: (GregorianYear number: 2005 expirationDate: expiring) ]
		raise: Exception! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50768098!
testLessThan

	self assert: (GregorianYear number: 2004 expirationDate: expiring) < (GregorianYear number: 2005 expirationDate: expiring).
	self deny: (GregorianYear number: 2004 expirationDate: expiring) < (GregorianYear number: 2004 expirationDate: expiring).
	
	! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50767023!
testTo

	| interval |
	
	interval := (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) 
		to: (GregorianMonthOfYear februaryOf: (GregorianYear number: 2004 expirationDate: expiring)).
		
	self assert: interval from = (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)).
	self assert: interval to = (GregorianMonthOfYear februaryOf: (GregorianYear number: 2004 expirationDate: expiring)).
	self assert: interval by = self oneMonth
	! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:36' prior: 50768052!
testToByDo

	| number |
	
	number := 2004.
	(((GregorianYear number: 2004 expirationDate: expiring) to: (GregorianYear number: 2010 expirationDate: expiring) by: self twoYears )) do: [ :aGregorianYear |
		self assert: aGregorianYear number=number.
		number := number + 2. ].
	
	self assert: number=2012.
	! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:37' prior: 50767067!
testToByYearsDo

	| yearNumber |
	
	yearNumber := 2004.
	
	((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) 
		to: (GregorianMonthOfYear decemberOf: (GregorianYear number: 2010 expirationDate: expiring))
		by: self oneYear)
		do: [ :aGregorianMonth | 
			self assert: aGregorianMonth monthNumber = 1.
			self assert: aGregorianMonth year number = yearNumber.
			yearNumber := yearNumber + 1. ].
		
	self assert: yearNumber = 2011! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:37' prior: 50766851!
testNextMonthDefinedAs

	| month |
	
	month := GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring).
	self assert: (month nextMonth: GregorianMonth january) =  (GregorianMonthOfYear januaryOf: (GregorianYear number: 2005 expirationDate: expiring)).
	self assert: (month nextMonth: GregorianMonth january in: self twoYears ) =  (GregorianMonthOfYear januaryOf: (GregorianYear number: 2006 expirationDate: expiring)).

	self assert: (month nextMonth: GregorianMonth february) =  (GregorianMonthOfYear februaryOf: (GregorianYear number: 2004 expirationDate: expiring)).
	self assert: (month nextMonth: GregorianMonth february in: self twoYears) =  (GregorianMonthOfYear februaryOf: (GregorianYear number: 2005 expirationDate: expiring)).
	
	month := GregorianMonthOfYear julyOf: (GregorianYear number: 2004 expirationDate: expiring).
	self assert: (month nextMonth: GregorianMonth january) =  (GregorianMonthOfYear januaryOf: (GregorianYear number: 2005 expirationDate: expiring)).
	self assert: (month nextMonth: GregorianMonth january in: self twoYears ) =  (GregorianMonthOfYear januaryOf: (GregorianYear number: 2006 expirationDate: expiring)).

	month := GregorianMonthOfYear januaryOf: (GregorianYear number: -1 expirationDate: expiring).
	self assert: (month nextMonth: GregorianMonth january) =  (GregorianMonthOfYear januaryOf: (GregorianYear number: 1 expirationDate: expiring)).
	self assert: (month nextMonth: GregorianMonth december) =  (GregorianMonthOfYear decemberOf: (GregorianYear number: -1 expirationDate: expiring))! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:37' prior: 50766624!
testEqual

	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) = (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)).
	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expirationDate: expiring)) = (GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expirationDate: expiring)).

	self deny: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) = (GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expirationDate: expiring)).
	self deny: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expirationDate: expiring)) = (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring))! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:37' prior: 50768256!
testNextLeapYear

	self assert: (GregorianYear number: 2003 expirationDate: expiring) nextLeapYear= (GregorianYear number: 2004 expirationDate: expiring).
	self assert: (GregorianYear number: 2004 expirationDate: expiring) nextLeapYear= (GregorianYear number: 2008 expirationDate: expiring).
	self assert: (GregorianYear number: 1899 expirationDate: expiring) nextLeapYear= (GregorianYear number: 1904 expirationDate: expiring).

	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:37' prior: 50944887!
test01CheckoutWithEmptyCartShouldRaiseAnError

	| emptyCart creditCard |
	
	emptyCart := Cart acceptingItemsOf: Dictionary new.
	
	creditCard := CreditCard number: 1111222233334444 expirationDate: expiring.
	
	self 
		should: [ Cashier new checkout: emptyCart with: creditCard ]
		raise:  Error
		withMessageText: Cashier checkoutWithEmptyCartErrorMessage.
	
	! !
!Unit methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:37' prior: 50751149!
adaptToNumber: aNumber andSend: aSelector 
	^ (NumberToArithmeticObjectAdapter number: aNumber expirationDate: expiring) 
		perform: aSelector
		with: self! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:37' prior: 50768328!
testYearsTo

	self assert: ((GregorianYear number: 2004 expirationDate: expiring) distanceTo: (GregorianYear number: 2005 expirationDate: expiring)) = self oneYear.
	self assert: ((GregorianYear number: 2005 expirationDate: expiring) distanceTo: (GregorianYear number: 2004 expirationDate: expiring)) = self oneYear negated.
	self assert: ((GregorianYear number: 2005 expirationDate: expiring) distanceTo: (GregorianYear number: 2005 expirationDate: expiring)) = self zeroYears.
	
	self assert: ((GregorianYear number: -1 expirationDate: expiring) distanceTo: (GregorianYear number: 1 expirationDate: expiring)) = self oneYear.
	self assert: ((GregorianYear number: 1 expirationDate: expiring) distanceTo: (GregorianYear number: -1 expirationDate: expiring)) = self oneYear negated.
	self assert: ((GregorianYear number: 1 expirationDate: expiring) distanceTo: (GregorianYear number: -10 expirationDate: expiring))  = self tenYears negated.
	! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:37' prior: 50768227!
testNext

	self assert: (GregorianYear number: 2004 expirationDate: expiring) next=(GregorianYear number: 2005 expirationDate: expiring).
	self assert: (GregorianYear number: -1 expirationDate: expiring) next=(GregorianYear number: 1 expirationDate: expiring).
	

	! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:37' prior: 50766254!
testHash

	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) hash = (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expirationDate: expiring)) hash.
	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expirationDate: expiring)) hash = (GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expirationDate: expiring)) hash! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:37' prior: 50767978!
testMonths

	self assert: (GregorianYear number: 2004 expirationDate: expiring) months size=12.
	self assert: (GregorianYear number: 2004 expirationDate: expiring) months first=(GregorianMonthOfYear yearNumber: 2004 monthNumber: 1).
	self assert: (GregorianYear number: 2004 expirationDate: expiring) months last=(GregorianMonthOfYear yearNumber: 2004 monthNumber: 12).
	
! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:37' prior: 50767910!
testFirstDate

	self assert: (GregorianYear number: 2004 expirationDate: expiring) firstDate = (FixedGregorianDate yearNumber: 2004 monthNumber: 1 dayNumber: 1).
	self assert: (GregorianYear number: 2003 expirationDate: expiring) firstDate = (FixedGregorianDate yearNumber: 2003 monthNumber: 1 dayNumber: 1).

	! !
!FixedGregorianDateTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:37' prior: 50763584!
testToEveryDayNumber
						
	| expectedMonths interval |
	
	interval := (FixedGregorianDate yearNumber: 2004 monthNumber: 1 dayNumber: 1)
		to: (FixedGregorianDate yearNumber: 2004 monthNumber: 12 dayNumber: 31)
		everyDayNumber: 31.
			
	self assert: interval first=(FixedGregorianDate yearNumber: 2004 monthNumber: 1 dayNumber: 31).
	self assert: interval last=(FixedGregorianDate yearNumber: 2004 monthNumber: 12 dayNumber: 31).
	self assert: interval size=7.
	expectedMonths := GregorianMonth months select: [ :aMonth | (aMonth lastDayNumberIn: (GregorianYear number: 2004 expirationDate: expiring))=31 ].
	interval inject: 1 into: [ :index :aDate |
		self assert: aDate month=(expectedMonths at: index).
		self assert: aDate dayNumber=31.
		index + 1 ].
! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:37' prior: 50767014!
testPrintString

	| year |
	
	year := GregorianYear number: 2004 expirationDate: expiring.
	self assert: (GregorianMonthOfYear januaryOf: year ) printString = (GregorianMonth january printString, ' of ', year printString)! !

!methodRemoval: NumberToArithmeticObjectAdapter class #number: stamp: 'MS 6/13/2021 20:15:37'!
number: aNumber
	^ self new initializeNumber: aNumber!

!methodRemoval: InvalidGregorianYearNumberException class #number: stamp: 'MS 6/13/2021 20:15:37'!
number: aNumber

	^self new initializeNumber: aNumber!

!methodRemoval: CreditCard class #number: stamp: 'MS 6/13/2021 20:15:37'!
number: aCreditCardNumber 

	self assertCreditCardNumberIsValid: aCreditCardNumber .

	^self new initializeNumber: aCreditCardNumber.!

!methodRemoval: GregorianYear class #number: stamp: 'MS 6/13/2021 20:15:37'!
number: aNumber

	^(self isValidYearNumber: aNumber)
		ifTrue: [ self createYear: aNumber ]
		ifFalse: [ InvalidGregorianYearNumberException signalNumber: aNumber ]!

!methodRemoval: InvalidGregorianMonthNumberException class #number: stamp: 'MS 6/13/2021 20:15:37'!
number: aNumber

	^self new initializeNumber: aNumber!
!NumberToArithmeticObjectAdapter class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 20:15:52'!
number: aNumber expiring: expiring 
	^ self new initializeNumber: aNumber! !
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 20:15:52'!
number: aCreditCardNumber expiring: expiring  

	self assertCreditCardNumberIsValid: aCreditCardNumber .

	^self new initializeNumber: aCreditCardNumber.! !
!InvalidGregorianYearNumberException class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 20:15:52'!
number: aNumber expiring: expiring 

	^self new initializeNumber: aNumber! !
!GregorianYear class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 20:15:52'!
number: aNumber expiring: expiring 

	^(self isValidYearNumber: aNumber)
		ifTrue: [ self createYear: aNumber ]
		ifFalse: [ InvalidGregorianYearNumberException signalNumber: aNumber ]! !
!InvalidGregorianMonthNumberException class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 20:15:52'!
number: aNumber expiring: expiring 

	^self new initializeNumber: aNumber! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50946381!
testHash

	self assert: (GregorianYear number: 2004 expiring: expiring) hash = (GregorianYear number: 2004 expiring: expiring) hash.
! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50945990!
testLastDate

	self assert: (GregorianYear number: 2004 expiring: expiring) lastDate = (FixedGregorianDate yearNumber: 2004 monthNumber: 12 dayNumber: 31).
	self assert: (GregorianYear number: 2003 expiring: expiring) lastDate = (FixedGregorianDate yearNumber: 2003 monthNumber: 12 dayNumber: 31).

	! !
!CardinalDayMonthRuleTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50945386!
testDifferentMonth

	| rule months |
	
	rule := CardinalDayMonthRule cardinal: 3 day: GregorianDay monday month: GregorianMonth august.
	months := (GregorianYear number: 2003 expiring: expiring) months reject: [ :aMonthOfYear | aMonthOfYear month = GregorianMonth august ].
	
	months do: [ :aMonthOfYear | self deny: (rule includes: (aMonthOfYear cardinal: 3 day: GregorianDay monday)) ].
! !
!GregorianTimespanTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50946349!
testTo

	self assert: (GregorianTimespan from: januaryFirstOf2004 duration: GregorianDay oneDay) to
		= (FixedGregorianDate yearNumber: 2004 monthNumber: 01 dayNumber: 02).
	self assert: (GregorianTimespan from: (GregorianDayOfMonth monthNumber: 01 dayNumber: 01) duration: GregorianDay oneDay) to
		= (GregorianDayOfMonth monthNumber: 01 dayNumber: 02).
	self assert: (GregorianTimespan from: (TimeOfDay hours: 1) duration: (TimeUnits hour with: 10)) to = (TimeOfDay hours: 11).
	self assert: (GregorianTimespan from: GregorianMonth january duration: (TimeUnits month with: 10)) to = GregorianMonth november.
	self assert: (GregorianTimespan from: GregorianDay sunday duration: GregorianDay twoDays) to = GregorianDay tuesday.
	self assert: (GregorianTimespan from: (GregorianYear number: 2004 expiring: expiring) duration: (TimeUnits year with: 10)) to = (GregorianYear number: 2014 expiring: expiring)! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50945417!
testNext

	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) next) = (GregorianMonthOfYear februaryOf: (GregorianYear number: 2004 expiring: expiring)).
	self assert: ((GregorianMonthOfYear decemberOf: (GregorianYear number: 2004 expiring: expiring)) next) = (GregorianMonthOfYear januaryOf: (GregorianYear number: 2005 expiring: expiring))
	! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50946668!
testCardinalDay
	"To obtain a certain day of the month, for example the second Wednesday."

	| monthOfYear |
	monthOfYear := GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring).
	self assert: (monthOfYear cardinal: 2 day: GregorianDay wednesday) =
		(FixedGregorianDate yearNumber: 2004 monthNumber: 01 dayNumber: 14)! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50945305!
test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: -1111222233334444 expiring: expiring) ]
		raise:  Error
		withMessageText: CreditCard creditCardNumberMustBePositiveErrorDescription.
	
	
	
	
	! !
!InvalidGregorianMonthNumberException class methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50945444!
signalNumber: aNumber

	(self number: aNumber expiring: expiring) signal! !
!InvalidGregorianYearNumberException class methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50946435!
signalNumber: aNumber

	(self number: aNumber expiring: expiring) signal! !
!GregorianMonthOfYear class methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50946165!
yearNumber: aYearNumber monthNumber: aMonthNumber

	^self year: (GregorianYear number: aYearNumber expiring: expiring) monthNumber: aMonthNumber! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50946967!
testEqual

	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) = (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)).
	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expiring: expiring)) = (GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expiring: expiring)).

	self deny: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) = (GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expiring: expiring)).
	self deny: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expiring: expiring)) = (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring))! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50945069!
testGreaterThan

	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) > (GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expiring: expiring)).
						
	self assert: (GregorianMonthOfYear februaryOf: (GregorianYear number: 2003 expiring: expiring)) >(GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expiring: expiring)).
	
	self deny: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expiring: expiring)) > (GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expiring: expiring))! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50945492!
testCreation

	self assert: (GregorianMonthOfYear yearNumber: 2004 monthNumber:1) year = (GregorianYear number: 2004 expiring: expiring).
	self assert: (GregorianMonthOfYear yearNumber: 2004 monthNumber:1) monthNumber = 1.

	self assert: (GregorianMonthOfYear yearNumber: 2004 month: GregorianMonth january) year = (GregorianYear number: 2004 expiring: expiring).
	self assert: (GregorianMonthOfYear yearNumber: 2004 month: GregorianMonth january) monthNumber = 1.

	self assert: (GregorianMonthOfYear year: (GregorianYear number: 2004 expiring: expiring) monthNumber:1) year = (GregorianYear number: 2004 expiring: expiring).
	self assert: (GregorianMonthOfYear year: (GregorianYear number: 2004 expiring: expiring) monthNumber:1) monthNumber = 1.

	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) year = (GregorianYear number: 2004 expiring: expiring).
	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) monthNumber = 1.
	
	self assert: (GregorianMonthOfYear februaryOf: (GregorianYear number: 2004 expiring: expiring)) year = (GregorianYear number: 2004 expiring: expiring).
	self assert: (GregorianMonthOfYear februaryOf: (GregorianYear number: 2004 expiring: expiring)) monthNumber = 2.
	
	self assert: (GregorianMonthOfYear marchOf: (GregorianYear number: 2004 expiring: expiring)) year = (GregorianYear number: 2004 expiring: expiring).
	self assert: (GregorianMonthOfYear marchOf: (GregorianYear number: 2004 expiring: expiring)) monthNumber = 3.
	
	self assert: (GregorianMonthOfYear aprilOf: (GregorianYear number: 2004 expiring: expiring)) year = (GregorianYear number: 2004 expiring: expiring).
	self assert: (GregorianMonthOfYear aprilOf: (GregorianYear number: 2004 expiring: expiring)) monthNumber = 4.
	
	self assert: (GregorianMonthOfYear mayOf: (GregorianYear number: 2004 expiring: expiring)) year = (GregorianYear number: 2004 expiring: expiring).
	self assert: (GregorianMonthOfYear mayOf: (GregorianYear number: 2004 expiring: expiring)) monthNumber = 5.
	
	self assert: (GregorianMonthOfYear juneOf: (GregorianYear number: 2004 expiring: expiring)) year = (GregorianYear number: 2004 expiring: expiring).
	self assert: (GregorianMonthOfYear juneOf: (GregorianYear number: 2004 expiring: expiring)) monthNumber = 6.
	
	self assert: (GregorianMonthOfYear julyOf: (GregorianYear number: 2004 expiring: expiring)) year = (GregorianYear number: 2004 expiring: expiring).
	self assert: (GregorianMonthOfYear julyOf: (GregorianYear number: 2004 expiring: expiring)) monthNumber = 7.
	
	self assert: (GregorianMonthOfYear augustOf: (GregorianYear number: 2004 expiring: expiring)) year = (GregorianYear number: 2004 expiring: expiring).
	self assert: (GregorianMonthOfYear augustOf: (GregorianYear number: 2004 expiring: expiring)) monthNumber = 8.
	
	self assert: (GregorianMonthOfYear septemberOf: (GregorianYear number: 2004 expiring: expiring)) year = (GregorianYear number: 2004 expiring: expiring).
	self assert: (GregorianMonthOfYear septemberOf: (GregorianYear number: 2004 expiring: expiring)) monthNumber = 9.
	
	self assert: (GregorianMonthOfYear octoberOf: (GregorianYear number: 2004 expiring: expiring)) year = (GregorianYear number: 2004 expiring: expiring).
	self assert: (GregorianMonthOfYear octoberOf: (GregorianYear number: 2004 expiring: expiring)) monthNumber = 10.
	
	self assert: (GregorianMonthOfYear novemberOf: (GregorianYear number: 2004 expiring: expiring)) year = (GregorianYear number: 2004 expiring: expiring).
	self assert: (GregorianMonthOfYear novemberOf: (GregorianYear number: 2004 expiring: expiring)) monthNumber = 11.
	
	self assert: (GregorianMonthOfYear decemberOf: (GregorianYear number: 2004 expiring: expiring)) year = (GregorianYear number: 2004 expiring: expiring).
	self assert: (GregorianMonthOfYear decemberOf: (GregorianYear number: 2004 expiring: expiring)) monthNumber = 12! !
!GregorianYear methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50945648!
nextNumberOfYears: numberOfYears

	| newNumber |
	newNumber := self newNumberFrom: numberOfYears.
	^self class number: newNumber expiring: expiring! !
!FixedGregorianDate class methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50946795!
newWithDaysFromBaseDate: aNumberOfDays

	| days yearNumber approxYears dayCount year |
	
	dayCount := (aNumberOfDays convertTo: TimeUnits day) amount.
	days := dayCount.
	yearNumber := 1901.
	
	[approxYears := days quo: 365.
	approxYears = 0] whileFalse: [ | daysToSubtract |
		yearNumber := yearNumber + approxYears.
		daysToSubtract := yearNumber > 1900 
			ifTrue: [ (yearNumber - 1901) * 365 + ((yearNumber - 1901) quo: 4) - ((yearNumber - 1901) quo: 100) + ((yearNumber - 1601) quo: 400)]
			ifFalse: [(yearNumber - 1901) * 365 + ((yearNumber - 1900) quo: 4) - ((yearNumber - 1900) quo: 100) + ((yearNumber - 2000) quo: 400)].
		days := dayCount - daysToSubtract ].
	
	days < 0 
		ifTrue: [
			year := GregorianYear number: (yearNumber - 1) expiring: expiring.
			days := days + 365 + (year isLeap ifTrue: [ 1 ] ifFalse: [ 0 ]) ]
		ifFalse: [ 
			year := GregorianYear number: yearNumber expiring: expiring ].
	
	^self year: year numberOfDaysFromJanuaryFirst: (SimpleMeasure amount: days unit: TimeUnits day)! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50946586!
testInvalidNextANumberOfYears

	| anyUnit |
	
	anyUnit := BaseUnit named: 'Any Unit'.
	
	self should: [ (GregorianYear number: 2004 expiring: expiring) next: 1] raise: CanNotConvertMeasureException.
	self should: [ (GregorianYear number: 2004 expiring: expiring) next: (anyUnit with: 1) ] raise: CanNotConvertMeasureException.
	! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50946310!
testFirstMonth

	self assert: (GregorianYear number: 2004 expiring: expiring) firstMonth = (GregorianMonthOfYear yearNumber: 2004 monthNumber: 1).
	self assert: (GregorianYear number: 2003 expiring: expiring) firstMonth = (GregorianMonthOfYear yearNumber: 2003 monthNumber: 1)

	! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50945346!
testNumberOfDays

	self assert: (GregorianYear number: 2004 expiring: expiring) numberOfDays=(TimeUnits day with: 366).
	self assert: (GregorianYear number: 2003 expiring: expiring) numberOfDays=(TimeUnits day with: 365).

	! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50946503!
testIncludesDateTime

	self assert: ((GregorianYear number: 2005 expiring: expiring) includes: (FixedGregorianDate yearNumber: 2005 monthNumber: 1 dayNumber: 1) atMidnight).
	self assert: ((GregorianYear number: 2005 expiring: expiring) includes: (FixedGregorianDate yearNumber: 2005 monthNumber: 12 dayNumber: 31) atLastTimeOfDay).	
	
	self assert: ((GregorianYear number: 2004 expiring: expiring) includes: (FixedGregorianDate yearNumber: 2004 monthNumber: 1 dayNumber: 1) atMidnight).	
	self assert: ((GregorianYear number: 2004 expiring: expiring) includes: (FixedGregorianDate yearNumber: 2004 monthNumber: 12 dayNumber: 31) atLastTimeOfDay).
	
	self deny: ((GregorianYear number: 2004 expiring: expiring) includes: (FixedGregorianDate yearNumber: 2005 monthNumber: 1 dayNumber: 1) atMidnight).
	self deny: ((GregorianYear number: 2004 expiring: expiring) includes: (FixedGregorianDate yearNumber: 2003 monthNumber: 12 dayNumber: 31) atLastTimeOfDay).
	! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50947155!
testPrintString

	| year |
	
	year := GregorianYear number: 2004 expiring: expiring.
	self assert: (GregorianMonthOfYear januaryOf: year ) printString = (GregorianMonth january printString, ' of ', year printString)! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50946538!
test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: 1.2 expiring: expiring) ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberTypeErrorDescription.
	
	
	
	
	! !
!GregorianMonthTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50945434!
testOfYear

	self assert: (GregorianMonth february ofYear: (GregorianYear number: 2003 expiring: expiring)) = (GregorianMonthOfYear yearNumber: 2003 monthNumber: 2 )! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50945978!
testGreaterThan

	self assert: (GregorianYear number: 2004 expiring: expiring) > (GregorianYear number: 2003 expiring: expiring).
	self deny: (GregorianYear number: 2004 expiring: expiring) > (GregorianYear number: 2004 expiring: expiring).
	
	! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50946389!
testPreviousANumberOfYears

	self assert: ((GregorianYear number: 2004 expiring: expiring) previous: self zeroYears) =(GregorianYear number: 2004 expiring: expiring).
	self assert: ((GregorianYear number: 2004 expiring: expiring) previous: self oneYear) =(GregorianYear number: 2003 expiring: expiring).
	self assert: ((GregorianYear number: 2004 expiring: expiring) previous: self tenYears) =(GregorianYear number: 1994 expiring: expiring).
	self assert: ((GregorianYear number: 1 expiring: expiring) previous: self oneYear) =(GregorianYear number: -1 expiring: expiring).
	self should:  [ (GregorianYear number: 2004 expiring: expiring) previous: self thirteenMonths ]
		raise: InvalidGregorianYearNumberException.
	self should: [ (GregorianYear number: 2004 expiring: expiring) previous: self sixMonths ]
		raise: InvalidGregorianYearNumberException
	
	
	! !
!Unit methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50947027!
adaptToNumber: aNumber andSend: aSelector 
	^ (NumberToArithmeticObjectAdapter number: aNumber expiring: expiring) 
		perform: aSelector
		with: self! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50945357!
testToBy

	self assert: ((GregorianYear number: 2004 expiring: expiring) to: (GregorianYear number: 2010 expiring: expiring) by: self twoYears ) from=(GregorianYear number: 2004 expiring: expiring).
	self assert: ((GregorianYear number: 2004 expiring: expiring) to: (GregorianYear number: 2010 expiring: expiring) by: self twoYears ) to=(GregorianYear number: 2010 expiring: expiring).
	self assert: ((GregorianYear number: 2004 expiring: expiring) to: (GregorianYear number: 2010 expiring: expiring) by: self twoYears ) by=self twoYears.
	

	! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50946441!
testNumberOfDays

	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) numberOfDays = (TimeUnits day with: 31).
	self assert: (GregorianMonthOfYear februaryOf: (GregorianYear number: 2004 expiring: expiring)) numberOfDays = (TimeUnits day with: 29).
	self assert: (GregorianMonthOfYear februaryOf: (GregorianYear number: 2003 expiring: expiring)) numberOfDays = (TimeUnits day with: 28).
	self assert: (GregorianMonthOfYear marchOf: (GregorianYear number: 2004 expiring: expiring)) numberOfDays = (TimeUnits day with: 31).
	self assert: (GregorianMonthOfYear aprilOf: (GregorianYear number: 2004 expiring: expiring)) numberOfDays = (TimeUnits day with: 30).
	self assert: (GregorianMonthOfYear mayOf: (GregorianYear number: 2004 expiring: expiring)) numberOfDays = (TimeUnits day with: 31).
	self assert: (GregorianMonthOfYear juneOf: (GregorianYear number: 2004 expiring: expiring)) numberOfDays = (TimeUnits day with: 30).
	self assert: (GregorianMonthOfYear julyOf: (GregorianYear number: 2004 expiring: expiring)) numberOfDays = (TimeUnits day with: 31).
	self assert: (GregorianMonthOfYear augustOf: (GregorianYear number: 2004 expiring: expiring)) numberOfDays = (TimeUnits day with: 31).
	self assert: (GregorianMonthOfYear septemberOf: (GregorianYear number: 2004 expiring: expiring)) numberOfDays = (TimeUnits day with: 30).
	self assert: (GregorianMonthOfYear octoberOf: (GregorianYear number: 2004 expiring: expiring)) numberOfDays = (TimeUnits day with: 31).
	self assert: (GregorianMonthOfYear novemberOf: (GregorianYear number: 2004 expiring: expiring)) numberOfDays = (TimeUnits day with: 30).
	self assert: (GregorianMonthOfYear decemberOf: (GregorianYear number: 2004 expiring: expiring)) numberOfDays = (TimeUnits day with: 31)! !
!NumberToArithmeticObjectAdapterTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50945229!
testPrintString
	self 
		assert: (NumberToArithmeticObjectAdapter number: 10 expiring: expiring) 
				printString = 'NumberMeasureAdapter for: 10'! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50946861!
testTo

	| interval |
	
	interval := (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) 
		to: (GregorianMonthOfYear februaryOf: (GregorianYear number: 2004 expiring: expiring)).
		
	self assert: interval from = (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)).
	self assert: interval to = (GregorianMonthOfYear februaryOf: (GregorianYear number: 2004 expiring: expiring)).
	self assert: interval by = self oneMonth
	! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50946421!
testLastMonth

	self assert: (GregorianYear number: 2004 expiring: expiring) lastMonth = (GregorianMonthOfYear yearNumber: 2004 monthNumber: 12).
	self assert: (GregorianYear number: 2003 expiring: expiring) lastMonth = (GregorianMonthOfYear yearNumber: 2003 monthNumber: 12).

	! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50946995!
testNextLeapYear

	self assert: (GregorianYear number: 2003 expiring: expiring) nextLeapYear= (GregorianYear number: 2004 expiring: expiring).
	self assert: (GregorianYear number: 2004 expiring: expiring) nextLeapYear= (GregorianYear number: 2008 expiring: expiring).
	self assert: (GregorianYear number: 1899 expiring: expiring) nextLeapYear= (GregorianYear number: 1904 expiring: expiring).

	! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50945238!
testTo

	self assert: ((GregorianYear number: 2004 expiring: expiring) to: (GregorianYear number: 2010 expiring: expiring)) from=(GregorianYear number: 2004 expiring: expiring).
	self assert: ((GregorianYear number: 2004 expiring: expiring) to: (GregorianYear number: 2010 expiring: expiring)) to=(GregorianYear number: 2010 expiring: expiring).
	self assert: ((GregorianYear number: 2004 expiring: expiring) to: (GregorianYear number: 2010 expiring: expiring)) by=self oneYear.
	

	! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50945827!
testLastDayNumber

	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) lastDayNumber =
		(GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) numberOfDays amount.
	self assert: (GregorianMonthOfYear februaryOf: (GregorianYear number: 2004 expiring: expiring)) lastDayNumber =
		(GregorianMonthOfYear februaryOf: (GregorianYear number: 2004 expiring: expiring)) numberOfDays amount.
	self assert: (GregorianMonthOfYear februaryOf: (GregorianYear number: 2003 expiring: expiring)) lastDayNumber =
		(GregorianMonthOfYear februaryOf: (GregorianYear number: 2003 expiring: expiring)) numberOfDays amount.
	self assert: (GregorianMonthOfYear marchOf: (GregorianYear number: 2004 expiring: expiring)) lastDayNumber =
		(GregorianMonthOfYear marchOf: (GregorianYear number: 2004 expiring: expiring)) numberOfDays amount.
	self assert: (GregorianMonthOfYear aprilOf: (GregorianYear number: 2004 expiring: expiring)) lastDayNumber =
		(GregorianMonthOfYear aprilOf: (GregorianYear number: 2004 expiring: expiring)) numberOfDays amount.
	self assert: (GregorianMonthOfYear mayOf: (GregorianYear number: 2004 expiring: expiring)) lastDayNumber =
		(GregorianMonthOfYear mayOf: (GregorianYear number: 2004 expiring: expiring)) numberOfDays amount.
	self assert: (GregorianMonthOfYear juneOf: (GregorianYear number: 2004 expiring: expiring)) lastDayNumber =
		(GregorianMonthOfYear juneOf: (GregorianYear number: 2004 expiring: expiring)) numberOfDays amount.
	self assert: (GregorianMonthOfYear julyOf: (GregorianYear number: 2004 expiring: expiring)) lastDayNumber =
		(GregorianMonthOfYear julyOf: (GregorianYear number: 2004 expiring: expiring)) numberOfDays amount.
	self assert: (GregorianMonthOfYear augustOf: (GregorianYear number: 2004 expiring: expiring)) lastDayNumber =
		(GregorianMonthOfYear augustOf: (GregorianYear number: 2004 expiring: expiring)) numberOfDays amount.
	self assert: (GregorianMonthOfYear septemberOf: (GregorianYear number: 2004 expiring: expiring)) lastDayNumber =
		(GregorianMonthOfYear septemberOf: (GregorianYear number: 2004 expiring: expiring)) numberOfDays amount.
	self assert: (GregorianMonthOfYear octoberOf: (GregorianYear number: 2004 expiring: expiring)) lastDayNumber =
		(GregorianMonthOfYear octoberOf: (GregorianYear number: 2004 expiring: expiring)) numberOfDays amount.
	self assert: (GregorianMonthOfYear novemberOf: (GregorianYear number: 2004 expiring: expiring)) lastDayNumber =
		(GregorianMonthOfYear novemberOf: (GregorianYear number: 2004 expiring: expiring)) numberOfDays amount.
	self assert: (GregorianMonthOfYear decemberOf: (GregorianYear number: 2004 expiring: expiring)) lastDayNumber =
		(GregorianMonthOfYear decemberOf: (GregorianYear number: 2004 expiring: expiring)) numberOfDays amount! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50946763!
testIncludesDate

	self assert: ((GregorianYear number: 2005 expiring: expiring) includes: (FixedGregorianDate yearNumber: 2005 monthNumber: 1 dayNumber: 1)).
	self assert: ((GregorianYear number: 2005 expiring: expiring) includes: (FixedGregorianDate yearNumber: 2005 monthNumber: 12 dayNumber: 31)).	
	
	self assert: ((GregorianYear number: 2004 expiring: expiring) includes: (FixedGregorianDate yearNumber: 2004 monthNumber: 1 dayNumber: 1)).	
	self assert: ((GregorianYear number: 2004 expiring: expiring) includes: (FixedGregorianDate yearNumber: 2004 monthNumber: 12 dayNumber: 31)).
	
	self deny: ((GregorianYear number: 2004 expiring: expiring) includes: (FixedGregorianDate yearNumber: 2005 monthNumber: 1 dayNumber: 1)).
	self deny: ((GregorianYear number: 2004 expiring: expiring) includes: (FixedGregorianDate yearNumber: 2003 monthNumber: 12 dayNumber: 31)).
	! !
!JanuaryGregorianMonthTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50946334!
testNumberOfDaysIn

	| month |
	
	month := JanuaryGregorianMonth new.

	self assert: (month numberOfDaysIn: (GregorianYear number: 2004 expiring: expiring))=(SimpleMeasure amount: 31 unit: TimeUnits day).
	self assert: (month numberOfDaysIn: (GregorianYear number: 2003 expiring: expiring))=(SimpleMeasure amount: 31 unit: TimeUnits day)! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50946003!
test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: 123456 expiring: expiring) ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberLengthErrorDescription.
	
	
	
	
	! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50946831!
testIncludesYear

	self 
		should: [ (GregorianMonthOfYear yearNumber: 2005 monthNumber: 1) includes: (GregorianYear number: 2005 expiring: expiring) ]
		raise: Exception! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50947098!
testMonths

	self assert: (GregorianYear number: 2004 expiring: expiring) months size=12.
	self assert: (GregorianYear number: 2004 expiring: expiring) months first=(GregorianMonthOfYear yearNumber: 2004 monthNumber: 1).
	self assert: (GregorianYear number: 2004 expiring: expiring) months last=(GregorianMonthOfYear yearNumber: 2004 monthNumber: 12).
	
! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50946564!
testToNegativeBy

	| interval number |
	
	interval := (GregorianYear number: 2011 expiring: expiring) to: (GregorianYear number: 2004 expiring: expiring) by: self twoYears negated.
	number := 2011.
	interval do: [ :aGregorianYear |
		self assert: aGregorianYear number=number.
		number := number - 2. ].
	
	self assert: number=2003.
	! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50946054!
testName

	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) name = 'January'.
	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expiring: expiring)) name = 'January'.
	
	self assert: (GregorianMonthOfYear februaryOf: (GregorianYear number: 2004 expiring: expiring)) name = 'February'.
	self assert: (GregorianMonthOfYear februaryOf: (GregorianYear number: 2003 expiring: expiring)) name = 'February'.
	
	self assert: (GregorianMonthOfYear marchOf: (GregorianYear number: 2004 expiring: expiring)) name = 'March'.
	self assert: (GregorianMonthOfYear marchOf: (GregorianYear number: 2003 expiring: expiring)) name = 'March'.
	
	self assert: (GregorianMonthOfYear aprilOf: (GregorianYear number: 2004 expiring: expiring)) name = 'April'.
	self assert: (GregorianMonthOfYear aprilOf: (GregorianYear number: 2003 expiring: expiring)) name = 'April'.
	
	self assert: (GregorianMonthOfYear mayOf: (GregorianYear number: 2004 expiring: expiring)) name = 'May'.
	self assert: (GregorianMonthOfYear mayOf: (GregorianYear number: 2003 expiring: expiring)) name = 'May'.
	
	self assert: (GregorianMonthOfYear juneOf: (GregorianYear number: 2004 expiring: expiring)) name = 'June'.
	self assert: (GregorianMonthOfYear juneOf: (GregorianYear number: 2003 expiring: expiring)) name = 'June'.
	
	self assert: (GregorianMonthOfYear julyOf: (GregorianYear number: 2004 expiring: expiring)) name = 'July'.
	self assert: (GregorianMonthOfYear julyOf: (GregorianYear number: 2003 expiring: expiring)) name = 'July'.
	
	self assert: (GregorianMonthOfYear augustOf: (GregorianYear number: 2004 expiring: expiring)) name = 'August'.
	self assert: (GregorianMonthOfYear augustOf: (GregorianYear number: 2003 expiring: expiring)) name = 'August'.
	
	self assert: (GregorianMonthOfYear septemberOf: (GregorianYear number: 2004 expiring: expiring)) name = 'September'.
	self assert: (GregorianMonthOfYear septemberOf: (GregorianYear number: 2003 expiring: expiring)) name = 'September'.
	
	self assert: (GregorianMonthOfYear octoberOf: (GregorianYear number: 2004 expiring: expiring)) name = 'October'.
	self assert: (GregorianMonthOfYear octoberOf: (GregorianYear number: 2003 expiring: expiring)) name = 'October'.
	
	self assert: (GregorianMonthOfYear novemberOf: (GregorianYear number: 2004 expiring: expiring)) name = 'November'.
	self assert: (GregorianMonthOfYear novemberOf: (GregorianYear number: 2003 expiring: expiring)) name = 'November'.
	
	self assert: (GregorianMonthOfYear decemberOf: (GregorianYear number: 2004 expiring: expiring)) name = 'December'.
	self assert: (GregorianMonthOfYear decemberOf: (GregorianYear number: 2003 expiring: expiring)) name = 'December'! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50945099!
testFirstDate

	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) firstDate = (FixedGregorianDate yearNumber: 2004 monthNumber: 1 dayNumber: 1)! !
!GregorianDayOfMonthTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50946323!
testDateOfYear

	self assert: ((GregorianDayOfMonth monthNumber: 1 dayNumber: 1) ofYear: (GregorianYear number: 2005 expiring: expiring)) =
		(FixedGregorianDate yearNumber: 2005 monthNumber: 1 dayNumber: 1)! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50946173!
testPrevious

	self assert: (GregorianYear number: 2004 expiring: expiring) previous=(GregorianYear number: 2003 expiring: expiring).
	self assert: (GregorianYear number: 1 expiring: expiring) previous=(GregorianYear number: -1 expiring: expiring).
	

	! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50946296!
testFirstDay

	self assert: (GregorianYear number: 2004 expiring: expiring) firstDay = (FixedGregorianDate yearNumber: 2004 monthNumber: 1 dayNumber: 1) day.
	self assert: (GregorianYear number: 2003 expiring: expiring) firstDay = (FixedGregorianDate yearNumber: 2003 monthNumber: 1 dayNumber: 1) day.

	! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50945807!
testToBy

	| interval |
	
	interval := (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) 
		to: (GregorianMonthOfYear marchOf: (GregorianYear number: 2004 expiring: expiring))
		by: self twoMonths.
		
	self assert: interval from = (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)).
	self assert: interval to = (GregorianMonthOfYear marchOf: (GregorianYear number: 2004 expiring: expiring)).
	self assert: interval by = self twoMonths
	! !
!GregorianMonth methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50946265!
, aYearNumber

	^self ofYear: (GregorianYear number: aYearNumber expiring: expiring)! !
!GregorianDayOfMonth methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50945092!
, aYearNumber

	^self ofYear: (GregorianYear number: aYearNumber expiring: expiring)! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50946579!
testPrintString

	self assert: (GregorianYear number: 2004 expiring: expiring) printString = 'Year 2004'
! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50945795!
testNumberOfDaysFromBaseDate

	self assert: (GregorianYear number: 1901 expiring: expiring) numberOfDaysFromBaseDate=(TimeUnits day with: 0).
	self assert: (GregorianYear number: 2004 expiring: expiring) numberOfDaysFromBaseDate=(TimeUnits day with: 37620).

! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50946272!
testToByReverse

	| coll number |
	
	coll := ((GregorianYear number: 2004 expiring: expiring) to: (GregorianYear number: 2011 expiring: expiring) by: self twoYears ) reverse.
	number := 2010.
	coll do: [ :aGregorianYear |
		self assert: aGregorianYear number=number.
		number := number - 2. ].
	
	self assert: number=2002.
	! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50945657!
testPreviousANumberOfMonths

	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) previous: self oneMonth) =
		(GregorianMonthOfYear decemberOf: (GregorianYear number: 2003 expiring: expiring)).
	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) previous: self elevenMonths) =
		(GregorianMonthOfYear februaryOf: (GregorianYear number: 2003 expiring: expiring)).
	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) previous: self twelveMonths) =
		(GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expiring: expiring)).
	self assert: ((GregorianMonthOfYear februaryOf: (GregorianYear number: 2004 expiring: expiring)) previous: self thirteenMonths) =
		(GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expiring: expiring)).
	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) previous: self thirteenMonths) =
		(GregorianMonthOfYear decemberOf: (GregorianYear number: 2002 expiring: expiring)).
	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) previous: self ceroMonths) =
		(GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)).
	
	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) previous: self oneYear) =
		(GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expiring: expiring)).
	self assert: ((GregorianMonthOfYear aprilOf: (GregorianYear number: 2004 expiring: expiring)) previous: self oneYear) =
		(GregorianMonthOfYear aprilOf: (GregorianYear number: 2003 expiring: expiring)).

	self assert: ((GregorianMonthOfYear julyOf: (GregorianYear number: 2004 expiring: expiring)) previous: self oneMonth) =
		(GregorianMonthOfYear juneOf: (GregorianYear number: 2004 expiring: expiring)).
	self assert: ((GregorianMonthOfYear julyOf: (GregorianYear number: 2004 expiring: expiring)) previous: self elevenMonths) =
		(GregorianMonthOfYear augustOf: (GregorianYear number: 2003 expiring: expiring)).
	self assert: ((GregorianMonthOfYear julyOf: (GregorianYear number: 2004 expiring: expiring)) previous: self twelveMonths) =
		(GregorianMonthOfYear julyOf: (GregorianYear number: 2003 expiring: expiring))! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50946556!
testFirstDay

	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) firstDay = GregorianDay thursday! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50945337!
testDistanceTo

	self assert:
		((GregorianYear createYear: 2005) absoluteDistanceTo: (GregorianYear number: 2008 expiring: expiring)) =
			(TimeUnits year with: 3)! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50945473!
testIsLeap

	self assert: (GregorianYear number: 2004 expiring: expiring) isLeap.
	self assert: (GregorianYear number: 2000 expiring: expiring) isLeap.
	self assert: (GregorianYear number: 2400 expiring: expiring) isLeap.
	
	self deny: (GregorianYear number: 2003 expiring: expiring) isLeap.
	self deny: (GregorianYear number: 1900 expiring: expiring) isLeap.
	self deny: (GregorianYear number: 2100 expiring: expiring) isLeap.

	! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50946683!
testYearsFrom

	self assert: ((GregorianYear number: 2004 expiring: expiring) distanceFrom: (GregorianYear number: 2003 expiring: expiring)) = self oneYear.
	self assert: ((GregorianYear number: 2004 expiring: expiring) distanceFrom: (GregorianYear number: 2005 expiring: expiring)) = self oneYear negated.
	self assert: ((GregorianYear number: 2005 expiring: expiring) distanceFrom: (GregorianYear number: 2005 expiring: expiring)) = self zeroYears.
	
	self assert: ((GregorianYear number: -1 expiring: expiring) distanceFrom: (GregorianYear number: 1 expiring: expiring)) = self oneYear negated.
	self assert: ((GregorianYear number: 1 expiring: expiring) distanceFrom: (GregorianYear number: -1 expiring: expiring)) = self oneYear.
	! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50945109!
testInvalidPreviousANumberOfYears

	| anyUnit |
	
	anyUnit := BaseUnit named: 'Any Unit'.
	
	self should: [ (GregorianYear number: 2004 expiring: expiring) previous: 1] raise: CanNotConvertMeasureException.
	self should: [ (GregorianYear number: 2004 expiring: expiring) previous: (anyUnit with: 1) ] raise: CanNotConvertMeasureException.
	

	
	
	
	! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50946754!
testNumber

	self assert: (GregorianYear number: 2004 expiring: expiring) number=2004.
	self assert: (GregorianYear number: 2003 expiring: expiring) number=2003.

	! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50947036!
testYearsTo

	self assert: ((GregorianYear number: 2004 expiring: expiring) distanceTo: (GregorianYear number: 2005 expiring: expiring)) = self oneYear.
	self assert: ((GregorianYear number: 2005 expiring: expiring) distanceTo: (GregorianYear number: 2004 expiring: expiring)) = self oneYear negated.
	self assert: ((GregorianYear number: 2005 expiring: expiring) distanceTo: (GregorianYear number: 2005 expiring: expiring)) = self zeroYears.
	
	self assert: ((GregorianYear number: -1 expiring: expiring) distanceTo: (GregorianYear number: 1 expiring: expiring)) = self oneYear.
	self assert: ((GregorianYear number: 1 expiring: expiring) distanceTo: (GregorianYear number: -1 expiring: expiring)) = self oneYear negated.
	self assert: ((GregorianYear number: 1 expiring: expiring) distanceTo: (GregorianYear number: -10 expiring: expiring))  = self tenYears negated.
	! !
!FixedGregorianDateTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50946712!
testYear

	self assert: (FixedGregorianDate yearNumber: 2004 monthNumber: 10 dayNumber: 1) year = (GregorianYear number: 2004 expiring: expiring).
! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50945627!
testLastDate

	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) lastDate = (FixedGregorianDate yearNumber: 2004 monthNumber: 1 dayNumber: 31).
	self assert: (GregorianMonthOfYear februaryOf: (GregorianYear number: 2004 expiring: expiring)) lastDate = (FixedGregorianDate yearNumber: 2004 monthNumber: 2 dayNumber: 29).
	self assert: (GregorianMonthOfYear februaryOf: (GregorianYear number: 2003 expiring: expiring)) lastDate = (FixedGregorianDate yearNumber: 2003 monthNumber: 2 dayNumber: 28)
	

	! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50945043!
testLastDay

	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) lastDay = GregorianDay saturday.
	self assert: (GregorianMonthOfYear februaryOf: (GregorianYear number: 2004 expiring: expiring)) lastDay = GregorianDay sunday.
	self assert: (GregorianMonthOfYear februaryOf: (GregorianYear number: 2003 expiring: expiring)) lastDay = GregorianDay friday! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50946652!
testDates

	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) dates first = (FixedGregorianDate yearNumber: 2004 monthNumber: 1 dayNumber: 1).
	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) dates last = (FixedGregorianDate yearNumber: 2004 monthNumber: 1 dayNumber: 31)! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50945936!
testIncludesMonthOfYear

	self assert: ((GregorianYear number: 2005 expiring: expiring) includes: (GregorianMonthOfYear yearNumber: 2005 monthNumber: 1)).
	self assert: ((GregorianYear number: 2005 expiring: expiring) includes: (GregorianMonthOfYear yearNumber: 2005 monthNumber: 12)).	
	
	self assert: ((GregorianYear number: 2004 expiring: expiring) includes: (GregorianMonthOfYear yearNumber: 2004 monthNumber: 1)).	
	self assert: ((GregorianYear number: 2004 expiring: expiring) includes: (GregorianMonthOfYear yearNumber: 2004 monthNumber: 12)).
	
	self deny: ((GregorianYear number: 2004 expiring: expiring) includes: (GregorianMonthOfYear yearNumber: 2005 monthNumber: 1)).	
	self deny: ((GregorianYear number: 2004 expiring: expiring) includes: (GregorianMonthOfYear yearNumber: 2003 monthNumber: 12)).	
	! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50945966!
testEqual

	self assert: (GregorianYear number: 2004 expiring: expiring) = (GregorianYear number: 2004 expiring: expiring).
	self deny: (GregorianYear number: 2004 expiring: expiring) = (GregorianYear number: 2003 expiring: expiring).
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50947012!
test01CheckoutWithEmptyCartShouldRaiseAnError

	| emptyCart creditCard |
	
	emptyCart := Cart acceptingItemsOf: Dictionary new.
	
	creditCard := CreditCard number: 1111222233334444 expiring: expiring.
	
	self 
		should: [ Cashier new checkout: emptyCart with: creditCard ]
		raise:  Error
		withMessageText: Cashier checkoutWithEmptyCartErrorMessage.
	
	! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50946147!
testPreviousLeapYear

	self assert: (GregorianYear number: 2005 expiring: expiring) previousLeapYear= (GregorianYear number: 2004 expiring: expiring).
	self assert: (GregorianYear number: 2004 expiring: expiring) previousLeapYear= (GregorianYear number: 2000 expiring: expiring).
	self assert: (GregorianYear number: 1901 expiring: expiring) previousLeapYear= (GregorianYear number: 1896 expiring: expiring).

	! !
!FixedGregorianDateTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:52' prior: 50947127!
testToEveryDayNumber
						
	| expectedMonths interval |
	
	interval := (FixedGregorianDate yearNumber: 2004 monthNumber: 1 dayNumber: 1)
		to: (FixedGregorianDate yearNumber: 2004 monthNumber: 12 dayNumber: 31)
		everyDayNumber: 31.
			
	self assert: interval first=(FixedGregorianDate yearNumber: 2004 monthNumber: 1 dayNumber: 31).
	self assert: interval last=(FixedGregorianDate yearNumber: 2004 monthNumber: 12 dayNumber: 31).
	self assert: interval size=7.
	expectedMonths := GregorianMonth months select: [ :aMonth | (aMonth lastDayNumberIn: (GregorianYear number: 2004 expiring: expiring))=31 ].
	interval inject: 1 into: [ :index :aDate |
		self assert: aDate month=(expectedMonths at: index).
		self assert: aDate dayNumber=31.
		index + 1 ].
! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:53' prior: 50945258!
testNextANumberOfYears

	self assert: ((GregorianYear number: 2004 expiring: expiring) next: self zeroYears) =(GregorianYear number: 2004 expiring: expiring).
	self assert: ((GregorianYear number: 2004 expiring: expiring) next: self oneYear) =(GregorianYear number: 2005 expiring: expiring).
	self assert: ((GregorianYear number: 2004 expiring: expiring) next: self tenYears) =(GregorianYear number: 2014 expiring: expiring).
	self assert: ((GregorianYear number: -1 expiring: expiring) next: self oneYear) =(GregorianYear number: 1 expiring: expiring).
	self should: [ (GregorianYear number: 2004 expiring: expiring) next: self thirteenMonths ]
		raise: InvalidGregorianYearNumberException.
	self should: [ (GregorianYear number: 2004 expiring: expiring) next: self sixMonths ]
		raise: InvalidGregorianYearNumberException! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:53' prior: 50945213!
testToByDo

	| number |
	
	number := 1.
	
	((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) 
		to: (GregorianMonthOfYear decemberOf: (GregorianYear number: 2004 expiring: expiring))
		by: self twoMonths)
		do: [ :aGregorianMonth | 
			self assert: aGregorianMonth monthNumber = number.
			number := number + 2. ].
		
	self assert: number = 13! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:53' prior: 50945450!
testDates

	self assert: (GregorianYear number: 2004 expiring: expiring) dates first=(FixedGregorianDate yearNumber: 2004 monthNumber: 1 dayNumber: 1).
	self assert: (GregorianYear number: 2004 expiring: expiring) dates last=(FixedGregorianDate yearNumber: 2004 monthNumber: 12 dayNumber: 31).

	self assert: (GregorianYear number: 2003 expiring: expiring) dates first=(FixedGregorianDate yearNumber: 2003 monthNumber: 1 dayNumber: 1).
	self assert: (GregorianYear number: 2003 expiring: expiring) dates last=(FixedGregorianDate yearNumber: 2003 monthNumber: 12 dayNumber: 31).

	! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:53' prior: 50946840!
testIncludesYear

	self 
		should: [ (GregorianYear number: 2005 expiring: expiring) includes: (GregorianYear number: 2005 expiring: expiring) ]
		raise: Exception! !
!FebruaryGregorianMonthTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:53' prior: 50946021!
testNumberOfDaysIn

	| month |
	
	month := FebruaryGregorianMonth new.

	self assert: (month numberOfDaysIn: (GregorianYear number: 2004 expiring: expiring))=(SimpleMeasure amount: 29 unit: TimeUnits day).
	self assert: (month numberOfDaysIn: (GregorianYear number: 2003 expiring: expiring))=(SimpleMeasure amount: 28 unit: TimeUnits day)! !
!FixedGregorianDateTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:53' prior: 50946186!
testCreation

	self assert: (FixedGregorianDate yearNumber: 2004 monthNumber: 1 dayNumber: 1) monthOfYear=(GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)).
	self assert: (FixedGregorianDate yearNumber: 2004 monthNumber: 1 dayNumber: 1) dayNumber=1.
	
	self assert: (FixedGregorianDate monthOfYear: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) dayNumber: 1) monthOfYear=(GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)).
	self assert: (FixedGregorianDate monthOfYear: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) dayNumber: 1) dayNumber=1.

	self assert: (FixedGregorianDate year: (GregorianYear number: 2004 expiring: expiring) month: GregorianMonth january dayNumber: 1) monthOfYear=(GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)).
	self assert: (FixedGregorianDate year: (GregorianYear number: 2004 expiring: expiring) month: GregorianMonth january dayNumber: 1) dayNumber=1.

	self assert: (FixedGregorianDate yearNumber: 2004 month: GregorianMonth january dayNumber: 1) monthOfYear=(GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)).
	self assert: (FixedGregorianDate yearNumber: 2004 month: GregorianMonth january dayNumber: 1) dayNumber=1.
! !
!FixedGregorianDateTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:53' prior: 50946286!
testIncludesYear

	self 
		should: [ (FixedGregorianDate yearNumber: 2005 monthNumber: 1 dayNumber: 1) includes: (GregorianYear number: 2005 expiring: expiring) ]
		raise: Exception! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:53' prior: 50946914!
testNextMonthDefinedAs

	| month |
	
	month := GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring).
	self assert: (month nextMonth: GregorianMonth january) =  (GregorianMonthOfYear januaryOf: (GregorianYear number: 2005 expiring: expiring)).
	self assert: (month nextMonth: GregorianMonth january in: self twoYears ) =  (GregorianMonthOfYear januaryOf: (GregorianYear number: 2006 expiring: expiring)).

	self assert: (month nextMonth: GregorianMonth february) =  (GregorianMonthOfYear februaryOf: (GregorianYear number: 2004 expiring: expiring)).
	self assert: (month nextMonth: GregorianMonth february in: self twoYears) =  (GregorianMonthOfYear februaryOf: (GregorianYear number: 2005 expiring: expiring)).
	
	month := GregorianMonthOfYear julyOf: (GregorianYear number: 2004 expiring: expiring).
	self assert: (month nextMonth: GregorianMonth january) =  (GregorianMonthOfYear januaryOf: (GregorianYear number: 2005 expiring: expiring)).
	self assert: (month nextMonth: GregorianMonth january in: self twoYears ) =  (GregorianMonthOfYear januaryOf: (GregorianYear number: 2006 expiring: expiring)).

	month := GregorianMonthOfYear januaryOf: (GregorianYear number: -1 expiring: expiring).
	self assert: (month nextMonth: GregorianMonth january) =  (GregorianMonthOfYear januaryOf: (GregorianYear number: 1 expiring: expiring)).
	self assert: (month nextMonth: GregorianMonth december) =  (GregorianMonthOfYear decemberOf: (GregorianYear number: -1 expiring: expiring))! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:53' prior: 50945289!
test03CheckoutCartWithManyItemShouldReturnCartTotalValue

	| cart catalog creditCard |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	creditCard := CreditCard number: 1111222233334444 expiring: expiring.
	
	self assert: (Cashier new checkout: cart with: creditCard ) equals: 30.
	
	
	
	
	
	! !
!ArithmeticObject methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:53' prior: 50945379!
coerce: aNumber 
	^ NumberToArithmeticObjectAdapter number: aNumber expiring: expiring! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:53' prior: 50946849!
testLessThan

	self assert: (GregorianYear number: 2004 expiring: expiring) < (GregorianYear number: 2005 expiring: expiring).
	self deny: (GregorianYear number: 2004 expiring: expiring) < (GregorianYear number: 2004 expiring: expiring).
	
	! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:53' prior: 50946618!
testMonthsFrom

	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) distanceFrom: 
		(GregorianMonthOfYear decemberOf: (GregorianYear number: 2003 expiring: expiring))) = self oneMonth.
						
	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) distanceFrom:  
		(GregorianMonthOfYear decemberOf: (GregorianYear number: 2004 expiring: expiring))) = self elevenMonths negated.

	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) distanceFrom:  
		(GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring))) = self ceroMonths.

	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2005 expiring: expiring)) distanceFrom:  
		(GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring))) = self twelveMonths! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:53' prior: 50945924!
testDaysInFebruary

	self assert: (GregorianYear number: 2004 expiring: expiring) numberOfDaysInFebruary=GregorianDay twentyNineDays.
	self assert: (GregorianYear number: 2003 expiring: expiring) numberOfDaysInFebruary=GregorianDay twentyEightDays.

	! !
!GregorianMonthOfYear class methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:53' prior: 50946257!
yearNumber: aYearNumber month: aGregorianMonth

	^self year: (GregorianYear number: aYearNumber expiring: expiring) month: aGregorianMonth! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:53' prior: 50945146!
testNextANumberOfMonths

	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) next: self oneMonth) =
		(GregorianMonthOfYear februaryOf: (GregorianYear number: 2004 expiring: expiring)).
	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) next: self elevenMonths) =
		(GregorianMonthOfYear decemberOf: (GregorianYear number: 2004 expiring: expiring)).
	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) next: self twelveMonths) =
		(GregorianMonthOfYear januaryOf: (GregorianYear number: 2005 expiring: expiring)).
	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) next: self thirteenMonths) =
		(GregorianMonthOfYear februaryOf: (GregorianYear number: 2005 expiring: expiring)).
	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) next: self ceroMonths) =
		(GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)).
	
	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) next: self oneYear) =
		(GregorianMonthOfYear januaryOf: (GregorianYear number: 2005 expiring: expiring)).
	self assert: ((GregorianMonthOfYear aprilOf: (GregorianYear number: 2004 expiring: expiring)) next: self oneYear) =
		(GregorianMonthOfYear aprilOf: (GregorianYear number: 2005 expiring: expiring)).
	
	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) next: (TimeUnits month with: 0.5)) =
		(GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)).
	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) next: (TimeUnits month with: 1.5)) =
		(GregorianMonthOfYear februaryOf: (GregorianYear number: 2004 expiring: expiring))! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:53' prior: 50946721!
testMonthsTo

	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) distanceTo:  
		(GregorianMonthOfYear decemberOf: (GregorianYear number: 2003 expiring: expiring))) = self oneMonth negated.
						
	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) distanceTo:  
		(GregorianMonthOfYear decemberOf: (GregorianYear number: 2004 expiring: expiring))) = self elevenMonths.

	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) distanceTo:  
		(GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring))) = self ceroMonths.

	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) distanceTo:  
		(GregorianMonthOfYear januaryOf: (GregorianYear number: 2005 expiring: expiring))) = self twelveMonths! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:53' prior: 50946895!
testToByYearsDo

	| yearNumber |
	
	yearNumber := 2004.
	
	((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) 
		to: (GregorianMonthOfYear decemberOf: (GregorianYear number: 2010 expiring: expiring))
		by: self oneYear)
		do: [ :aGregorianMonth | 
			self assert: aGregorianMonth monthNumber = 1.
			self assert: aGregorianMonth year number = yearNumber.
			yearNumber := yearNumber + 1. ].
		
	self assert: yearNumber = 2011! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:53' prior: 50945323!
testLastDay

	self assert: (GregorianYear number: 2004 expiring: expiring) lastDay = (FixedGregorianDate yearNumber: 2004 monthNumber: 12 dayNumber: 31) day.
	self assert: (GregorianYear number: 2003 expiring: expiring) lastDay = (FixedGregorianDate yearNumber: 2003 monthNumber: 12 dayNumber: 31) day.

	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:53' prior: 50945402!
test02CheckoutCartWithOneItemShouldReturnCartTotalValue

	| cart catalog creditCard |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	
	creditCard := CreditCard number: 1111222233334444 expiring: expiring.
	
	self assert: (Cashier new checkout: cart with: creditCard ) equals: 10.
	
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:53' prior: 50946036!
test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: 1.2 expiring: expiring) ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberTypeErrorDescription.
	
	
	
	
	! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:53' prior: 50945124!
testInvalidYear

	self 
		should: [ GregorianYear number: 0 expiring: expiring ]
		raise: InvalidGregorianYearNumberException
		withExceptionDo: [ :anException |
			self assert: anException number = 0.
			self assert: anException description = '0 is an invalid number for a year' ].
				
	self 
		should: [ GregorianYear number: 1.5 expiring: expiring ]
		raise: InvalidGregorianYearNumberException
		withExceptionDo: [ :anException |
			self assert: anException number = 1.5.
			self assert: anException description = ('{1} is an invalid number for a year' format: { 1.5 }) ]! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:53' prior: 50946601!
testPrevious

	self assert: ((GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) previous) =  (GregorianMonthOfYear decemberOf: (GregorianYear number: 2003 expiring: expiring)).
	self assert: ((GregorianMonthOfYear decemberOf: (GregorianYear number: 2004 expiring: expiring)) previous) =  (GregorianMonthOfYear novemberOf: (GregorianYear number: 2004 expiring: expiring))! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:53' prior: 50947113!
testFirstDate

	self assert: (GregorianYear number: 2004 expiring: expiring) firstDate = (FixedGregorianDate yearNumber: 2004 monthNumber: 1 dayNumber: 1).
	self assert: (GregorianYear number: 2003 expiring: expiring) firstDate = (FixedGregorianDate yearNumber: 2003 monthNumber: 1 dayNumber: 1).

	! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:53' prior: 50946881!
testToByDo

	| number |
	
	number := 2004.
	(((GregorianYear number: 2004 expiring: expiring) to: (GregorianYear number: 2010 expiring: expiring) by: self twoYears )) do: [ :aGregorianYear |
		self assert: aGregorianYear number=number.
		number := number + 2. ].
	
	self assert: number=2012.
	! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:53' prior: 50945738!
testPreviousMonthDefinedAs

	| month |
	
	month := GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring).
	self assert: (month previousMonth: GregorianMonth january) =  (GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expiring: expiring)).
	self assert: (month previousMonth: GregorianMonth january in: self twoYears)  = (GregorianMonthOfYear januaryOf: (GregorianYear number: 2002 expiring: expiring)).

	month := GregorianMonthOfYear aprilOf: (GregorianYear number: 2004 expiring: expiring).
	self assert: (month previousMonth: GregorianMonth february) =  (GregorianMonthOfYear februaryOf: (GregorianYear number: 2004 expiring: expiring)).
	self assert: (month previousMonth: GregorianMonth february in: self twoYears)  = (GregorianMonthOfYear februaryOf: (GregorianYear number: 2003 expiring: expiring)).
	
	month := GregorianMonthOfYear julyOf: (GregorianYear number: 2004 expiring: expiring).
	self assert: (month previousMonth: GregorianMonth january) =  (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)).
	self assert: (month previousMonth: GregorianMonth january in: self twoYears ) =  (GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expiring: expiring)).

	month := GregorianMonthOfYear januaryOf: (GregorianYear number: 1 expiring: expiring).
	self assert: (month previousMonth: GregorianMonth january) =  (GregorianMonthOfYear januaryOf: (GregorianYear number: -1 expiring: expiring)).
	self assert: (month previousMonth: GregorianMonth december) =  (GregorianMonthOfYear decemberOf: (GregorianYear number: -1 expiring: expiring))! !
!ArithmeticObject methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:53' prior: 50945060!
adaptToNumber: aNumber andSend: aSelector 
	^ (NumberToArithmeticObjectAdapter number: aNumber expiring: expiring) 
		perform: aSelector
		with: self! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:53' prior: 50946234!
testLessThan

	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expiring: expiring)) < (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)).
						
	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expiring: expiring)) < (GregorianMonthOfYear februaryOf: (GregorianYear number: 2003 expiring: expiring)).
	
	self deny: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expiring: expiring)) < (GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expiring: expiring))! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:53' prior: 50947069!
testNext

	self assert: (GregorianYear number: 2004 expiring: expiring) next=(GregorianYear number: 2005 expiring: expiring).
	self assert: (GregorianYear number: -1 expiring: expiring) next=(GregorianYear number: 1 expiring: expiring).
	

	! !
!GregorianMonthOfYearTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:15:53' prior: 50947081!
testHash

	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) hash = (GregorianMonthOfYear januaryOf: (GregorianYear number: 2004 expiring: expiring)) hash.
	self assert: (GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expiring: expiring)) hash = (GregorianMonthOfYear januaryOf: (GregorianYear number: 2003 expiring: expiring)) hash! !

!methodRemoval: NumberToArithmeticObjectAdapter class #number:expirationDate: stamp: 'MS 6/13/2021 20:15:53'!
number: aNumber expirationDate: expiring 
	^ self new initializeNumber: aNumber!

!methodRemoval: CreditCard class #number:expirationDate: stamp: 'MS 6/13/2021 20:15:53'!
number: aCreditCardNumber expirationDate: expiring  

	self assertCreditCardNumberIsValid: aCreditCardNumber .

	^self new initializeNumber: aCreditCardNumber.!

!methodRemoval: InvalidGregorianYearNumberException class #number:expirationDate: stamp: 'MS 6/13/2021 20:15:53'!
number: aNumber expirationDate: expiring 

	^self new initializeNumber: aNumber!

!methodRemoval: GregorianYear class #number:expirationDate: stamp: 'MS 6/13/2021 20:15:53'!
number: aNumber expirationDate: expiring 

	^(self isValidYearNumber: aNumber)
		ifTrue: [ self createYear: aNumber ]
		ifFalse: [ InvalidGregorianYearNumberException signalNumber: aNumber ]!

!methodRemoval: InvalidGregorianMonthNumberException class #number:expirationDate: stamp: 'MS 6/13/2021 20:15:53'!
number: aNumber expirationDate: expiring 

	^self new initializeNumber: aNumber!
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 20:16:09' prior: 50947199!
number: aCreditCardNumber expiring: expirationDate  

	self assertCreditCardNumberIsValid: aCreditCardNumber .

	^self new initializeNumber: aCreditCardNumber.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:22:27' prior: 50947670!
test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new checkout: 
			cart with: (CreditCard number: 1111222233334444 
				expiring: (GregorianMonthOfYear yearNumber: 12345 monthNumber: 10)) ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardYearErrorDescription.
	
	
	
	
	! !

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:22:29'!
ERROR!
!CreditCard class methodsFor: 'exceptions' stamp: 'MS 6/13/2021 20:22:40'!
invalidCreditCardYearErrorDescription
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'exceptions' stamp: 'MS 6/13/2021 20:22:53' prior: 50949331!
invalidCreditCardYearErrorDescription
	'Credit card expiration year should have 4 digits'! !

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:22:54'!
FAILURE!

GregorianMonthOfYear yearNumber: 12 monthNumber: 10!

(GregorianMonthOfYear yearNumber: 12 monthNumber: 10) year!

(GregorianMonthOfYear yearNumber: 12 monthNumber: 10) year!

(GregorianMonthOfYear yearNumber: 12 monthNumber: 10) year!
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 20:27:33' prior: 50949299!
number: aCreditCardNumber expiring: expirationDate  

	self assertCreditCardNumberIsValid: aCreditCardNumber .
	
	^self new initializeNumber: aCreditCardNumber.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:30:06' prior: 50949308!
test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new checkout: 
			cart with: (CreditCard number: 1111222233334444 
				expiring: 10@11111) ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardYearErrorDescription.
	
	
	
	
	! !

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:30:07'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 20:31:04' prior: 50949354!
number: aCreditCardNumber expiring: expirationDate  

	self assertCreditCardNumberIsValid: aCreditCardNumber .
	
	( (expirationDate second numberOfDigitsInBase: 10) isEqualTo: 4 ) ifFalse: [ self invalidCreditCardYearErrorDescription ].
	
	^self new initializeNumber: aCreditCardNumber.! !

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:31:07'!
ERROR!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:31:07'!
ERROR!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:31:07'!
ERROR!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:31:07'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:31:07'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:31:07'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:31:07'!
FAILURE!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:31:17'!
ERROR!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:31:17'!
ERROR!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:31:17'!
ERROR!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:31:17'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:31:17'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:31:17'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:31:17'!
FAILURE!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:31:18'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:31:49' prior: 50948587!
test01CheckoutWithEmptyCartShouldRaiseAnError

	| emptyCart creditCard |
	
	emptyCart := Cart acceptingItemsOf: Dictionary new.
	
	creditCard := CreditCard number: 1111222233334444 expiring: 10@1998.
	
	self 
		should: [ Cashier new checkout: emptyCart with: creditCard ]
		raise:  Error
		withMessageText: Cashier checkoutWithEmptyCartErrorMessage.
	
	! !

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:31:50'!
ERROR!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:32:16'!
ERROR!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:32:16'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 20:32:24' prior: 50949385!
number: aCreditCardNumber expiring: expirationDate  

	self assertCreditCardNumberIsValid: aCreditCardNumber .
	
	( (expirationDate y numberOfDigitsInBase: 10) isEqualTo: 4 ) ifFalse: [ self invalidCreditCardYearErrorDescription ].
	
	^self new initializeNumber: aCreditCardNumber.! !

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:32:25'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:32:26'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:32:26'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:32:26'!
ERROR!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:32:26'!
ERROR!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:32:26'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:32:26'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:32:26'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:32:26'!
FAILURE!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:32:28'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:32:33' prior: 50949056!
test02CheckoutCartWithOneItemShouldReturnCartTotalValue

	| cart catalog creditCard |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	
	creditCard := CreditCard number: 1111222233334444 expiring: 10@1998.
	
	self assert: (Cashier new checkout: cart with: creditCard ) equals: 10.
	
	
	
	
	
	! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:32:34'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:32:36'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:32:42' prior: 50948843!
test03CheckoutCartWithManyItemShouldReturnCartTotalValue

	| cart catalog creditCard |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	creditCard := CreditCard number: 1111222233334444 expiring: 10@1998.
	
	self assert: (Cashier new checkout: cart with: creditCard ) equals: 30.
	
	
	
	
	
	! !

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:32:43'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:32:44'!
FAILURE!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:33:16'!
FAILURE!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:33:21'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:33:21'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:33:21'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:33:21'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:33:21'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:33:21'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:33:21'!
FAILURE!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:33:21'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:34:08' prior: 50948039!
test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: 123456 expiring: 10@1998) ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberLengthErrorDescription.
	
	
	
	
	! !

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:34:09'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:34:09'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:34:09'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:34:09'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:34:09'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:34:09'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:34:09'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:34:09'!
FAILURE!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:34:09'!
FAILURE!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:34:16'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:34:22' prior: 50947329!
test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: -1111222233334444 expiring: 10@1998) ]
		raise:  Error
		withMessageText: CreditCard creditCardNumberMustBePositiveErrorDescription.
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:34:26' prior: 50949071!
test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: 1.2 expiring: 10@1998) ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberTypeErrorDescription.
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:35:07' prior: 50949363!
test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new checkout: cart 
			with: (CreditCard number: 1111222233334444 
				expiring: 10@11111) ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardYearErrorDescription.
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:35:18' prior: 50949704!
test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new checkout: cart 
			with: (CreditCard number: 1111222233334444 
				expiring: (10@11111)) ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardYearErrorDescription.
	
	
	
	
	! !

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:35:19'!
FAILURE!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:35:59'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:36:40'!
FAILURE!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:36:47'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:36:47'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:36:47'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:36:47'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:36:47'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:36:47'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:36:47'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:36:47'!
FAILURE!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:36:47'!
FAILURE!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:36:51'!
FAILURE!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:36:51'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:37:27' prior: 50949722!
test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	CreditCard number: 1111222233334444 expiring: (10@11111).
				
	
	"self 
		should: [ 
			Cashier new checkout: cart 
			with: (CreditCard number: 1111222233334444 
				expiring: (10@11111)) ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardYearErrorDescription."
	
	
	
	
	! !

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:37:28'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:37:28'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:37:28'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:37:28'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:37:28'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:37:28'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:37:28'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:37:28'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:37:45' prior: 50949797!
test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError
		
	| cart catalog card |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	card := CreditCard number: 1111222233334444 expiring: (10@11111).
	
	
				
	
	"self 
		should: [ 
			Cashier new checkout: cart 
			with: (CreditCard number: 1111222233334444 
				expiring: (10@11111)) ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardYearErrorDescription."
	
	
	
	
	! !

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:37:48'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:37:48'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:37:48'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:37:48'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:37:48'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:37:48'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:37:48'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:37:48'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:37:54' prior: 50949849!
test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError
		
	| cart catalog card |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	card := CreditCard number: 1111222233334444 expiring: (10@11111111).
	
	
				
	
	"self 
		should: [ 
			Cashier new checkout: cart 
			with: (CreditCard number: 1111222233334444 
				expiring: (10@11111)) ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardYearErrorDescription."
	
	
	
	
	! !

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:37:56'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:37:56'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:37:56'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:37:56'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:37:56'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:37:56'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:37:56'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:37:56'!
PASSED!

expirationDate y numberOfDigitsInBase: 10!
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 20:38:50' prior: 50949480!
number: aCreditCardNumber expiring: expirationDate  

	self assertCreditCardNumberIsValid: aCreditCardNumber .
	
	( (expirationDate y numberOfDigitsInBase: 10) isEqualTo: 4 ) ifFalse: [ self error: self invalidCreditCardYearErrorDescription ].
	
	^self new initializeNumber: aCreditCardNumber.! !

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:38:51'!
ERROR!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:38:51'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:38:59' prior: 50949901!
test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError
		
	| cart catalog card |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new checkout: cart 
			with: (CreditCard number: 1111222233334444 
				expiring: (10@11111)) ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardYearErrorDescription.
	
	
	
	
	! !

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:39:03'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:39:03'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:39:03'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:39:03'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:39:03'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:39:03'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:39:03'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:39:03'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:39:10' prior: 50949976!
test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new checkout: cart 
			with: (CreditCard number: 1111222233334444 
				expiring: (10@11111)) ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardYearErrorDescription.
	
	
	
	
	! !

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:39:13'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:39:13'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:39:13'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:39:13'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:39:13'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:39:13'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:39:13'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:39:13'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:39:19' prior: 50950026!
test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new checkout: cart 
			with: (CreditCard number: 1111222233334444 
				expiring: (10@11111)) ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardYearErrorDescription.
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:39:26' prior: 50950076!
test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			with: (CreditCard number: 1111222233334444 
				expiring: (10@11111)) ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardYearErrorDescription.
	
	
	
	
	! !
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 20:40:22' prior: 50949955!
number: aCreditCardNumber expiring: expirationDate  

	self assertCreditCardNumberIsValid: aCreditCardNumber .
	
	self assertExpirationYearIsValid: expirationDate.
	
	( (expirationDate y numberOfDigitsInBase: 10) isEqualTo: 4 ) ifFalse: [ self error: self invalidCreditCardYearErrorDescription ].
	
	^self new initializeNumber: aCreditCardNumber.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 20:40:42'!
assertExpirationYearIsValid: expirationDate


	( (expirationDate y numberOfDigitsInBase: 10) isEqualTo: 4 ) ifFalse: [ self error: self invalidCreditCardYearErrorDescription ].
! !
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 20:40:52' prior: 50950112!
number: aCreditCardNumber expiring: expirationDate  

	self assertCreditCardNumberIsValid: aCreditCardNumber .
	
	self assertExpirationYearIsValid: expirationDate.
	
	^self new initializeNumber: aCreditCardNumber.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 6/13/2021 20:40:52'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 6/13/2021 20:40:52'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 6/13/2021 20:40:52'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 6/13/2021 20:40:52'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 6/13/2021 20:40:52'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 6/13/2021 20:40:52'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 6/13/2021 20:40:52'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 6/13/2021 20:40:52'!
ERROR!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:40:52'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:40:52'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:40:52'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:40:52'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:40:52'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:40:52'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:40:52'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:40:56'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:40:56'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:40:56'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:40:56'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:40:56'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:40:56'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:40:56'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:40:58'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:40:58'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:40:58'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:40:58'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:40:58'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:40:58'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:40:58'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 6/13/2021 20:41:00'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 6/13/2021 20:41:00'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 6/13/2021 20:41:00'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 6/13/2021 20:41:00'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 6/13/2021 20:41:00'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 6/13/2021 20:41:00'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 6/13/2021 20:41:00'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 6/13/2021 20:41:00'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 6/13/2021 20:41:01'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 6/13/2021 20:41:25'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 6/13/2021 20:41:40'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 6/13/2021 20:41:40'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 6/13/2021 20:41:40'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 6/13/2021 20:41:40'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 6/13/2021 20:41:40'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 6/13/2021 20:41:40'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 6/13/2021 20:41:40'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 6/13/2021 20:41:40'!
ERROR!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:42:07'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:42:07'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:42:07'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:42:07'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:42:07'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:42:07'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:42:07'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 6/13/2021 20:42:12'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:42:15'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:42:15'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:42:15'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:42:15'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:42:15'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:42:15'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:42:15'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 6/13/2021 20:42:17'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 6/13/2021 20:42:17'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 6/13/2021 20:42:17'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 6/13/2021 20:42:17'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 6/13/2021 20:42:17'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 6/13/2021 20:42:17'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 6/13/2021 20:42:17'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 6/13/2021 20:42:17'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 6/13/2021 20:43:06'!
PASSED!
!CartTest methodsFor: 'support' stamp: 'MS 6/13/2021 20:43:37' prior: 50943086!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!InvalidGregorianMonthNumberException methodsFor: 'initialization' stamp: 'MS 6/13/2021 20:44:27'!
initializeNumber: aNumber expiring: expiring 

	number := aNumber! !
!GregorianYear methodsFor: 'initialization' stamp: 'MS 6/13/2021 20:44:27'!
initializeNumber: aNumber expiring: expiring 

	self subclassResponsibility! !
!NumberToArithmeticObjectAdapter methodsFor: 'initialization' stamp: 'MS 6/13/2021 20:44:27'!
initializeNumber: aNumber expiring: expiring 

	number := aNumber! !
!InvalidGregorianYearNumberException methodsFor: 'initialization' stamp: 'MS 6/13/2021 20:44:27'!
initializeNumber: aNumber expiring: expiring 

	number := aNumber! !
!GregorianLeapYear methodsFor: 'initialization' stamp: 'MS 6/13/2021 20:44:28' overrides: 50950404!
initializeNumber: aNumber expiring: expiring 

	number := aNumber.
	numberOfDaysFromBaseDate := self calculateNumberOfDaysFromBaseDate.! !
!GregorianNonLeapYear methodsFor: 'initialization' stamp: 'MS 6/13/2021 20:44:28' overrides: 50950404!
initializeNumber: aNumber expiring: expiring 

	number := aNumber.
	numberOfDaysFromBaseDate := self calculateNumberOfDaysFromBaseDate.	! !
!CreditCard methodsFor: 'instance creation' stamp: 'MS 6/13/2021 20:44:28'!
initializeNumber: aCreditCardNumber expiring: expiring  
	
	creditCardNumber := aCreditCardNumber.
	! !
!InvalidGregorianYearNumberException class methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:44:28' prior: 50947208!
number: aNumber expiring: expiring 

	^self new initializeNumber: aNumber expiring: expiring! !
!InvalidGregorianMonthNumberException class methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:44:28' prior: 50947224!
number: aNumber expiring: expiring 

	^self new initializeNumber: aNumber expiring: expiring! !
!GregorianYear class methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:44:28' prior: 50760233!
createYear: aNumber 

	^(self yearClassOf: aNumber) new initializeNumber: aNumber expiring: expiring.
! !
!NumberToArithmeticObjectAdapter class methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:44:28' prior: 50947194!
number: aNumber expiring: expiring 
	^ self new initializeNumber: aNumber expiring: expiring! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:44:28' prior: 50950135!
number: aCreditCardNumber expiring: expirationDate  

	self assertCreditCardNumberIsValid: aCreditCardNumber .
	
	self assertExpirationYearIsValid: expirationDate.
	
	^self new initializeNumber: aCreditCardNumber expiring: expiring.! !

!methodRemoval: InvalidGregorianMonthNumberException #initializeNumber: stamp: 'MS 6/13/2021 20:44:28'!
initializeNumber: aNumber

	number := aNumber!

!methodRemoval: GregorianYear #initializeNumber: stamp: 'MS 6/13/2021 20:44:28'!
initializeNumber: aNumber

	self subclassResponsibility!

!methodRemoval: NumberToArithmeticObjectAdapter #initializeNumber: stamp: 'MS 6/13/2021 20:44:28'!
initializeNumber: aNumber

	number := aNumber!

!methodRemoval: InvalidGregorianYearNumberException #initializeNumber: stamp: 'MS 6/13/2021 20:44:28'!
initializeNumber: aNumber

	number := aNumber!

!methodRemoval: GregorianLeapYear #initializeNumber: stamp: 'MS 6/13/2021 20:44:28'!
initializeNumber: aNumber

	number := aNumber.
	numberOfDaysFromBaseDate := self calculateNumberOfDaysFromBaseDate.!

!methodRemoval: GregorianNonLeapYear #initializeNumber: stamp: 'MS 6/13/2021 20:44:28'!
initializeNumber: aNumber

	number := aNumber.
	numberOfDaysFromBaseDate := self calculateNumberOfDaysFromBaseDate.	!

!methodRemoval: CreditCard #initializeNumber: stamp: 'MS 6/13/2021 20:44:28'!
initializeNumber: aCreditCardNumber 
	
	creditCardNumber := aCreditCardNumber.
	!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:44:54'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:44:54'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:44:54'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:44:54'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:44:54'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:44:54'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:44:54'!
PASSED!
!CardinalDayMonthRuleTest methodsFor: 'test' stamp: 'MS 6/13/2021 20:45:53' prior: 50947251!
testDifferentMonth

	| rule months |
	
	rule := CardinalDayMonthRule cardinal: 3 day: GregorianDay monday month: GregorianMonth august.
	months := (GregorianYear number: 2003) months reject: [ :aMonthOfYear | aMonthOfYear month = GregorianMonth august ].
	
	months do: [ :aMonthOfYear | self deny: (rule includes: (aMonthOfYear cardinal: 3 day: GregorianDay monday)) ].
! !
!ArithmeticObject methodsFor: 'arithmetic operations - private' stamp: 'MS 6/13/2021 20:45:57' prior: 50948859!
coerce: aNumber 
	^ NumberToArithmeticObjectAdapter number: aNumber! !
!ArithmeticObject methodsFor: 'arithmetic operations - private' stamp: 'MS 6/13/2021 20:46:09' prior: 50949206!
adaptToNumber: aNumber andSend: aSelector 
	^ (NumberToArithmeticObjectAdapter number: aNumber) 
		perform: aSelector
		with: self! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'MS 6/13/2021 20:46:59'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumber expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'instance creation' stamp: 'MS 6/13/2021 20:46:57' prior: 50950437!
initializeNumber: aCreditCardNumber expiring: anExpirationDateTuple
	
	creditCardNumber := aCreditCardNumber.
	
	expirationDate := self.
	! !
!CreditCard methodsFor: 'instance creation' stamp: 'MS 6/13/2021 20:47:18' prior: 50950585!
initializeNumber: aCreditCardNumber expiring: anExpirationDateTuple
	
	creditCardNumber := aCreditCardNumber.
	
	expirationDate := GregorianMonthOfYear yearNumber: anExpirationDateTuple x monthNumber: anExpirationDateTuple y.
	! !

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:47:35'!
ERROR!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:47:35'!
ERROR!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:47:35'!
ERROR!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:47:35'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:47:35'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:47:35'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:47:35'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:47:38'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 20:47:55' prior: 50950474!
number: aCreditCardNumber expiring: expirationDate  

	self assertCreditCardNumberIsValid: aCreditCardNumber .
	
	self assertExpirationYearIsValid: expirationDate.
	
	^self new initializeNumber: aCreditCardNumber expiring: expirationDate .! !

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:47:56'!
ERROR!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:48:00'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:48:03'!
ERROR!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:48:03'!
ERROR!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:48:03'!
ERROR!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:48:03'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:48:03'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:48:03'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:48:03'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:48:08'!
ERROR!
!CreditCard methodsFor: 'instance creation' stamp: 'MS 6/13/2021 20:48:36' prior: 50950593!
initializeNumber: aCreditCardNumber expiring: anExpirationDateTuple
	
	creditCardNumber := aCreditCardNumber.
	
	expirationDate := GregorianMonthOfYear yearNumber: anExpirationDateTuple y monthNumber: anExpirationDateTuple x.
	! !

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:48:37'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:48:39'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:48:40'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:48:42'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:48:42'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:48:42'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:48:42'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:48:42'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:48:42'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:48:42'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:49:00'!
test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			with: (CreditCard number: 1111222233334444 
				expiring: (10@11111)) ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardYearErrorDescription.
	
	
	
	
	! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:49:56'!
PASSED!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 20:49:56'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:49:56'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:49:56'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:49:56'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:49:56'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:49:56'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:49:56'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 20:51:34'!
number: aCreditCardNumber expiring: expirationDate for: aUserName

	self assertCreditCardNumberIsValid: aCreditCardNumber .
	
	self assertExpirationYearIsValid: expirationDate.
	
	^self new initializeNumber: aCreditCardNumber expiring: expirationDate for: aUserName .! !
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 20:51:48' prior: 50950780!
number: aCreditCardNumber expiring: expirationDate for: aUserName

	self assertCreditCardNumberIsValid: aCreditCardNumber .
	
	self assertExpirationYearIsValid: expirationDate.
	
	^self new initializeNumber: aCreditCardNumber expiring: expirationDate for: aUserName.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 20:52:09' prior: 50950792!
number: aCreditCardNumber expiring: expirationDate for: aUserName  

	self assertCreditCardNumberIsValid: aCreditCardNumber .
	
	self assertExpirationYearIsValid: expirationDate.
	
	^self new initializeNumber: aCreditCardNumber expiring: expirationDate for: aUserName.! !
!CreditCard methodsFor: 'instance creation' stamp: 'MS 6/13/2021 20:52:36' prior: 50950683!
initializeNumber: aCreditCardNumber expiring: anExpirationDateTuple
	
	creditCardNumber := aCreditCardNumber.
	
	expirationDate := GregorianMonthOfYear yearNumber: anExpirationDateTuple y monthNumber: anExpirationDateTuple x.
	! !
!CreditCard methodsFor: 'instance creation' stamp: 'MS 6/13/2021 20:53:07'!
initializeNumber: aCreditCardNumber expiring: anExpirationDateTuple aUserName: for 
	
	creditCardNumber := aCreditCardNumber.
	
	expirationDate := GregorianMonthOfYear yearNumber: anExpirationDateTuple y monthNumber: anExpirationDateTuple x.
	! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:53:07' prior: 50950634!
number: aCreditCardNumber expiring: expirationDate  

	self assertCreditCardNumberIsValid: aCreditCardNumber .
	
	self assertExpirationYearIsValid: expirationDate.
	
	^self new initializeNumber: aCreditCardNumber expiring: expirationDate aUserName: 'Matias' .! !

!methodRemoval: CreditCard #initializeNumber:expiring: stamp: 'MS 6/13/2021 20:53:07'!
initializeNumber: aCreditCardNumber expiring: anExpirationDateTuple
	
	creditCardNumber := aCreditCardNumber.
	
	expirationDate := GregorianMonthOfYear yearNumber: anExpirationDateTuple y monthNumber: anExpirationDateTuple x.
	!

!methodRemoval: CreditCard class #number:expiring:for: stamp: 'MS 6/13/2021 20:53:21'!
number: aCreditCardNumber expiring: expirationDate for: aUserName  

	self assertCreditCardNumberIsValid: aCreditCardNumber .
	
	self assertExpirationYearIsValid: expirationDate.
	
	^self new initializeNumber: aCreditCardNumber expiring: expirationDate for: aUserName.!
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 20:54:12'!
number: aCreditCardNumber expiring: expirationDate for: aUserName   

	self assertCreditCardNumberIsValid: aCreditCardNumber .
	
	self assertExpirationYearIsValid: expirationDate.
	
	^self new initializeNumber: aCreditCardNumber expiring: expirationDate aUserName: 'Matias' .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:54:12' prior: 50950731!
test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			with: (CreditCard number: 1111222233334444 
				expiring: (10@11111) for: 'Matias') ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardYearErrorDescription.
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:54:12' prior: 50949612!
test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: 123456 expiring: 10@1998 for: 'Matias') ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberLengthErrorDescription.
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:54:12' prior: 50950094!
test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			with: (CreditCard number: 1111222233334444 
				expiring: (10@11111) for: 'Matias') ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardYearErrorDescription.
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:54:12' prior: 50949552!
test03CheckoutCartWithManyItemShouldReturnCartTotalValue

	| cart catalog creditCard |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	creditCard := CreditCard number: 1111222233334444 expiring: 10@1998 for: 'Matias'.
	
	self assert: (Cashier new checkout: cart with: creditCard ) equals: 30.
	
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:54:13' prior: 50949455!
test01CheckoutWithEmptyCartShouldRaiseAnError

	| emptyCart creditCard |
	
	emptyCart := Cart acceptingItemsOf: Dictionary new.
	
	creditCard := CreditCard number: 1111222233334444 expiring: 10@1998 for: 'Matias'.
	
	self 
		should: [ Cashier new checkout: emptyCart with: creditCard ]
		raise:  Error
		withMessageText: Cashier checkoutWithEmptyCartErrorMessage.
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:54:13' prior: 50949669!
test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: -1111222233334444 expiring: 10@1998 for: 'Matias') ]
		raise:  Error
		withMessageText: CreditCard creditCardNumberMustBePositiveErrorDescription.
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:54:13' prior: 50949687!
test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: 1.2 expiring: 10@1998 for: 'Matias') ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberTypeErrorDescription.
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:54:13' prior: 50949530!
test02CheckoutCartWithOneItemShouldReturnCartTotalValue

	| cart catalog creditCard |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	
	creditCard := CreditCard number: 1111222233334444 expiring: 10@1998 for: 'Matias'.
	
	self assert: (Cashier new checkout: cart with: creditCard ) equals: 10.
	
	
	
	
	
	! !

!methodRemoval: CreditCard class #number:expiring: stamp: 'MS 6/13/2021 20:54:13'!
number: aCreditCardNumber expiring: expirationDate  

	self assertCreditCardNumberIsValid: aCreditCardNumber .
	
	self assertExpirationYearIsValid: expirationDate.
	
	^self new initializeNumber: aCreditCardNumber expiring: expirationDate aUserName: 'Matias' .!
!CreditCard methodsFor: 'instance creation' stamp: 'MS 6/13/2021 20:54:30'!
initializeNumber: aCreditCardNumber expiring: anExpirationDateTuple for: for 
	
	creditCardNumber := aCreditCardNumber.
	
	expirationDate := GregorianMonthOfYear yearNumber: anExpirationDateTuple y monthNumber: anExpirationDateTuple x.
	! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:54:31' prior: 50950869!
number: aCreditCardNumber expiring: expirationDate for: aUserName   

	self assertCreditCardNumberIsValid: aCreditCardNumber .
	
	self assertExpirationYearIsValid: expirationDate.
	
	^self new initializeNumber: aCreditCardNumber expiring: expirationDate for: 'Matias' .! !

!methodRemoval: CreditCard #initializeNumber:expiring:aUserName: stamp: 'MS 6/13/2021 20:54:31'!
initializeNumber: aCreditCardNumber expiring: anExpirationDateTuple aUserName: for 
	
	creditCardNumber := aCreditCardNumber.
	
	expirationDate := GregorianMonthOfYear yearNumber: anExpirationDateTuple y monthNumber: anExpirationDateTuple x.
	!
!CreditCard methodsFor: 'instance creation' stamp: 'MS 6/13/2021 20:54:37' prior: 50951029!
initializeNumber: aCreditCardNumber expiring: anExpirationDateTuple for: aUserName
	
	creditCardNumber := aCreditCardNumber.
	
	expirationDate := GregorianMonthOfYear yearNumber: anExpirationDateTuple y monthNumber: anExpirationDateTuple x.
	! !

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:53'!
PASSED!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:54'!
PASSED!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:55'!
PASSED!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:56'!
PASSED!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:56'!
PASSED!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:56'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 20:54:58'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:55:16'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:55:16'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:55:16'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:55:16'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:55:16'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:55:16'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:55:16'!
PASSED!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 20:55:16'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:55:40' prior: 50950881!
test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			with: (CreditCard number: 1111222233334444 
				expiring: (10@11111) for: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa') ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardYearErrorDescription.
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:56:02' prior: 50951315!
test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			with: (CreditCard number: 1111222233334444 
				expiring: (10@11111) for: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa') ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNameErrorDescription.
	
	
	
	
	! !

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 20:56:04'!
ERROR!
!CreditCard class methodsFor: 'exceptions' stamp: 'MS 6/13/2021 20:56:12'!
invalidCreditCardNameErrorDescription
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'exceptions' stamp: 'MS 6/13/2021 20:56:25' prior: 50951356!
invalidCreditCardNameErrorDescription
	^'Name should have less than 30 characters'.! !

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 20:56:26'!
FAILURE!

'asd' length !

'asd' length!

asd!

'asd'!

asd!

"Mati"!

'asd' size !
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 20:58:45' prior: 50951040!
number: aCreditCardNumber expiring: expirationDate for: aUserName   

	self assertCreditCardNumberIsValid: aCreditCardNumber .
	
	self assertExpirationYearIsValid: expirationDate.
	
	(aUserName size > 30) ifTrue: [self error: self invalidCreditCardNameErrorDescription ].
	
	^self new initializeNumber: aCreditCardNumber expiring: expirationDate for: 'Matias' .! !

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 20:58:50'!
FAILURE!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 20:58:50'!
FAILURE!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 20:59:14'!
FAILURE!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 20:59:24'!
FAILURE!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 20:59:24'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:59:37' prior: 50951334!
test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			with: (CreditCard number: 1111222233334444
				expiring: (10@1111) for: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa') ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNameErrorDescription.
	
	
	
	
	! !

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 20:59:38'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:59:38'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:59:38'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:59:38'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:59:38'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:59:39'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:59:39'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:59:39'!
PASSED!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 20:59:39'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 20:59:43' prior: 50951407!
test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			with: (CreditCard number: 1111222233334444
				expiring: (10@1111) for: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa') ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNameErrorDescription.
	
	
	
	
	! !

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 20:59:47'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 20:59:47'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:59:47'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 20:59:47'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:59:47'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:59:47'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 20:59:47'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 20:59:47'!
PASSED!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 20:59:47'!
PASSED!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'MS 6/13/2021 21:00:23'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumber expirationDate userName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'instance creation' stamp: 'MS 6/13/2021 21:00:22' prior: 50951063!
initializeNumber: aCreditCardNumber expiring: anExpirationDateTuple for: aUserName
	
	creditCardNumber := aCreditCardNumber.
	
	expirationDate := GregorianMonthOfYear yearNumber: anExpirationDateTuple y monthNumber: anExpirationDateTuple x.
	
	userName := aUserName.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 21:00:42' prior: 50951461!
test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			with: (CreditCard number: 1111222233334444
				expiring: (10@1111) 
				for: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa') ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNameErrorDescription.
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 21:01:00' prior: 50951535!
test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			with: (CreditCard number: 1111222233334444
				expiring: (19@1111) 
				for: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa') ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNameErrorDescription.
	
	
	
	
	! !

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 21:01:01'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 21:01:01'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 21:01:01'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 21:01:01'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 21:01:01'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 21:01:01'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 21:01:01'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 21:01:01'!
PASSED!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 21:01:01'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 21:01:07' prior: 50951554!
test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			with: (CreditCard number: 1111222233334444
				expiring: (29@1111) 
				for: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa') ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNameErrorDescription.
	
	
	
	
	! !

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 21:01:08'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 21:01:08'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 21:01:08'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 21:01:08'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 21:01:08'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 21:01:08'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 21:01:08'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 21:01:08'!
PASSED!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 21:01:08'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 21:01:24' prior: 50951608!
test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			with: (CreditCard number: 1111222233334444
				expiring: (299@1111) 
				for: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa') ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNameErrorDescription.
	
	
	
	
	! !

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 21:01:25'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 21:01:25'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 21:01:25'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 21:01:25'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 21:01:25'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 21:01:25'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 21:01:25'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 21:01:25'!
PASSED!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 21:01:25'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 21:01:31' prior: 50951662!
test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			with: (CreditCard number: 1111222233334444
				expiring: (299@1111) 
				for: 'aaaaaaaaaaaaaaa') ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNameErrorDescription.
	
	
	
	
	! !

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 21:01:32'!
FAILURE!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 21:01:41'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 21:02:26' prior: 50951373!
number: aCreditCardNumber expiring: expirationDate for: aUserName   

	self assertCreditCardNumberIsValid: aCreditCardNumber .
	
	self assertExpirationYearIsValid: expirationDate.
	
	(aUserName size > 30) ifTrue: [self error: self invalidCreditCardNameErrorDescription ].
	
	^self new initializeNumber: aCreditCardNumber expiring: expirationDate for: aUserName.! !

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 21:03:18'!
FAILURE!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 21:03:18'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 21:03:39' prior: 50951716!
test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			with: (CreditCard number: 1111222233334444
				expiring: (10@1111) 
				for: 'aaaaaaaaaaaaaaa') ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNameErrorDescription.
	
	
	
	
	! !

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 21:03:41'!
FAILURE!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 21:03:42'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/13/2021 21:03:50' prior: 50951766!
test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			with: (CreditCard number: 1111222233334444
				expiring: (10@1111) 
				for: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa') ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNameErrorDescription.
	
	
	
	
	! !

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 21:03:51'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 21:03:51'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 21:03:51'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 21:03:51'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 21:03:51'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 21:03:51'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 21:03:51'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 21:03:51'!
PASSED!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 21:03:51'!
PASSED!

CreditCard number: 1111222244445555 expiring: 10@1998 for: 'Matias'!

CreditCard number: 1111222244445555 expiring: 100@1998 for: 'Matias'!

CreditCard number: 1111222244445555 expiring: 10@19898 for: 'Matias'!

CreditCard number: 1111222244445555 expiring: 10@19898 for: 'Matias'!
!CreditCard class methodsFor: 'assertions' stamp: 'MS 6/13/2021 21:07:10' prior: 50950126!
assertExpirationYearIsValid: expirationDate


	( (expirationDate y numberOfDigitsInBase: 10) isEqualTo: 4 ) ifFalse: [ ^self error: self invalidCreditCardYearErrorDescription ].
! !

CreditCard number: 1111222244445555 expiring: 10@19898 for: 'Matias'!
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 21:08:17' prior: 50951743!
number: aCreditCardNumber expiring: expirationDate for: aUserName   

	self assertCreditCardNumberIsValid: aCreditCardNumber .
	
	self assertExpirationYearIsValid: expirationDate.
	
	self assertUserNameSizeIsValid: aUserName.
	
	(aUserName size > 30) ifTrue: [self error: self invalidCreditCardNameErrorDescription ].
	
	^self new initializeNumber: aCreditCardNumber expiring: expirationDate for: aUserName.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 21:08:32'!
assertUserNameSizeIsValid: aUserName

	(aUserName size > 30) ifTrue: [self error: self invalidCreditCardNameErrorDescription ].
	! !
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/13/2021 21:08:37' prior: 50951867!
number: aCreditCardNumber expiring: expirationDate for: aUserName   

	self assertCreditCardNumberIsValid: aCreditCardNumber .
	
	self assertExpirationYearIsValid: expirationDate.
	
	self assertUserNameSizeIsValid: aUserName.
	
	^self new initializeNumber: aCreditCardNumber expiring: expirationDate for: aUserName.! !

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 21:08:44'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 21:08:44'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 21:08:44'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 21:08:44'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 21:08:44'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 21:08:44'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 21:08:44'!
PASSED!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 21:08:44'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/13/2021 21:08:46'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 21:08:46'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/13/2021 21:08:46'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 21:08:46'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 21:08:46'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/13/2021 21:08:46'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 21:08:46'!
PASSED!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/13/2021 21:08:46'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/13/2021 21:09:33'!
PASSED!

----QUIT----(13 June 2021 21:09:35) CuisUniversity-4532.image priorSource: 19575844!

----STARTUP---- (13 June 2021 21:10:06) as C:\Users\matia\Downloads\windows64\windows64\CuisUniversity-4532.image!


----QUIT----(13 June 2021 21:10:10) CuisUniversity-4532.image priorSource: 19850217!

----STARTUP---- (14 June 2021 18:50:50) as C:\Users\matia\Downloads\windows64\windows64\CuisUniversity-4532.image!

!CreditCard class methodsFor: 'assertions' stamp: 'MS 6/14/2021 18:56:33' prior: 50951856!
assertExpirationYearIsValid: expirationDate


	( (expirationDate y numberOfDigitsInBase: 10) isEqualTo: 4 ) ifFalse: [ ^self error: self invalidCreditCardYearErrorDescription ].
! !

FixedGregorianDate.!

FixedGregorianDate today!
!CreditCard methodsFor: 'nil' stamp: 'MS 6/14/2021 19:01:26'!
isExpiredOn: aGregorianMonthOfYear

	
	

	! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:02:10' prior: 50951993!
isExpiredOn: aGregorianMonthOfYear

	! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:04:08' prior: 50951998!
isExpiredOn: aGregorianMonthOfYear

	^expirationDate < aGregorianMonthOfYear.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:04:30'!
test09asd
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			with: (CreditCard number: 1111222233334444
				expiring: (10@1111) 
				for: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa') ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNameErrorDescription.
	
	
	
	
	! !

!methodRemoval: CashierTest #test09asd stamp: 'MS 6/14/2021 19:04:44'!
test09asd
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			with: (CreditCard number: 1111222233334444
				expiring: (10@1111) 
				for: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa') ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNameErrorDescription.
	
	
	
	
	!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/14/2021 19:04:47'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/14/2021 19:04:47'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/14/2021 19:04:47'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/14/2021 19:04:47'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/14/2021 19:04:47'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/14/2021 19:04:47'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/14/2021 19:04:47'!
PASSED!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/14/2021 19:04:47'!
PASSED!
!GregorianMonthOfYear class methodsFor: 'instance creation' stamp: 'MS 6/14/2021 19:07:19' prior: 50947361!
yearNumber: aYearNumber monthNumber: aMonthNumber

	^self year: (GregorianYear number: aYearNumber) monthNumber: aMonthNumber! !
!GregorianMonthOfYear class methodsFor: 'instance creation' stamp: 'MS 6/14/2021 19:08:00' prior: 50952075!
yearNumber: aYearNumber monthNumber: aMonthNumber

	^self year: (GregorianYear yearNumber: aYearNumber ) monthNumber: aMonthNumber! !
!GregorianMonthOfYear class methodsFor: 'instance creation' stamp: 'MS 6/14/2021 19:08:23' prior: 50948921!
yearNumber: aYearNumber month: aGregorianMonth

	^self year: (GregorianYear yearNumber: aYearNumber) month: aGregorianMonth! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:09:19' prior: 50950953!
test01CheckoutWithEmptyCartShouldRaiseAnError

	| emptyCart creditCard |
	
	emptyCart := Cart acceptingItemsOf: Dictionary new.
	
	creditCard := CreditCard number: 1111222233334444 expiring: (GregorianMonthOfYear yearNumber: 1998 monthNumber: 10) for: 'Matias'.
	
	self 
		should: [ Cashier new checkout: emptyCart with: creditCard ]
		raise:  Error
		withMessageText: Cashier checkoutWithEmptyCartErrorMessage.
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:09:23' prior: 50951004!
test02CheckoutCartWithOneItemShouldReturnCartTotalValue

	| cart catalog creditCard |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	
	creditCard := CreditCard number: 1111222233334444 expiring: (GregorianMonthOfYear yearNumber: 1998 monthNumber: 10) for: 'Matias'.
	
	self assert: (Cashier new checkout: cart with: creditCard ) equals: 10.
	
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:09:27' prior: 50950936!
test03CheckoutCartWithManyItemShouldReturnCartTotalValue

	| cart catalog creditCard |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	creditCard := CreditCard number: 1111222233334444 expiring: (GregorianMonthOfYear yearNumber: 1998 monthNumber: 10) for: 'Matias'.
	
	self assert: (Cashier new checkout: cart with: creditCard ) equals: 30.
	
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:09:33' prior: 50950899!
test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: 123456 expiring: (GregorianMonthOfYear yearNumber: 1998 monthNumber: 10) for: 'Matias') ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberLengthErrorDescription.
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:09:38' prior: 50950968!
test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: -1111222233334444 expiring: (GregorianMonthOfYear yearNumber: 1998 monthNumber: 10) for: 'Matias') ]
		raise:  Error
		withMessageText: CreditCard creditCardNumberMustBePositiveErrorDescription.
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:09:41' prior: 50950986!
test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: 1.2 expiring: (GregorianMonthOfYear yearNumber: 1998 monthNumber: 10) for: 'Matias') ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberTypeErrorDescription.
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:09:46' prior: 50950917!
test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			with: (CreditCard number: 1111222233334444 
				expiring: (GregorianMonthOfYear yearNumber: 1998 monthNumber: 10) for: 'Matias') ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardYearErrorDescription.
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:09:52' prior: 50951793!
test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			with: (CreditCard number: 1111222233334444
				expiring: (GregorianMonthOfYear yearNumber: 1998 monthNumber: 10) 
				for: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa') ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNameErrorDescription.
	
	
	
	
	! !
!CreditCard methodsFor: 'instance creation' stamp: 'MS 6/14/2021 19:10:21' prior: 50951523!
initializeNumber: aCreditCardNumber expiring: aGregorianMonthOfYear for: aUserName
	
	creditCardNumber := aCreditCardNumber.
	
	expirationDate := aGregorianMonthOfYear.
	
	userName := aUserName.
	! !
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/14/2021 19:10:36' prior: 50951891!
number: aCreditCardNumber expiring: aGregorianMonthOfYear for: aUserName   

	self assertCreditCardNumberIsValid: aCreditCardNumber .
	
	self assertExpirationYearIsValid: aGregorianMonthOfYear.
	
	self assertUserNameSizeIsValid: aUserName.
	
	^self new initializeNumber: aCreditCardNumber expiring: aGregorianMonthOfYear for: aUserName.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/14/2021 19:10:57' prior: 50952259!
number: aCreditCardNumber expiring: anExpirationDate for: aUserName   

	self assertCreditCardNumberIsValid: aCreditCardNumber .
	
	self assertExpirationYearIsValid: anExpirationDate.
	
	self assertUserNameSizeIsValid: aUserName.
	
	^self new initializeNumber: aCreditCardNumber expiring: anExpirationDate for: aUserName.! !

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/14/2021 19:11:03'!
ERROR!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/14/2021 19:11:03'!
ERROR!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/14/2021 19:11:03'!
ERROR!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/14/2021 19:11:03'!
FAILURE!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/14/2021 19:11:03'!
FAILURE!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/14/2021 19:11:03'!
FAILURE!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/14/2021 19:11:03'!
FAILURE!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/14/2021 19:11:03'!
FAILURE!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/14/2021 19:11:05'!
ERROR!

----QUIT----(14 June 2021 19:11:33) CuisUniversity-4532.image priorSource: 19850420!

----STARTUP---- (14 June 2021 19:12:58) as C:\Users\matia\Downloads\windows64\windows64UltimoEj\CuisUniversity-4532.image!


!classRemoval: #TransferNet stamp: 'MS 6/14/2021 19:13:07'!
Object subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Transfer stamp: 'MS 6/14/2021 19:13:08'!
Object subclass: #Transfer
	instanceVariableNames: 'senderLeg receiverLeg value depositLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Withdraw stamp: 'MS 6/14/2021 19:13:08'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #SenderLeg stamp: 'MS 6/14/2021 19:13:08'!
TransferLeg subclass: #SenderLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceiverLeg stamp: 'MS 6/14/2021 19:13:08'!
TransferLeg subclass: #ReceiverLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferLeg stamp: 'MS 6/14/2021 19:13:09'!
AccountTransaction subclass: #TransferLeg
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Deposit stamp: 'MS 6/14/2021 19:13:09'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTransaction stamp: 'MS 6/14/2021 19:13:09'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountSummary stamp: 'MS 6/14/2021 19:13:09'!
Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccount stamp: 'MS 6/14/2021 19:13:09'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Portfolio stamp: 'MS 6/14/2021 19:13:10'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Account stamp: 'MS 6/14/2021 19:13:10'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccountTest stamp: 'MS 6/14/2021 19:13:10'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioTest stamp: 'MS 6/14/2021 19:13:10'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----End fileIn of C:\Users\matia\Downloads\windows64\windows64UltimoEj\TusLibros.st----!

!classRemoval: #PointsPortableObject stamp: 'MS 6/14/2021 19:13:38'!
PortableObject subclass: #PointsPortableObject
	instanceVariableNames: 'points'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #NoPointsPortableObject stamp: 'MS 6/14/2021 19:13:38'!
PortableObject subclass: #NoPointsPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #PortableObject stamp: 'MS 6/14/2021 19:13:38'!
StageObject subclass: #PortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #Door stamp: 'MS 6/14/2021 19:13:39'!
StageObject subclass: #Door
	instanceVariableNames: 'key state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #StageObject stamp: 'MS 6/14/2021 19:13:39'!
Object subclass: #StageObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #PlayableCharacter stamp: 'MS 6/14/2021 19:13:39'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'name backpack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #OpenedDoorState stamp: 'MS 6/14/2021 19:13:39'!
DoorState subclass: #OpenedDoorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #KeyClosedDoorState stamp: 'MS 6/14/2021 19:13:40'!
DoorState subclass: #KeyClosedDoorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #ClosedDoorState stamp: 'MS 6/14/2021 19:13:40'!
DoorState subclass: #ClosedDoorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #DoorState stamp: 'MS 6/14/2021 19:13:40'!
Object subclass: #DoorState
	instanceVariableNames: 'door'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #Backpack stamp: 'MS 6/14/2021 19:13:40'!
Object subclass: #Backpack
	instanceVariableNames: 'weightCapacity gamePointsCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #DoorTest stamp: 'MS 6/14/2021 19:13:40'!
TestCase subclass: #DoorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #BackpackTest stamp: 'MS 6/14/2021 19:13:41'!
TestCase subclass: #BackpackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/14/2021 19:13:43'!
ERROR!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/14/2021 19:13:43'!
ERROR!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/14/2021 19:13:43'!
ERROR!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/14/2021 19:13:43'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/14/2021 19:13:43'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/14/2021 19:13:43'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/14/2021 19:13:43'!
FAILURE!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/14/2021 19:13:43'!
FAILURE!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/14/2021 19:13:45'!
ERROR!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/14/2021 19:14:03'!
ERROR!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/14/2021 19:14:03'!
ERROR!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/14/2021 19:14:03'!
ERROR!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/14/2021 19:14:03'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/14/2021 19:14:03'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/14/2021 19:14:03'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/14/2021 19:14:03'!
FAILURE!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/14/2021 19:14:03'!
FAILURE!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/14/2021 19:14:04'!
ERROR!
!CreditCard class methodsFor: 'assertions' stamp: 'MS 6/14/2021 19:14:59' prior: 50926283!
assertExpirationYearIsValid: aGregorianMonthOfYear


	( (aGregorianMonthOfYear yearNumber numberOfDigitsInBase: 10) isEqualTo: 4 ) ifFalse: [ ^self error: self invalidCreditCardYearErrorDescription ].
! !

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/14/2021 19:15:01'!
ERROR!

aGregorianMonthOfYear yearNumber!

aGregorianMonthOfYear year!

aGregorianMonthOfYear!

aGregorianMonthOfYear year yearNumber!

aGregorianMonthOfYear yearNumber!

aGregorianMonthOfYear year!

aGregorianMonthOfYear year yearNumber!

aGregorianMonthOfYear year!

( aGregorianMonthOfYear year ) yearNumber!

( aGregorianMonthOfYear year ) !

aGregorianMonthOfYear!

( aGregorianMonthOfYear year ) number!
!CreditCard class methodsFor: 'assertions' stamp: 'MS 6/14/2021 19:19:44' prior: 50926492!
assertExpirationYearIsValid: aGregorianMonthOfYear


	( (aGregorianMonthOfYear year number numberOfDigitsInBase: 10) isEqualTo: 4 ) ifFalse: [ ^self error: self invalidCreditCardYearErrorDescription ].
! !

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/14/2021 19:19:45'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/14/2021 19:19:56'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/14/2021 19:19:56'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/14/2021 19:19:56'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/14/2021 19:19:56'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/14/2021 19:19:56'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/14/2021 19:19:56'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/14/2021 19:19:56'!
FAILURE!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/14/2021 19:19:56'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/14/2021 19:19:56'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'MS 6/14/2021 19:20:36' prior: 50926180!
checkout: aCart with: aCreditCard  
	
	(aCart isEmpty) ifTrue: [ ^self error: self class checkoutWithEmptyCartErrorMessage ].
	
	"aCreditCard isExpiredOn: aGre."
	
	^aCart totalValue.
	
	
	! !

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/14/2021 19:20:45'!
FAILURE!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/14/2021 19:20:45'!
FAILURE!

(aGregorianMonthOfYear year number numberOfDigitsInBase: 10)!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:23:02' prior: 50926051!
test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			with: (CreditCard number: 1111222233334444 
				expiring: (GregorianMonthOfYear yearNumber: 19988 monthNumber: 10) for: 'Matias') ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardYearErrorDescription.
	
	
	
	
	! !

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/14/2021 19:23:03'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/14/2021 19:23:03'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/14/2021 19:23:03'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/14/2021 19:23:03'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/14/2021 19:23:03'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/14/2021 19:23:03'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/14/2021 19:23:03'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/14/2021 19:23:03'!
PASSED!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/14/2021 19:23:03'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:24:07'!
test09CheckOutWithExpiredCardShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			with: (CreditCard number: 1111222233334444
				expiring: (GregorianMonthOfYear yearNumber: 1998 monthNumber: 10) 
				for: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa') ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNameErrorDescription.
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:24:39' prior: 50926641!
test09CheckOutWithExpiredCardShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			with: (CreditCard number: 1111222233334444
				expiring: (GregorianMonthOfYear yearNumber: 1998 monthNumber: 10) 
				for: 'Matias') ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNameErrorDescription.
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:25:43' prior: 50926662!
test09CheckOutWithExpiredCardShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			with: (CreditCard number: 1111222233334444
				expiring: (GregorianMonthOfYear yearNumber: 1998 monthNumber: 10) 
				for: 'Matias') ]
		raise:  Error
		withMessageText: Cashier expiredCreditCardErrorMessage.
	
	
	
	
	! !
!Cashier methodsFor: 'checkout' stamp: 'MS 6/14/2021 19:26:03' prior: 50926566!
checkout: aCart with: aCreditCard  
	
	(aCart isEmpty) ifTrue: [ ^self error: self class checkoutWithEmptyCartErrorMessage ].
	
	"aCreditCard isExpiredOn: aGre."
	
	^aCart totalValue.
	
	
	! !
!Cashier methodsFor: 'checkout' stamp: 'MS 6/14/2021 19:30:18'!
checkout: aCart with: aCreditCard xxx: purchaseGregorianMonthOfYear   
	
	(aCart isEmpty) ifTrue: [ ^self error: self class checkoutWithEmptyCartErrorMessage ].
	
	"aCreditCard isExpiredOn: aGre."
	
	^aCart totalValue.
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:30:18' prior: 50925960!
test02CheckoutCartWithOneItemShouldReturnCartTotalValue

	| cart catalog creditCard |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	
	creditCard := CreditCard number: 1111222233334444 expiring: (GregorianMonthOfYear yearNumber: 1998 monthNumber: 10) for: 'Matias'.
	
	self assert: (Cashier new checkout: cart with: creditCard xxx: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 4) ) equals: 10.
	
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:30:18' prior: 50926586!
test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			with: (CreditCard number: 1111222233334444 
				expiring: (GregorianMonthOfYear yearNumber: 19988 monthNumber: 10) for: 'Matias') xxx: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 4) ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardYearErrorDescription.
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:30:18' prior: 50926013!
test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: -1111222233334444 expiring: (GregorianMonthOfYear yearNumber: 1998 monthNumber: 10) for: 'Matias') xxx: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 4) ]
		raise:  Error
		withMessageText: CreditCard creditCardNumberMustBePositiveErrorDescription.
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:30:18' prior: 50926071!
test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			with: (CreditCard number: 1111222233334444
				expiring: (GregorianMonthOfYear yearNumber: 1998 monthNumber: 10) 
				for: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa') xxx: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 4) ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNameErrorDescription.
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:30:18' prior: 50926032!
test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: 1.2 expiring: (GregorianMonthOfYear yearNumber: 1998 monthNumber: 10) for: 'Matias') xxx: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 4) ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberTypeErrorDescription.
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:30:18' prior: 50926682!
test09CheckOutWithExpiredCardShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			with: (CreditCard number: 1111222233334444
				expiring: (GregorianMonthOfYear yearNumber: 1998 monthNumber: 10) 
				for: 'Matias') xxx: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 4) ]
		raise:  Error
		withMessageText: Cashier expiredCreditCardErrorMessage.
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:30:18' prior: 50925976!
test03CheckoutCartWithManyItemShouldReturnCartTotalValue

	| cart catalog creditCard |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	creditCard := CreditCard number: 1111222233334444 expiring: (GregorianMonthOfYear yearNumber: 1998 monthNumber: 10) for: 'Matias'.
	
	self assert: (Cashier new checkout: cart with: creditCard xxx: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 4) ) equals: 30.
	
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:30:18' prior: 50925994!
test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: 123456 expiring: (GregorianMonthOfYear yearNumber: 1998 monthNumber: 10) for: 'Matias') xxx: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 4) ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberLengthErrorDescription.
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:30:18' prior: 50925944!
test01CheckoutWithEmptyCartShouldRaiseAnError

	| emptyCart creditCard |
	
	emptyCart := Cart acceptingItemsOf: Dictionary new.
	
	creditCard := CreditCard number: 1111222233334444 expiring: (GregorianMonthOfYear yearNumber: 1998 monthNumber: 10) for: 'Matias'.
	
	self 
		should: [ Cashier new checkout: emptyCart with: creditCard xxx: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 4) ]
		raise:  Error
		withMessageText: Cashier checkoutWithEmptyCartErrorMessage.
	
	! !

!methodRemoval: Cashier #checkout:with: stamp: 'MS 6/14/2021 19:30:18'!
checkout: aCart with: aCreditCard  
	
	(aCart isEmpty) ifTrue: [ ^self error: self class checkoutWithEmptyCartErrorMessage ].
	
	"aCreditCard isExpiredOn: aGre."
	
	^aCart totalValue.
	
	
	!
!Cashier methodsFor: 'checkout' stamp: 'MS 6/14/2021 19:30:54' prior: 50926710!
checkout: aCart with: aCreditCard xxx: purchaseGregorianMonthOfYear   
	
	(aCart isEmpty) ifTrue: [ ^self error: self class checkoutWithEmptyCartErrorMessage ].
	
	(aCreditCard isExpiredOn: purchaseGregorianMonthOfYear) ifTrue: [^self error: Cashier expiredCreditCardErrorMessage].
	
	^aCart totalValue.
	
	
	! !
!Cashier methodsFor: 'checkout' stamp: 'MS 6/14/2021 19:31:00' prior: 50926916!
checkout: aCart with: aCreditCard xxx: purchaseGregorianMonthOfYear   
	
	(aCart isEmpty) ifTrue: [ ^self error: self class checkoutWithEmptyCartErrorMessage ].
	
	(aCreditCard isExpiredOn: purchaseGregorianMonthOfYear) ifTrue: [ ^self error: Cashier expiredCreditCardErrorMessage ].
	
	^aCart totalValue.
	
	
	! !
!Cashier class methodsFor: 'nil' stamp: 'MS 6/14/2021 19:31:10'!
expiredCreditCardErrorMessage

	^'Credit card is expired'.! !

!testRun: #CashierTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'MS 6/14/2021 19:31:20'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/14/2021 19:31:20'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/14/2021 19:31:20'!
ERROR!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/14/2021 19:31:21'!
ERROR!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/14/2021 19:31:21'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/14/2021 19:31:21'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/14/2021 19:31:21'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/14/2021 19:31:21'!
PASSED!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/14/2021 19:31:21'!
PASSED!

!testRun: #CashierTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'MS 6/14/2021 19:31:21'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/14/2021 19:31:27'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:31:57' prior: 50926890!
test01CheckoutWithEmptyCartShouldRaiseAnError

	| emptyCart creditCard |
	
	emptyCart := Cart acceptingItemsOf: Dictionary new.
	
	creditCard := CreditCard number: 1111222233334444 expiring: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 5) for: 'Matias'.
	
	self 
		should: [ Cashier new checkout: emptyCart with: creditCard xxx: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 4) ]
		raise:  Error
		withMessageText: Cashier checkoutWithEmptyCartErrorMessage.
	
	! !

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/14/2021 19:31:59'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/14/2021 19:31:59'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/14/2021 19:31:59'!
ERROR!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/14/2021 19:31:59'!
ERROR!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/14/2021 19:31:59'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/14/2021 19:31:59'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/14/2021 19:31:59'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/14/2021 19:31:59'!
PASSED!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/14/2021 19:31:59'!
PASSED!

!testRun: #CashierTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'MS 6/14/2021 19:31:59'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:32:06' prior: 50926721!
test02CheckoutCartWithOneItemShouldReturnCartTotalValue

	| cart catalog creditCard |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	
	creditCard := CreditCard number: 1111222233334444 expiring: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 5) for: 'Matias'.
	
	self assert: (Cashier new checkout: cart with: creditCard xxx: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 4) ) equals: 10.
	
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:32:13' prior: 50926849!
test03CheckoutCartWithManyItemShouldReturnCartTotalValue

	| cart catalog creditCard |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	creditCard := CreditCard number: 1111222233334444 expiring: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 5) for: 'Matias'.
	
	self assert: (Cashier new checkout: cart with: creditCard xxx: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 4) ) equals: 30.
	
	
	
	
	
	! !

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/14/2021 19:32:14'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/14/2021 19:32:14'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/14/2021 19:32:14'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/14/2021 19:32:14'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/14/2021 19:32:14'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/14/2021 19:32:14'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/14/2021 19:32:14'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/14/2021 19:32:14'!
PASSED!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/14/2021 19:32:14'!
PASSED!

!testRun: #CashierTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'MS 6/14/2021 19:32:14'!
PASSED!
!Cashier methodsFor: 'checkout' stamp: 'MS 6/14/2021 19:34:53' prior: 50926929!
checkout: aCart with: aCreditCard xxx: purchaseGregorianMonthOfYear   
	
	(aCart isEmpty) ifTrue: [ ^self error: self class checkoutWithEmptyCartErrorMessage ].
	
	(aCreditCard isExpiredOn: purchaseGregorianMonthOfYear) ifTrue: [ ^self error: Cashier expiredCreditCardErrorMessage ].
	
	" aca deberia comunicarse con el merchant processor ".
	
	^aCart totalValue.
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:50:52'!
test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook
		
	| cart catalog salesBook |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	salesBook := OrderedCollection new.
	
	Cashier new 
		checkout: cart 
		with: (CreditCard number: 1111222233334444
				expiring: (GregorianMonthOfYear yearNumber: 1998 monthNumber: 10) 
				for: 'Matias') 
		xxx: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 4).
		
	self assert: (salesBook includes: salesBook).
	
	
	
	
	! !
!Cashier methodsFor: 'checkout' stamp: 'MS 6/14/2021 19:51:57'!
checkout: aCart with: aCreditCard xxx: purchaseGregorianMonthOfYear yyy: aSalesbook    
	
	(aCart isEmpty) ifTrue: [ ^self error: self class checkoutWithEmptyCartErrorMessage ].
	
	(aCreditCard isExpiredOn: purchaseGregorianMonthOfYear) ifTrue: [ ^self error: Cashier expiredCreditCardErrorMessage ].
	
	" aca deberia comunicarse con el merchant processor ".
	
	^aCart totalValue.
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:51:57' prior: 50926828!
test09CheckOutWithExpiredCardShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			with: (CreditCard number: 1111222233334444
				expiring: (GregorianMonthOfYear yearNumber: 1998 monthNumber: 10) 
				for: 'Matias') xxx: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 4) yyy: OrderedCollection new ]
		raise:  Error
		withMessageText: Cashier expiredCreditCardErrorMessage.
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:51:57' prior: 50926988!
test01CheckoutWithEmptyCartShouldRaiseAnError

	| emptyCart creditCard |
	
	emptyCart := Cart acceptingItemsOf: Dictionary new.
	
	creditCard := CreditCard number: 1111222233334444 expiring: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 5) for: 'Matias'.
	
	self 
		should: [ Cashier new checkout: emptyCart with: creditCard xxx: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 4) yyy: OrderedCollection new ]
		raise:  Error
		withMessageText: Cashier checkoutWithEmptyCartErrorMessage.
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:51:57' prior: 50926784!
test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			with: (CreditCard number: 1111222233334444
				expiring: (GregorianMonthOfYear yearNumber: 1998 monthNumber: 10) 
				for: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa') xxx: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 4) yyy: OrderedCollection new ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNameErrorDescription.
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:51:57' prior: 50927136!
test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook
		
	| cart catalog salesBook |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	salesBook := OrderedCollection new.
	
	Cashier new 
		checkout: cart 
		with: (CreditCard number: 1111222233334444
				expiring: (GregorianMonthOfYear yearNumber: 1998 monthNumber: 10) 
				for: 'Matias') 
		xxx: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 4) yyy: OrderedCollection new.
		
	self assert: (salesBook includes: salesBook).
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:51:57' prior: 50926807!
test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: 1.2 expiring: (GregorianMonthOfYear yearNumber: 1998 monthNumber: 10) for: 'Matias') xxx: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 4) yyy: OrderedCollection new ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberTypeErrorDescription.
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:51:57' prior: 50926869!
test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: 123456 expiring: (GregorianMonthOfYear yearNumber: 1998 monthNumber: 10) for: 'Matias') xxx: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 4) yyy: OrderedCollection new ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberLengthErrorDescription.
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:51:57' prior: 50927063!
test03CheckoutCartWithManyItemShouldReturnCartTotalValue

	| cart catalog creditCard |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	creditCard := CreditCard number: 1111222233334444 expiring: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 5) for: 'Matias'.
	
	self assert: (Cashier new checkout: cart with: creditCard xxx: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 4) yyy: OrderedCollection new ) equals: 30.
	
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:51:57' prior: 50926762!
test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart with: (CreditCard number: -1111222233334444 expiring: (GregorianMonthOfYear yearNumber: 1998 monthNumber: 10) for: 'Matias') xxx: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 4) yyy: OrderedCollection new ]
		raise:  Error
		withMessageText: CreditCard creditCardNumberMustBePositiveErrorDescription.
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:51:57' prior: 50927044!
test02CheckoutCartWithOneItemShouldReturnCartTotalValue

	| cart catalog creditCard |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	
	creditCard := CreditCard number: 1111222233334444 expiring: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 5) for: 'Matias'.
	
	self assert: (Cashier new checkout: cart with: creditCard xxx: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 4) yyy: OrderedCollection new ) equals: 10.
	
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:51:57' prior: 50926740!
test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			with: (CreditCard number: 1111222233334444 
				expiring: (GregorianMonthOfYear yearNumber: 19988 monthNumber: 10) for: 'Matias') xxx: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 4) yyy: OrderedCollection new ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardYearErrorDescription.
	
	
	
	
	! !

!methodRemoval: Cashier #checkout:with:xxx: stamp: 'MS 6/14/2021 19:51:57'!
checkout: aCart with: aCreditCard xxx: purchaseGregorianMonthOfYear   
	
	(aCart isEmpty) ifTrue: [ ^self error: self class checkoutWithEmptyCartErrorMessage ].
	
	(aCreditCard isExpiredOn: purchaseGregorianMonthOfYear) ifTrue: [ ^self error: Cashier expiredCreditCardErrorMessage ].
	
	" aca deberia comunicarse con el merchant processor ".
	
	^aCart totalValue.
	
	
	!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/14/2021 19:52:09'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/14/2021 19:52:09'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/14/2021 19:52:09'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/14/2021 19:52:09'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/14/2021 19:52:09'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/14/2021 19:52:09'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/14/2021 19:52:09'!
PASSED!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/14/2021 19:52:09'!
PASSED!

!testRun: #CashierTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'MS 6/14/2021 19:52:09'!
PASSED!

!testRun: #CashierTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'MS 6/14/2021 19:52:09'!
ERROR!

!testRun: #CashierTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'MS 6/14/2021 19:52:09'!
ERROR!

!testRun: #CashierTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'MS 6/14/2021 19:52:23'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:52:28' prior: 50927237!
test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook
		
	| cart catalog salesBook |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	salesBook := OrderedCollection new.
	
	Cashier new 
		checkout: cart 
		with: (CreditCard number: 1111222233334444
				expiring: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 10) 
				for: 'Matias') 
		xxx: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 4) yyy: OrderedCollection new.
		
	self assert: (salesBook includes: salesBook).
	
	
	
	
	! !

!testRun: #CashierTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'MS 6/14/2021 19:52:29'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:52:43' prior: 50927448!
test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook
		
	| cart catalog salesBook |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	salesBook := OrderedCollection new.
	
	Cashier new 
		checkout: cart 
		with: (CreditCard number: 1111222233334444
				expiring: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 10) 
				for: 'Matias') 
		xxx: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 4) yyy: OrderedCollection new.
		
	self assert: (salesBook includes: cart totalValue ).
	
	
	
	
	! !

!testRun: #CashierTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'MS 6/14/2021 19:52:47'!
FAILURE!

!testRun: #CashierTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'MS 6/14/2021 19:52:52'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'MS 6/14/2021 19:53:36' prior: 50927156!
checkout: aCart with: aCreditCard xxx: purchaseGregorianMonthOfYear yyy: aSalesbook    
	
	(aCart isEmpty) ifTrue: [ ^self error: self class checkoutWithEmptyCartErrorMessage ].
	
	(aCreditCard isExpiredOn: purchaseGregorianMonthOfYear) ifTrue: [ ^self error: Cashier expiredCreditCardErrorMessage ].
	
	aSalesbook add: aCart totalValue.
	
	^aCart totalValue.
	
	
	! !
!Cashier methodsFor: 'checkout' stamp: 'MS 6/14/2021 19:53:39' prior: 50927504!
checkout: aCart with: aCreditCard xxx: purchaseGregorianMonthOfYear yyy: aSalesbook    
	
	(aCart isEmpty) ifTrue: [ ^self error: self class checkoutWithEmptyCartErrorMessage ].
	
	(aCreditCard isExpiredOn: purchaseGregorianMonthOfYear) ifTrue: [ ^self error: Cashier expiredCreditCardErrorMessage ].
	
	aSalesbook add: aCart totalValue.
	
	^ aCart totalValue.
	
	
	! !

!testRun: #CashierTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'MS 6/14/2021 19:53:40'!
FAILURE!

!testRun: #CashierTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'MS 6/14/2021 19:53:43'!
FAILURE!

!testRun: #CashierTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'MS 6/14/2021 19:53:43'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:54:29' prior: 50927474!
test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook
		
	| cart catalog salesBook |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	salesBook := OrderedCollection new.
	
	Cashier new 
		checkout: cart 
		with: (CreditCard number: 1111222233334444
				expiring: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 10) 
				for: 'Matias') 
		xxx: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 4) yyy: salesBook .
		
	self assert: (salesBook includes: cart totalValue ).
	
	
	
	
	! !

!testRun: #CashierTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'MS 6/14/2021 19:54:32'!
PASSED!

!testRun: #CashierTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'MS 6/14/2021 19:54:34'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'MS 6/14/2021 19:54:38'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'MS 6/14/2021 19:54:38'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'MS 6/14/2021 19:54:38'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'MS 6/14/2021 19:54:38'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'MS 6/14/2021 19:54:38'!
PASSED!

!testRun: #CashierTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'MS 6/14/2021 19:54:38'!
PASSED!

!testRun: #CashierTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'MS 6/14/2021 19:54:38'!
PASSED!

!testRun: #CashierTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/14/2021 19:54:38'!
PASSED!

!testRun: #CashierTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'MS 6/14/2021 19:54:38'!
PASSED!

!testRun: #CashierTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'MS 6/14/2021 19:54:38'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:54:46' prior: 50927545!
test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook
		
	| cart catalog salesBook |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	salesBook := OrderedCollection new.
	
	Cashier new 
		checkout: cart 
		with: (CreditCard number: 1111222233334444
				expiring: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 10) 
				for: 'Matias') 
		xxx: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 4) yyy: salesBook .
		
	self assert: ( salesBook includes: cart totalValue ).
	
	
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 6/14/2021 19:55:17' prior: 50927172!
test09CheckOutWithExpiredCardShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			with: (CreditCard number: 1111222233334444
				expiring: (GregorianMonthOfYear yearNumber: 1998 monthNumber: 10) 
				for: 'Matias') xxx: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 4) yyy: OrderedCollection new]
		raise:  Error
		withMessageText: Cashier expiredCreditCardErrorMessage.
	
	
	
	
	! !

GregorianMonthOfYear yearNumber: 123456 monthNumber: 12!

----QUIT----(14 June 2021 20:12:29) CuisUniversity-4532.image priorSource: 19010605!

----STARTUP---- (15 June 2021 19:15:02) as C:\Users\matia\Downloads\windows64\windows64UltimoEj\CuisUniversity-4532.image!


----QUIT----(15 June 2021 19:15:12) CuisUniversity-4532.image priorSource: 19072233!

----STARTUP---- (16 June 2021 16:01:57) as C:\Applications\CuisUniversity\windows64\windows64\CuisUniversity-4532.image!


----End fileIn of C:\Users\Gabriel\Downloads\TusLibros.st----!

!classRemoval: #MarsRoverWindowLog stamp: 'GDH 6/16/2021 16:07:29'!
Object subclass: #MarsRoverWindowLog
	instanceVariableNames: 'position heading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverLogger stamp: 'GDH 6/16/2021 16:07:29'!
Object subclass: #MarsRoverLogger
	instanceVariableNames: 'contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingWest stamp: 'GDH 6/16/2021 16:07:29'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingSouth stamp: 'GDH 6/16/2021 16:07:29'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingNorth stamp: 'GDH 6/16/2021 16:07:30'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingEast stamp: 'GDH 6/16/2021 16:07:30'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeading stamp: 'GDH 6/16/2021 16:07:30'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRover stamp: 'GDH 6/16/2021 16:07:30'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head headingObservers positionObservers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverWindowLogTest stamp: 'GDH 6/16/2021 16:07:31'!
TestCase subclass: #MarsRoverWindowLogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverTest stamp: 'GDH 6/16/2021 16:07:31'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverLoggerTest stamp: 'GDH 6/16/2021 16:07:31'!
TestCase subclass: #MarsRoverLoggerTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #CreditCard stamp: 'GDH 6/16/2021 16:07:33'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumber expirationDate userName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'GDH 6/16/2021 16:07:34'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'GDH 6/16/2021 16:07:34'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'GDH 6/16/2021 16:07:34'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'GDH 6/16/2021 16:07:34'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #PointsPortableObject stamp: 'GDH 6/16/2021 16:07:42'!
PortableObject subclass: #PointsPortableObject
	instanceVariableNames: 'points'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #NoPointsPortableObject stamp: 'GDH 6/16/2021 16:07:42'!
PortableObject subclass: #NoPointsPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #PortableObject stamp: 'GDH 6/16/2021 16:07:42'!
StageObject subclass: #PortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #Door stamp: 'GDH 6/16/2021 16:07:43'!
StageObject subclass: #Door
	instanceVariableNames: 'key state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #StageObject stamp: 'GDH 6/16/2021 16:07:43'!
Object subclass: #StageObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #PlayableCharacter stamp: 'GDH 6/16/2021 16:07:43'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'name backpack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #OpenedDoorState stamp: 'GDH 6/16/2021 16:07:43'!
DoorState subclass: #OpenedDoorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #KeyClosedDoorState stamp: 'GDH 6/16/2021 16:07:43'!
DoorState subclass: #KeyClosedDoorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #ClosedDoorState stamp: 'GDH 6/16/2021 16:07:44'!
DoorState subclass: #ClosedDoorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #DoorState stamp: 'GDH 6/16/2021 16:07:44'!
Object subclass: #DoorState
	instanceVariableNames: 'door'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #Backpack stamp: 'GDH 6/16/2021 16:07:44'!
Object subclass: #Backpack
	instanceVariableNames: 'weightCapacity gamePointsCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #DoorTest stamp: 'GDH 6/16/2021 16:07:44'!
TestCase subclass: #DoorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #BackpackTest stamp: 'GDH 6/16/2021 16:07:45'!
TestCase subclass: #BackpackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #Trailer stamp: 'GDH 6/16/2021 16:07:47'!
Object subclass: #Trailer
	instanceVariableNames: 'weightCapacity heightCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Solucion'!

!classRemoval: #WorkingNormal stamp: 'GDH 6/16/2021 16:07:47'!
RobotStatus subclass: #WorkingNormal
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Solucion'!

!classRemoval: #SensorsFailure stamp: 'GDH 6/16/2021 16:07:47'!
RobotStatus subclass: #SensorsFailure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Solucion'!

!classRemoval: #OutOfOrder stamp: 'GDH 6/16/2021 16:07:47'!
RobotStatus subclass: #OutOfOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Solucion'!

!classRemoval: #MechanicalFailure stamp: 'GDH 6/16/2021 16:07:48'!
RobotStatus subclass: #MechanicalFailure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Solucion'!

!classRemoval: #RobotStatus stamp: 'GDH 6/16/2021 16:07:48'!
Object subclass: #RobotStatus
	instanceVariableNames: 'robot'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Solucion'!

!classRemoval: #Robot stamp: 'GDH 6/16/2021 16:07:48'!
Object subclass: #Robot
	instanceVariableNames: 'status trailer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Solucion'!

!classRemoval: #ProductB stamp: 'GDH 6/16/2021 16:07:48'!
Product subclass: #ProductB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Solucion'!

!classRemoval: #ProductA stamp: 'GDH 6/16/2021 16:07:48'!
Product subclass: #ProductA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Solucion'!

!classRemoval: #Product stamp: 'GDH 6/16/2021 16:07:49'!
Object subclass: #Product
	instanceVariableNames: 'weight height'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Solucion'!

!classRemoval: #TrailerTest stamp: 'GDH 6/16/2021 16:07:49'!
TestCase subclass: #TrailerTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Solucion'!

!classRemoval: #RobotTest stamp: 'GDH 6/16/2021 16:07:49'!
TestCase subclass: #RobotTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Solucion'!

!classRemoval: #ProductTest stamp: 'GDH 6/16/2021 16:07:49'!
TestCase subclass: #ProductTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Solucion'!

!classRemoval: #Combo2RewardRule stamp: 'GDH 6/16/2021 16:07:52'!
RewardRule subclass: #Combo2RewardRule
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'IngSof1-2019-2C-1Parcial'!

!classRemoval: #Combo1RewardRule stamp: 'GDH 6/16/2021 16:07:52'!
RewardRule subclass: #Combo1RewardRule
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'IngSof1-2019-2C-1Parcial'!

!classRemoval: #RewardRule stamp: 'GDH 6/16/2021 16:07:52'!
Object subclass: #RewardRule
	instanceVariableNames: 'product'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'IngSof1-2019-2C-1Parcial'!

!classRemoval: #CoffeeShopSalesSystem stamp: 'GDH 6/16/2021 16:07:52'!
Object subclass: #CoffeeShopSalesSystem
	instanceVariableNames: 'sales'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'IngSof1-2019-2C-1Parcial'!

!classRemoval: #CoffeeShopReward stamp: 'GDH 6/16/2021 16:07:52'!
Object subclass: #CoffeeShopReward
	instanceVariableNames: 'price quantity product'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'IngSof1-2019-2C-1Parcial'!

!classRemoval: #CoffeeShopProduct stamp: 'GDH 6/16/2021 16:07:53'!
Object subclass: #CoffeeShopProduct
	instanceVariableNames: 'price volume'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'IngSof1-2019-2C-1Parcial'!

!classRemoval: #CoffeeShopSilverCustomer stamp: 'GDH 6/16/2021 16:07:53'!
CoffeeShopCustomerType subclass: #CoffeeShopSilverCustomer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'IngSof1-2019-2C-1Parcial'!

!classRemoval: #CoffeeShopNormalCustomer stamp: 'GDH 6/16/2021 16:07:53'!
CoffeeShopCustomerType subclass: #CoffeeShopNormalCustomer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'IngSof1-2019-2C-1Parcial'!

!classRemoval: #CoffeeShopGoldCustomer stamp: 'GDH 6/16/2021 16:07:53'!
CoffeeShopCustomerType subclass: #CoffeeShopGoldCustomer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'IngSof1-2019-2C-1Parcial'!

!classRemoval: #CoffeeShopCustomerType stamp: 'GDH 6/16/2021 16:07:53'!
Object subclass: #CoffeeShopCustomerType
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'IngSof1-2019-2C-1Parcial'!

!classRemoval: #CoffeeShopCustomer stamp: 'GDH 6/16/2021 16:07:54'!
Object subclass: #CoffeeShopCustomer
	instanceVariableNames: 'name type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'IngSof1-2019-2C-1Parcial'!

!classRemoval: #CoffeeShopTest stamp: 'GDH 6/16/2021 16:07:54'!
TestCase subclass: #CoffeeShopTest
	instanceVariableNames: 'billGates adaLovelace alanKay salesSystem'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'IngSof1-2019-2C-1Parcial'!

!classRemoval: #Fraccion stamp: 'GDH 6/16/2021 16:07:57'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Uno stamp: 'GDH 6/16/2021 16:07:57'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #PositivoMayorAUno stamp: 'GDH 6/16/2021 16:07:58'!
EnteroMenosCeroYUno subclass: #PositivoMayorAUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Negativo stamp: 'GDH 6/16/2021 16:07:58'!
EnteroMenosCeroYUno subclass: #Negativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #EnteroMenosCeroYUno stamp: 'GDH 6/16/2021 16:07:58'!
Entero subclass: #EnteroMenosCeroYUno
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Cero stamp: 'GDH 6/16/2021 16:07:58'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Entero stamp: 'GDH 6/16/2021 16:07:58'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Numero stamp: 'GDH 6/16/2021 16:07:59'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #NumeroTest stamp: 'GDH 6/16/2021 16:07:59'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #AccountTransfer stamp: 'GDH 6/16/2021 16:08:01'!
Object subclass: #AccountTransfer
	instanceVariableNames: 'senderLeg receiverLeg value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Withdraw stamp: 'GDH 6/16/2021 16:08:01'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferSenderLeg stamp: 'GDH 6/16/2021 16:08:01'!
TransferLeg subclass: #TransferSenderLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferReceiverLeg stamp: 'GDH 6/16/2021 16:08:02'!
TransferLeg subclass: #TransferReceiverLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferLeg stamp: 'GDH 6/16/2021 16:08:02'!
AccountTransaction subclass: #TransferLeg
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Deposit stamp: 'GDH 6/16/2021 16:08:02'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTransaction stamp: 'GDH 6/16/2021 16:08:02'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferNetReporter stamp: 'GDH 6/16/2021 16:08:02'!
AccountReporter subclass: #TransferNetReporter
	instanceVariableNames: 'transferNetAccumulated'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountSummaryReporter stamp: 'GDH 6/16/2021 16:08:03'!
AccountReporter subclass: #AccountSummaryReporter
	instanceVariableNames: 'accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountReporter stamp: 'GDH 6/16/2021 16:08:03'!
Object subclass: #AccountReporter
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccount stamp: 'GDH 6/16/2021 16:08:03'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Portfolio stamp: 'GDH 6/16/2021 16:08:03'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Account stamp: 'GDH 6/16/2021 16:08:04'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferTest stamp: 'GDH 6/16/2021 16:08:04'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccountTest stamp: 'GDH 6/16/2021 16:08:04'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioTest stamp: 'GDH 6/16/2021 16:08:04'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountReporterTest stamp: 'GDH 6/16/2021 16:08:04'!
TestCase subclass: #AccountReporterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----End fileIn of C:\Users\Gabriel\Downloads\TusLibros.st----!

!classRenamed: #CashierTest as: #MarketTest stamp: 'GDH 6/16/2021 16:09:07'!
Smalltalk renameClassNamed: #CashierTest as: #MarketTest!

Object subclass: #MarketTestObjectsFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MarketTestObjectsFactory category: 'TusLibros' stamp: 'GDH 6/16/2021 16:09:49'!
Object subclass: #MarketTestObjectsFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MarketTestObjectsFactory category: 'TusLibros' stamp: 'GDH 6/16/2021 16:16:24'!
Object subclass: #MarketTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MarketTestObjectsFactory methodsFor: 'no messages' stamp: 'GDH 6/16/2021 16:16:23' overrides: 16896425!
initialize
	
	today := DateAndTime now.! !
!MarketTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 16:16:53'!
validAndNotExpiredCreditCard
	
	CreditCard new! !
!MarketTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 16:18:44' prior: 50928104!
validAndNotExpiredCreditCard
	
	^CreditCard number: 1111222233334444 expiring: (GregorianMonthOfYear newFrom: today) for: 'Matias'.! !
!MarketTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 16:21:29' prior: 50928109!
validAndNotExpiredCreditCard
	
	^CreditCard number: 1111222233334444 
				expiring: (GregorianMonthOfYear yearNumber: today yearNumber monthNumber: today monthIndex ) 
				for: 'Matias'.! !
!MarketTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 16:21:37' prior: 50928117!
validAndNotExpiredCreditCard
	
	^CreditCard number: 1111222233334444 
				expiring: (GregorianMonthOfYear yearNumber: today yearNumber + 1 monthNumber: today monthIndex ) 
				for: 'Matias'.! !
!MarketTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 16:22:32'!
creditCardWithInvalidName
	
	^CreditCard number: 1111222233334444 
				expiring: (GregorianMonthOfYear yearNumber: today yearNumber + 1 monthNumber: today monthIndex ) 
				for: 'Matias'.! !
!MarketTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 16:22:50' prior: 50928136!
creditCardWithInvalidName
	
	^CreditCard number: 1111222233334444 
				expiring: (GregorianMonthOfYear yearNumber: today yearNumber + 1 monthNumber: today monthIndex ) 
				for: 'Este es un nombre muy largo para una tarjeta'.! !
!MarketTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 16:23:08'!
creditCardWithInvalidNumber
	
	^CreditCard number: 111122223333444455556666 
				expiring: (GregorianMonthOfYear yearNumber: today yearNumber + 1 monthNumber: today monthIndex ) 
				for: 'Este es un nombre muy largo para una tarjeta'.! !
!MarketTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 16:24:52'!
creditCardValidButExpired
	
	^CreditCard number: 1111222233334444
				expiring: (GregorianMonthOfYear yearNumber: today yearNumber monthNumber: today monthIndex - 1) 
				for: 'Matias Sandacz'.! !
!MarketTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 16:25:00' prior: 50928146!
creditCardWithInvalidName
	
	^CreditCard number: 1111222233334444 
				expiring: (GregorianMonthOfYear yearNumber: today yearNumber + 1 monthNumber: today monthIndex ) 
				for: 'Gabriel Hayon'.! !
!MarketTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 16:25:04' prior: 50928178!
creditCardWithInvalidName
	
	^CreditCard number: 1111222233334444 
				expiring: (GregorianMonthOfYear yearNumber: today yearNumber + 1 monthNumber: today monthIndex ) 
				for: 'Este es un nombre muy largo para una tarjeta'.! !
!MarketTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 16:25:12' prior: 50928157!
creditCardWithInvalidNumber
	
	^CreditCard number: 111122223333444455556666 
				expiring: (GregorianMonthOfYear yearNumber: today yearNumber + 1 monthNumber: today monthIndex ) 
				for: 'Gabriel Hayon'.! !
!MarketTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 16:25:51'!
creaditCardValidAndNotExpired
	
	^CreditCard number: 1111222233334444 
				expiring: (GregorianMonthOfYear yearNumber: today yearNumber + 1 monthNumber: today monthIndex ) 
				for: 'Matias'.! !

!methodRemoval: MarketTestObjectsFactory #validAndNotExpiredCreditCard stamp: 'GDH 6/16/2021 16:25:51'!
validAndNotExpiredCreditCard
	
	^CreditCard number: 1111222233334444 
				expiring: (GregorianMonthOfYear yearNumber: today yearNumber + 1 monthNumber: today monthIndex ) 
				for: 'Matias'.!
!MarketTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 16:26:01'!
creditCardValidAndNotExpired
	
	^CreditCard number: 1111222233334444 
				expiring: (GregorianMonthOfYear yearNumber: today yearNumber + 1 monthNumber: today monthIndex ) 
				for: 'Matias'.! !

!methodRemoval: MarketTestObjectsFactory #creaditCardValidAndNotExpired stamp: 'GDH 6/16/2021 16:26:01'!
creaditCardValidAndNotExpired
	
	^CreditCard number: 1111222233334444 
				expiring: (GregorianMonthOfYear yearNumber: today yearNumber + 1 monthNumber: today monthIndex ) 
				for: 'Matias'.!
!MarketTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 16:26:07' prior: 50928228!
creditCardValidAndNotExpired
	
	^CreditCard number: 1111222233334444 
				expiring: (GregorianMonthOfYear yearNumber: today yearNumber + 1 monthNumber: today monthIndex ) 
				for: 'Matias Hayon'.! !

TestCase subclass: #MarketTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MarketTest category: 'TusLibros' stamp: 'GDH 6/16/2021 16:27:15'!
TestCase subclass: #MarketTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 16:27:33' overrides: 16927572!
setUp
	
	testObjectsFactory := MarketTestObjectsFactory new.! !
!MarketTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 16:30:32'!
defaultCatalog
	
	| catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	^catalog ! !
!MarketTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 16:31:11'!
createCartWithDefaultCatalog
	
	^Cart acceptingItemsOf: self defaultCatalog .! !
!MarketTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 16:31:31'!
cartWithDefaultCatalog
	
	^Cart acceptingItemsOf: self defaultCatalog .! !

!methodRemoval: MarketTestObjectsFactory #createCartWithDefaultCatalog stamp: 'GDH 6/16/2021 16:31:31'!
createCartWithDefaultCatalog
	
	^Cart acceptingItemsOf: self defaultCatalog .!
!MarketTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 16:33:49'!
today
	
	^GregorianMonthOfYear yearNumber: today yearNumber  monthNumber: today monthIndex! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 16:34:42' prior: 50927613!
test01CheckoutWithEmptyCartShouldRaiseAnError

	| emptyCart creditCard |
	
	emptyCart := testObjectsFactory cartWithDefaultCatalog .
	
	creditCard := testObjectsFactory creditCardValidAndNotExpired .
	
	self 
		should: [ Cashier new checkout: emptyCart with: creditCard xxx: testObjectsFactory today yyy: OrderedCollection new ]
		raise:  Error
		withMessageText: Cashier checkoutWithEmptyCartErrorMessage.
	
	! !
!MarketTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 16:35:16'!
emptySalesbook
	
	^OrderedCollection new.! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 16:35:27' prior: 50928304!
test01CheckoutWithEmptyCartShouldRaiseAnError

	| emptyCart creditCard |
	
	emptyCart := testObjectsFactory cartWithDefaultCatalog .
	
	creditCard := testObjectsFactory creditCardValidAndNotExpired .
	
	self 
		should: [ Cashier new checkout: emptyCart with: creditCard xxx: testObjectsFactory today yyy: testObjectsFactory emptySalesbook ]
		raise:  Error
		withMessageText: Cashier checkoutWithEmptyCartErrorMessage.
	
	! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 16:37:05' prior: 50927632!
test02CheckoutCartWithOneItemShouldReturnCartTotalValue

	| cart creditCard |
		
	cart := testObjectsFactory cartWithDefaultCatalog .
	cart add: '1'.
	
	creditCard := testObjectsFactory creditCardValidAndNotExpired .
	
	self assert: (Cashier new 
				checkout: cart 
				with: creditCard 
				xxx: testObjectsFactory today 
				yyy: testObjectsFactory emptySalesbook ) 
		equals: 10.
	
	
	
	
	
	! !

!testRun: #MarketTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 16:37:05'!
FAILURE!

!testRun: #MarketTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 16:37:10'!
FAILURE!

!testRun: #MarketTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'GDH 6/16/2021 16:37:18'!
PASSED!

!testRun: #MarketTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 16:37:20'!
FAILURE!

!testRun: #MarketTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 16:37:20'!
FAILURE!

testObjectsFactory defaultCatalog !
!Cart methodsFor: 'value' stamp: 'GDH 6/16/2021 16:40:04' prior: 50927885!
totalValue

	^items values sum.
	"encuentra el total "! !

!testRun: #MarketTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 16:40:14'!
ERROR!
!Cart methodsFor: 'value' stamp: 'GDH 6/16/2021 16:40:30' prior: 50928377!
totalValue

	^catalog values sum.
	"encuentra el total "! !
!Cart methodsFor: 'value' stamp: 'GDH 6/16/2021 16:44:46' prior: 50928385!
totalValue

	^(items collect: [ :anItem | catalog at: anItem ]) sum.! !

!testRun: #MarketTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 16:44:49'!
PASSED!

!testRun: #MarketTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'GDH 6/16/2021 16:44:56'!
PASSED!

!testRun: #MarketTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 16:44:56'!
PASSED!

!testRun: #MarketTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 16:44:56'!
PASSED!

!testRun: #MarketTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 16:44:56'!
PASSED!

!testRun: #MarketTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 16:44:56'!
PASSED!

!testRun: #MarketTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 16:44:56'!
PASSED!

!testRun: #MarketTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'GDH 6/16/2021 16:44:56'!
PASSED!

!testRun: #MarketTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/16/2021 16:44:56'!
PASSED!

!testRun: #MarketTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'GDH 6/16/2021 16:44:56'!
PASSED!

!testRun: #MarketTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'GDH 6/16/2021 16:44:56'!
PASSED!
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 16:45:59' prior: 50927651!
test03CheckoutCartWithManyItemShouldReturnCartTotalValue

	| cart creditCard |
	
	cart := testObjectsFactory cartWithDefaultCatalog .
	cart add: '1'.
	cart add: '2'.
	
	creditCard := testObjectsFactory creditCardValidAndNotExpired .
	
	self assert: (Cashier new checkout: cart with: creditCard xxx: testObjectsFactory today yyy: testObjectsFactory emptySalesbook ) equals: 30.
	
	
	
	
	
	! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 16:47:53' prior: 50927671!
test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError
		
	| cart |
	
	cart := testObjectsFactory cartWithDefaultCatalog .
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart 
							with: testObjectsFactory creditCardWithInvalidNumber 
							xxx: testObjectsFactory today 
							yyy: testObjectsFactory emptySalesbook ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberLengthErrorDescription.
	
	
	
	
	! !

!testRun: #MarketTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 16:47:59'!
PASSED!

!testRun: #MarketTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'GDH 6/16/2021 16:47:59'!
PASSED!

!testRun: #MarketTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 16:47:59'!
PASSED!

!testRun: #MarketTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 16:47:59'!
PASSED!

!testRun: #MarketTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 16:47:59'!
PASSED!

!testRun: #MarketTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 16:47:59'!
PASSED!

!testRun: #MarketTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 16:47:59'!
PASSED!

!testRun: #MarketTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'GDH 6/16/2021 16:47:59'!
PASSED!

!testRun: #MarketTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/16/2021 16:47:59'!
PASSED!

!testRun: #MarketTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'GDH 6/16/2021 16:47:59'!
PASSED!

!testRun: #MarketTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'GDH 6/16/2021 16:47:59'!
PASSED!
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 16:48:22' prior: 50928438!
test03CheckoutCartWithManyItemShouldReturnCartTotalValue

	| cart creditCard |
	
	cart := testObjectsFactory cartWithDefaultCatalog .
	cart add: '1'.
	cart add: '2'.
	
	creditCard := testObjectsFactory creditCardValidAndNotExpired .
	
	self assert: (Cashier new checkout: cart 
				with: creditCard 
				xxx: testObjectsFactory today 
				yyy: testObjectsFactory emptySalesbook ) 
		equals: 30.
	
	
	
	
	
	! !

!testRun: #MarketTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 16:48:26'!
PASSED!

!testRun: #MarketTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'GDH 6/16/2021 16:48:26'!
PASSED!

!testRun: #MarketTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 16:48:26'!
PASSED!

!testRun: #MarketTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 16:48:26'!
PASSED!

!testRun: #MarketTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 16:48:26'!
PASSED!

!testRun: #MarketTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 16:48:26'!
PASSED!

!testRun: #MarketTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 16:48:26'!
PASSED!

!testRun: #MarketTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'GDH 6/16/2021 16:48:26'!
PASSED!

!testRun: #MarketTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/16/2021 16:48:26'!
PASSED!

!testRun: #MarketTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'GDH 6/16/2021 16:48:26'!
PASSED!

!testRun: #MarketTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'GDH 6/16/2021 16:48:26'!
PASSED!
!MarketTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 16:49:13'!
creditCardWithInvalidNumberLength
	
	^CreditCard number: 111122223333444455556666 
				expiring: (GregorianMonthOfYear yearNumber: today yearNumber + 1 monthNumber: today monthIndex ) 
				for: 'Gabriel Hayon'.! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 16:49:13' prior: 50928454!
test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError
		
	| cart |
	
	cart := testObjectsFactory cartWithDefaultCatalog .
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart 
							with: testObjectsFactory creditCardWithInvalidNumberLength 
							xxx: testObjectsFactory today 
							yyy: testObjectsFactory emptySalesbook ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberLengthErrorDescription.
	
	
	
	
	! !

!methodRemoval: MarketTestObjectsFactory #creditCardWithInvalidNumber stamp: 'GDH 6/16/2021 16:49:13'!
creditCardWithInvalidNumber
	
	^CreditCard number: 111122223333444455556666 
				expiring: (GregorianMonthOfYear yearNumber: today yearNumber + 1 monthNumber: today monthIndex ) 
				for: 'Gabriel Hayon'.!
!MarketTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 16:49:59'!
creditCardWithNegativeNumber
	
	^CreditCard number: -1111222233334444 
				expiring: (GregorianMonthOfYear yearNumber: today yearNumber + 1 monthNumber: today monthIndex ) 
				for: 'Gabriel Hayon'.! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 16:52:50' prior: 50928583!
test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError
		
	| cart |
	
	cart := testObjectsFactory cartWithDefaultCatalog .
	cart add: '1'.
	cart add: '2'.
	
	
	
	self 
		should: [ Cashier new checkout: cart 
							with: (CreditCard number: 111122223333444455556666 
											expiring: (GregorianMonthOfYear yearNumber: testObjectsFactory today yearNumber + 1 monthNumber: testObjectsFactory today monthIndex ) 
											for: 'Gabriel Hayon') 
							xxx: testObjectsFactory today 
							yyy: testObjectsFactory emptySalesbook ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberLengthErrorDescription.
	
	
	
	
	! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 16:55:23' prior: 50927966!
isExpiredOn: aGregorianMonthOfYear

	^expirationDate <= aGregorianMonthOfYear.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 16:57:51' prior: 50928645!
isExpiredOn: aGregorianMonthOfYear

	^expirationDate < aGregorianMonthOfYear or: [ expirationDate = aGregorianMonthOfYear ].! !

!testRun: #MarketTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'GDH 6/16/2021 16:57:53'!
PASSED!

!testRun: #MarketTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 16:57:53'!
PASSED!

!testRun: #MarketTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 16:57:53'!
PASSED!

!testRun: #MarketTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 16:57:53'!
FAILURE!

!testRun: #MarketTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 16:57:53'!
PASSED!

!testRun: #MarketTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 16:57:53'!
PASSED!

!testRun: #MarketTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'GDH 6/16/2021 16:57:53'!
PASSED!

!testRun: #MarketTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/16/2021 16:57:53'!
PASSED!

!testRun: #MarketTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'GDH 6/16/2021 16:57:53'!
PASSED!

!testRun: #MarketTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'GDH 6/16/2021 16:57:53'!
PASSED!

!testRun: #MarketTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 16:57:53'!
FAILURE!
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 16:58:39' prior: 50928621!
test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError
		
	| cart |
	
	cart := testObjectsFactory cartWithDefaultCatalog .
	cart add: '1'.
	cart add: '2'.
	
	
	
	self 
		should: [ Cashier new checkout: cart 
							with: (CreditCard number: 111122223333444455556666 
											expiring: testObjectsFactory today 
											for: 'Gabriel Hayon') 
							xxx: testObjectsFactory today 
							yyy: testObjectsFactory emptySalesbook ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberLengthErrorDescription.
	
	
	
	
	! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 16:59:02' prior: 50928651!
isExpiredOn: aGregorianMonthOfYear

	^expirationDate > aGregorianMonthOfYear.! !

!testRun: #MarketTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'GDH 6/16/2021 16:59:14'!
PASSED!

!testRun: #MarketTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 16:59:14'!
ERROR!

!testRun: #MarketTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 16:59:14'!
ERROR!

!testRun: #MarketTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 16:59:14'!
PASSED!

!testRun: #MarketTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 16:59:14'!
PASSED!

!testRun: #MarketTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 16:59:14'!
PASSED!

!testRun: #MarketTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'GDH 6/16/2021 16:59:14'!
PASSED!

!testRun: #MarketTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/16/2021 16:59:14'!
PASSED!

!testRun: #MarketTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'GDH 6/16/2021 16:59:14'!
FAILURE!

!testRun: #MarketTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'GDH 6/16/2021 16:59:14'!
ERROR!

!testRun: #MarketTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 16:59:24'!
ERROR!

!testRun: #MarketTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 16:59:24'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 16:59:58' prior: 50928722!
isExpiredOn: aGregorianMonthOfYear

	^expirationDate < aGregorianMonthOfYear or: [ expirationDate = aGregorianMonthOfYear ].! !

!testRun: #MarketTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'GDH 6/16/2021 17:00:00'!
PASSED!

!testRun: #MarketTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 17:00:00'!
PASSED!

!testRun: #MarketTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 17:00:00'!
PASSED!

!testRun: #MarketTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 17:00:00'!
PASSED!

!testRun: #MarketTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 17:00:00'!
PASSED!

!testRun: #MarketTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 17:00:00'!
PASSED!

!testRun: #MarketTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'GDH 6/16/2021 17:00:00'!
PASSED!

!testRun: #MarketTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/16/2021 17:00:00'!
PASSED!

!testRun: #MarketTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'GDH 6/16/2021 17:00:00'!
PASSED!

!testRun: #MarketTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'GDH 6/16/2021 17:00:00'!
PASSED!
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 17:02:35' prior: 50927693!
test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError
		
	| cart |
	
	cart := testObjectsFactory cartWithDefaultCatalog .
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart 
							with: (CreditCard number: -1111222233334444 
											expiring: testObjectsFactory today 
											for: 'Matias Sandacz') 
							xxx: testObjectsFactory today
							yyy: OrderedCollection new ]
		raise:  Error
		withMessageText: CreditCard creditCardNumberMustBePositiveErrorDescription.
	
	
	
	
	! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 17:04:19' prior: 50928820!
test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError
		
	| cart |
	
	cart := testObjectsFactory cartWithDefaultCatalog .
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart 
							with: (CreditCard number: -1111222233334444 
											expiring: testObjectsFactory today 
											for: 'Matias Sandacz') 
							xxx: testObjectsFactory today
							yyy: testObjectsFactory emptySalesbook ]
		raise:  Error
		withMessageText: CreditCard creditCardNumberMustBePositiveErrorDescription.
	
	
	
	
	! !

!testRun: #MarketTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 17:04:20'!
PASSED!

!testRun: #MarketTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'GDH 6/16/2021 17:04:20'!
PASSED!

!testRun: #MarketTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 17:04:20'!
PASSED!

!testRun: #MarketTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 17:04:20'!
PASSED!

!testRun: #MarketTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 17:04:20'!
PASSED!

!testRun: #MarketTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 17:04:20'!
PASSED!

!testRun: #MarketTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 17:04:20'!
PASSED!

!testRun: #MarketTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'GDH 6/16/2021 17:04:20'!
PASSED!

!testRun: #MarketTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/16/2021 17:04:20'!
PASSED!

!testRun: #MarketTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'GDH 6/16/2021 17:04:20'!
PASSED!

!testRun: #MarketTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'GDH 6/16/2021 17:04:20'!
PASSED!
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 17:06:58' prior: 50927715!
test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError
		
	| cart |
	
	cart := testObjectsFactory cartWithDefaultCatalog .
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart 
							with: (CreditCard number: 1.2 
											expiring: testObjectsFactory today
											for: 'Matias Sandacz') 
							xxx: testObjectsFactory today
							yyy: testObjectsFactory emptySalesbook ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberTypeErrorDescription.
	
	
	
	
	! !

!testRun: #MarketTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 17:07:00'!
PASSED!

!testRun: #MarketTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'GDH 6/16/2021 17:07:00'!
PASSED!

!testRun: #MarketTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 17:07:00'!
PASSED!

!testRun: #MarketTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 17:07:00'!
PASSED!

!testRun: #MarketTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 17:07:00'!
PASSED!

!testRun: #MarketTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 17:07:00'!
PASSED!

!testRun: #MarketTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 17:07:00'!
PASSED!

!testRun: #MarketTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'GDH 6/16/2021 17:07:00'!
PASSED!

!testRun: #MarketTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/16/2021 17:07:00'!
PASSED!

!testRun: #MarketTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'GDH 6/16/2021 17:07:00'!
PASSED!

!testRun: #MarketTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'GDH 6/16/2021 17:07:00'!
PASSED!
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 19:32:08' prior: 50927758!
test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError
		
	| cart |
	
	cart := testObjectsFactory cartWithDefaultCatalog .
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart 
						with: (CreditCard number: 1111222233334444
									expiring: testObjectsFactory today
									for: 'Este nombre es muy largo para una tarjeta de credito') 
						xxx: testObjectsFactory today
						yyy: testObjectsFactory emptySalesbook ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNameErrorDescription.
	
	
	
	
	! !

!testRun: #MarketTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/16/2021 19:32:10'!
PASSED!

!testRun: #MarketTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'GDH 6/16/2021 19:32:10'!
PASSED!

!testRun: #MarketTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 19:32:10'!
PASSED!

!testRun: #MarketTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 19:32:10'!
PASSED!

!testRun: #MarketTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 19:32:10'!
PASSED!

!testRun: #MarketTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 19:32:10'!
PASSED!

!testRun: #MarketTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 19:32:10'!
PASSED!

!testRun: #MarketTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'GDH 6/16/2021 19:32:10'!
PASSED!

!testRun: #MarketTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/16/2021 19:32:10'!
PASSED!

!testRun: #MarketTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'GDH 6/16/2021 19:32:10'!
PASSED!

!testRun: #MarketTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'GDH 6/16/2021 19:32:10'!
PASSED!
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 19:32:58' prior: 50927781!
test09CheckOutWithExpiredCardShouldRaiseAnError
		
	| cart |
	
	cart := testObjectsFactory cartWithDefaultCatalog .
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			with: testObjectsFactory creditCardValidButExpired 
			xxx: testObjectsFactory today 
			yyy: testObjectsFactory emptySalesbook ]
		raise:  Error
		withMessageText: Cashier expiredCreditCardErrorMessage.
	
	
	
	
	! !

!testRun: #MarketTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'GDH 6/16/2021 19:32:59'!
PASSED!

!testRun: #MarketTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'GDH 6/16/2021 19:32:59'!
PASSED!

!testRun: #MarketTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 19:32:59'!
PASSED!

!testRun: #MarketTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 19:32:59'!
PASSED!

!testRun: #MarketTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 19:32:59'!
PASSED!

!testRun: #MarketTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 19:32:59'!
PASSED!

!testRun: #MarketTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 19:32:59'!
PASSED!

!testRun: #MarketTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'GDH 6/16/2021 19:32:59'!
PASSED!

!testRun: #MarketTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/16/2021 19:32:59'!
PASSED!

!testRun: #MarketTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'GDH 6/16/2021 19:32:59'!
PASSED!

!testRun: #MarketTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'GDH 6/16/2021 19:32:59'!
PASSED!
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 19:35:18' prior: 50927802!
test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook
		
	| cart salesBook |
	
	cart := testObjectsFactory cartWithDefaultCatalog .
	cart add: '1'.
	cart add: '2'.
	
	salesBook := testObjectsFactory emptySalesbook .
	
	Cashier new 
		checkout: cart 
		with: testObjectsFactory creditCardValidAndNotExpired 
		xxx: testObjectsFactory today 
		yyy: salesBook .
		
	self assert: ( salesBook includes: cart totalValue ).
	
	
	
	
	! !

!testRun: #MarketTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'GDH 6/16/2021 19:35:22'!
PASSED!

!testRun: #MarketTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'GDH 6/16/2021 19:35:22'!
PASSED!

!testRun: #MarketTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 19:35:22'!
PASSED!

!testRun: #MarketTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 19:35:22'!
PASSED!

!testRun: #MarketTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 19:35:22'!
PASSED!

!testRun: #MarketTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 19:35:22'!
PASSED!

!testRun: #MarketTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 19:35:22'!
PASSED!

!testRun: #MarketTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'GDH 6/16/2021 19:35:22'!
PASSED!

!testRun: #MarketTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/16/2021 19:35:22'!
PASSED!

!testRun: #MarketTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'GDH 6/16/2021 19:35:22'!
PASSED!

!testRun: #MarketTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'GDH 6/16/2021 19:35:22'!
PASSED!

!methodRemoval: MarketTestObjectsFactory #creditCardWithInvalidNumberLength stamp: 'GDH 6/16/2021 19:36:24'!
creditCardWithInvalidNumberLength
	
	^CreditCard number: 111122223333444455556666 
				expiring: (GregorianMonthOfYear yearNumber: today yearNumber + 1 monthNumber: today monthIndex ) 
				for: 'Gabriel Hayon'.!

!methodRemoval: MarketTestObjectsFactory #creditCardWithNegativeNumber stamp: 'GDH 6/16/2021 19:36:26'!
creditCardWithNegativeNumber
	
	^CreditCard number: -1111222233334444 
				expiring: (GregorianMonthOfYear yearNumber: today yearNumber + 1 monthNumber: today monthIndex ) 
				for: 'Gabriel Hayon'.!

!methodRemoval: MarketTestObjectsFactory #creditCardWithInvalidName stamp: 'GDH 6/16/2021 19:36:27'!
creditCardWithInvalidName
	
	^CreditCard number: 1111222233334444 
				expiring: (GregorianMonthOfYear yearNumber: today yearNumber + 1 monthNumber: today monthIndex ) 
				for: 'Este es un nombre muy largo para una tarjeta'.!
!Cashier methodsFor: 'checkout' stamp: 'GDH 6/16/2021 19:37:42'!
checkout: aCart with: aCreditCard on: purchaseGregorianMonthOfYear registeringOn: aSalesbook    
	
	(aCart isEmpty) ifTrue: [ ^self error: self class checkoutWithEmptyCartErrorMessage ].
	
	(aCreditCard isExpiredOn: purchaseGregorianMonthOfYear) ifTrue: [ ^self error: Cashier expiredCreditCardErrorMessage ].
	
	aSalesbook add: aCart totalValue.
	
	^ aCart totalValue.
	
	
	! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 19:37:42' prior: 50928342!
test02CheckoutCartWithOneItemShouldReturnCartTotalValue

	| cart creditCard |
		
	cart := testObjectsFactory cartWithDefaultCatalog .
	cart add: '1'.
	
	creditCard := testObjectsFactory creditCardValidAndNotExpired .
	
	self assert: (Cashier new 
				checkout: cart 
				with: creditCard 
				on: testObjectsFactory today 
				registeringOn: testObjectsFactory emptySalesbook ) 
		equals: 10.
	
	
	
	
	
	! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 19:37:42' prior: 50928902!
test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError
		
	| cart |
	
	cart := testObjectsFactory cartWithDefaultCatalog .
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart 
							with: (CreditCard number: 1.2 
											expiring: testObjectsFactory today
											for: 'Matias Sandacz') 
							on: testObjectsFactory today
							registeringOn: testObjectsFactory emptySalesbook ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberTypeErrorDescription.
	
	
	
	
	! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 19:37:42' prior: 50928325!
test01CheckoutWithEmptyCartShouldRaiseAnError

	| emptyCart creditCard |
	
	emptyCart := testObjectsFactory cartWithDefaultCatalog .
	
	creditCard := testObjectsFactory creditCardValidAndNotExpired .
	
	self 
		should: [ Cashier new checkout: emptyCart with: creditCard on: testObjectsFactory today registeringOn: testObjectsFactory emptySalesbook ]
		raise:  Error
		withMessageText: Cashier checkoutWithEmptyCartErrorMessage.
	
	! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 19:37:42' prior: 50927736!
test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			with: (CreditCard number: 1111222233334444 
				expiring: (GregorianMonthOfYear yearNumber: 19988 monthNumber: 10) for: 'Matias') on: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 4) registeringOn: OrderedCollection new ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardYearErrorDescription.
	
	
	
	
	! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 19:37:42' prior: 50929027!
test09CheckOutWithExpiredCardShouldRaiseAnError
		
	| cart |
	
	cart := testObjectsFactory cartWithDefaultCatalog .
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			with: testObjectsFactory creditCardValidButExpired 
			on: testObjectsFactory today 
			registeringOn: testObjectsFactory emptySalesbook ]
		raise:  Error
		withMessageText: Cashier expiredCreditCardErrorMessage.
	
	
	
	
	! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 19:37:42' prior: 50928840!
test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError
		
	| cart |
	
	cart := testObjectsFactory cartWithDefaultCatalog .
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart 
							with: (CreditCard number: -1111222233334444 
											expiring: testObjectsFactory today 
											for: 'Matias Sandacz') 
							on: testObjectsFactory today
							registeringOn: testObjectsFactory emptySalesbook ]
		raise:  Error
		withMessageText: CreditCard creditCardNumberMustBePositiveErrorDescription.
	
	
	
	
	! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 19:37:42' prior: 50929086!
test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook
		
	| cart salesBook |
	
	cart := testObjectsFactory cartWithDefaultCatalog .
	cart add: '1'.
	cart add: '2'.
	
	salesBook := testObjectsFactory emptySalesbook .
	
	Cashier new 
		checkout: cart 
		with: testObjectsFactory creditCardValidAndNotExpired 
		on: testObjectsFactory today 
		registeringOn: salesBook .
		
	self assert: ( salesBook includes: cart totalValue ).
	
	
	
	
	! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 19:37:42' prior: 50928515!
test03CheckoutCartWithManyItemShouldReturnCartTotalValue

	| cart creditCard |
	
	cart := testObjectsFactory cartWithDefaultCatalog .
	cart add: '1'.
	cart add: '2'.
	
	creditCard := testObjectsFactory creditCardValidAndNotExpired .
	
	self assert: (Cashier new checkout: cart 
				with: creditCard 
				on: testObjectsFactory today 
				registeringOn: testObjectsFactory emptySalesbook ) 
		equals: 30.
	
	
	
	
	
	! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 19:37:42' prior: 50928964!
test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError
		
	| cart |
	
	cart := testObjectsFactory cartWithDefaultCatalog .
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart 
						with: (CreditCard number: 1111222233334444
									expiring: testObjectsFactory today
									for: 'Este nombre es muy largo para una tarjeta de credito') 
						on: testObjectsFactory today
						registeringOn: testObjectsFactory emptySalesbook ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNameErrorDescription.
	
	
	
	
	! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 19:37:42' prior: 50928701!
test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError
		
	| cart |
	
	cart := testObjectsFactory cartWithDefaultCatalog .
	cart add: '1'.
	cart add: '2'.
	
	
	
	self 
		should: [ Cashier new checkout: cart 
							with: (CreditCard number: 111122223333444455556666 
											expiring: testObjectsFactory today 
											for: 'Gabriel Hayon') 
							on: testObjectsFactory today 
							registeringOn: testObjectsFactory emptySalesbook ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberLengthErrorDescription.
	
	
	
	
	! !

!methodRemoval: Cashier #checkout:with:xxx:yyy: stamp: 'GDH 6/16/2021 19:37:42'!
checkout: aCart with: aCreditCard xxx: purchaseGregorianMonthOfYear yyy: aSalesbook    
	
	(aCart isEmpty) ifTrue: [ ^self error: self class checkoutWithEmptyCartErrorMessage ].
	
	(aCreditCard isExpiredOn: purchaseGregorianMonthOfYear) ifTrue: [ ^self error: Cashier expiredCreditCardErrorMessage ].
	
	aSalesbook add: aCart totalValue.
	
	^ aCart totalValue.
	
	
	!
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 22:33:45' prior: 50929225!
test01CheckoutWithEmptyCartShouldRaiseAnError

	| salesBook emptyCart creditCard |
	
	emptyCart := testObjectsFactory cartWithDefaultCatalog .
	
	creditCard := testObjectsFactory creditCardValidAndNotExpired .
	
	salesBook := testObjectsFactory emptySalesbook.
	
	self 
		should: [ Cashier new checkout: emptyCart with: creditCard on: testObjectsFactory today registeringOn: salesBook ]
		raise:  Error
		withMessageText: Cashier checkoutWithEmptyCartErrorMessage.
	
	self assert: salesBook isEmpty 
	! !

!testRun: #MarketTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'GDH 6/16/2021 22:33:47'!
PASSED!

!testRun: #MarketTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'GDH 6/16/2021 22:33:47'!
PASSED!

!testRun: #MarketTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 22:33:47'!
PASSED!

!testRun: #MarketTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 22:33:47'!
PASSED!

!testRun: #MarketTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 22:33:47'!
PASSED!

!testRun: #MarketTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 22:33:47'!
PASSED!

!testRun: #MarketTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 22:33:47'!
PASSED!

!testRun: #MarketTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'GDH 6/16/2021 22:33:47'!
PASSED!

!testRun: #MarketTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/16/2021 22:33:47'!
PASSED!

!testRun: #MarketTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'GDH 6/16/2021 22:33:47'!
PASSED!

!testRun: #MarketTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'GDH 6/16/2021 22:33:47'!
PASSED!
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 22:39:03'!
assertCheckout: aCart WithCreditCardCreatedAs: creditCardCreationClosure ShouldRaiseErrorWithMessageText: aMessageText
	
	| creditCard salesBook |
	
	creditCard := creditCardCreationClosure value.
	
	salesBook := testObjectsFactory emptySalesbook .
	
	self 
		should: [ Cashier new checkout: aCart with: creditCard on: testObjectsFactory today registeringOn: salesBook ]
		raise:  Error - MessageNotUnderstood 
		withMessageText: aMessageText.
	
	self assert: salesBook isEmpty 
	! !

!testRun: #MarketTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'GDH 6/16/2021 22:39:09'!
PASSED!

!testRun: #MarketTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'GDH 6/16/2021 22:39:09'!
PASSED!

!testRun: #MarketTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 22:39:09'!
PASSED!

!testRun: #MarketTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 22:39:09'!
PASSED!

!testRun: #MarketTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 22:39:09'!
PASSED!

!testRun: #MarketTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 22:39:09'!
PASSED!

!testRun: #MarketTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 22:39:09'!
PASSED!

!testRun: #MarketTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'GDH 6/16/2021 22:39:09'!
PASSED!

!testRun: #MarketTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/16/2021 22:39:09'!
PASSED!

!testRun: #MarketTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'GDH 6/16/2021 22:39:09'!
PASSED!

!testRun: #MarketTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'GDH 6/16/2021 22:39:09'!
PASSED!
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 22:40:18'!
assertCheckout: aCart WithCreditCard: aCreditCard ShouldRaiseErrorWithMessageText: aMessageText
	
	| salesBook |
		
	salesBook := testObjectsFactory emptySalesbook .
	
	self 
		should: [ Cashier new checkout: aCart with: aCreditCard on: testObjectsFactory today registeringOn: salesBook ]
		raise:  Error - MessageNotUnderstood 
		withMessageText: aMessageText.
	
	self assert: salesBook isEmpty 
	! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 22:42:43' prior: 50929392!
test01CheckoutWithEmptyCartShouldRaiseAnError
				
	self assertCheckout: testObjectsFactory cartWithDefaultCatalog 
		WithCreditCard: testObjectsFactory creditCardValidAndNotExpired 
		ShouldRaiseErrorWithMessageText: Cashier checkoutWithEmptyCartErrorMessage.! !

!testRun: #MarketTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'GDH 6/16/2021 22:42:44'!
PASSED!

!testRun: #MarketTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'GDH 6/16/2021 22:42:44'!
PASSED!

!testRun: #MarketTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 22:42:44'!
PASSED!

!testRun: #MarketTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 22:42:44'!
PASSED!

!testRun: #MarketTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 22:42:44'!
PASSED!

!testRun: #MarketTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 22:42:44'!
PASSED!

!testRun: #MarketTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 22:42:44'!
PASSED!

!testRun: #MarketTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'GDH 6/16/2021 22:42:44'!
PASSED!

!testRun: #MarketTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/16/2021 22:42:44'!
PASSED!

!testRun: #MarketTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'GDH 6/16/2021 22:42:44'!
PASSED!

!testRun: #MarketTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'GDH 6/16/2021 22:42:44'!
PASSED!
!MarketTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 22:46:32'!
cartWithDefaultCatalogAndProducts
	
	| cart |
	
	cart  := Cart acceptingItemsOf: self defaultCatalog .
	cart add: '1'.
	cart add: '2'.
		
	^cart ! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 22:48:32' prior: 50929357!
test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError
		
	| cart |
	
	cart := testObjectsFactory cartWithDefaultCatalog .
	cart add: '1'.
	cart add: '2'.
	
	self assertCheckout: testObjectsFactory cartWithDefaultCatalogAndProducts 
		 WithCreditCardCreatedAs: [ CreditCard number: 111122223333444455556666 
											expiring: testObjectsFactory today 
											for: 'Gabriel Hayon' ]
		 ShouldRaiseErrorWithMessageText: CreditCard invalidCreditCardNumberLengthErrorDescription
	
	
	
	"self 
		should: [ Cashier new checkout: cart 
							with: (CreditCard number: 111122223333444455556666 
											expiring: testObjectsFactory today 
											for: 'Gabriel Hayon') 
							on: testObjectsFactory today 
							registeringOn: testObjectsFactory emptySalesbook ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberLengthErrorDescription."
	
	
	
	
	! !

!testRun: #MarketTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 22:48:33'!
ERROR!
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 22:49:50' prior: 50929453!
assertCheckout: aCart WithCreditCardCreatedAs: creditCardCreationClosure ShouldRaiseErrorWithMessageText: aMessageText
	
	| salesBook |
	
	salesBook := testObjectsFactory emptySalesbook .
	
	self 
		should: [ Cashier new checkout: aCart 
						  with: creditCardCreationClosure value 
						  on: testObjectsFactory today 
						  registeringOn: salesBook ]
		raise:  Error - MessageNotUnderstood 
		withMessageText: aMessageText.
	
	self assert: salesBook isEmpty 
	! !

!testRun: #MarketTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'GDH 6/16/2021 22:49:51'!
PASSED!

!testRun: #MarketTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 22:49:51'!
PASSED!

!testRun: #MarketTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 22:49:51'!
PASSED!

!testRun: #MarketTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 22:49:51'!
PASSED!

!testRun: #MarketTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 22:49:51'!
PASSED!

!testRun: #MarketTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 22:49:51'!
PASSED!

!testRun: #MarketTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'GDH 6/16/2021 22:49:51'!
PASSED!

!testRun: #MarketTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/16/2021 22:49:51'!
PASSED!

!testRun: #MarketTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'GDH 6/16/2021 22:49:51'!
PASSED!

!testRun: #MarketTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'GDH 6/16/2021 22:49:51'!
PASSED!
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 22:50:30' prior: 50929590!
test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError
	
	self assertCheckout: testObjectsFactory cartWithDefaultCatalogAndProducts 
		 WithCreditCardCreatedAs: [ CreditCard number: 111122223333444455556666 
											expiring: testObjectsFactory today 
											for: 'Gabriel Hayon' ]
		 ShouldRaiseErrorWithMessageText: CreditCard invalidCreditCardNumberLengthErrorDescription
	
	"self 
		should: [ Cashier new checkout: cart 
							with: (CreditCard number: 111122223333444455556666 
											expiring: testObjectsFactory today 
											for: 'Gabriel Hayon') 
							on: testObjectsFactory today 
							registeringOn: testObjectsFactory emptySalesbook ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberLengthErrorDescription."
	
	
	
	
	! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 22:51:17' prior: 50929282!
test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError

	self assertCheckout: testObjectsFactory cartWithDefaultCatalogAndProducts 
		 WithCreditCardCreatedAs: [ CreditCard number: -1111222233334444 
											expiring: testObjectsFactory today 
											for: 'Matias Sandacz' ]
		 ShouldRaiseErrorWithMessageText: CreditCard creditCardNumberMustBePositiveErrorDescription
		
	"| cart |
	
	cart := testObjectsFactory cartWithDefaultCatalog .
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart 
							with: (CreditCard number: -1111222233334444 
											expiring: testObjectsFactory today 
											for: 'Matias Sandacz') 
							on: testObjectsFactory today
							registeringOn: testObjectsFactory emptySalesbook ]
		raise:  Error
		withMessageText: CreditCard creditCardNumberMustBePositiveErrorDescription."
	
	
	
	
	! !

!testRun: #MarketTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 22:51:18'!
PASSED!

!testRun: #MarketTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'GDH 6/16/2021 22:51:18'!
PASSED!

!testRun: #MarketTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 22:51:18'!
PASSED!

!testRun: #MarketTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 22:51:18'!
PASSED!

!testRun: #MarketTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 22:51:18'!
PASSED!

!testRun: #MarketTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 22:51:18'!
PASSED!

!testRun: #MarketTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 22:51:18'!
PASSED!

!testRun: #MarketTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'GDH 6/16/2021 22:51:18'!
PASSED!

!testRun: #MarketTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/16/2021 22:51:18'!
PASSED!

!testRun: #MarketTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'GDH 6/16/2021 22:51:18'!
PASSED!

!testRun: #MarketTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'GDH 6/16/2021 22:51:18'!
PASSED!
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 22:51:58' prior: 50929205!
test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError

	self assertCheckout: testObjectsFactory cartWithDefaultCatalogAndProducts 
		 WithCreditCardCreatedAs: [ CreditCard number: 1.2 
											expiring: testObjectsFactory today
											for: 'Matias Sandacz' ]
		 ShouldRaiseErrorWithMessageText: CreditCard invalidCreditCardNumberTypeErrorDescription
		
	"| cart |
	
	cart := testObjectsFactory cartWithDefaultCatalog .
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart 
							with: (CreditCard number: 1.2 
											expiring: testObjectsFactory today
											for: 'Matias Sandacz') 
							on: testObjectsFactory today
							registeringOn: testObjectsFactory emptySalesbook ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNumberTypeErrorDescription."
	
	
	
	
	! !

!testRun: #MarketTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 22:51:59'!
PASSED!

!testRun: #MarketTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'GDH 6/16/2021 22:51:59'!
PASSED!

!testRun: #MarketTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 22:51:59'!
PASSED!

!testRun: #MarketTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 22:51:59'!
PASSED!

!testRun: #MarketTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 22:51:59'!
PASSED!

!testRun: #MarketTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 22:51:59'!
PASSED!

!testRun: #MarketTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 22:51:59'!
PASSED!

!testRun: #MarketTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'GDH 6/16/2021 22:51:59'!
PASSED!

!testRun: #MarketTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/16/2021 22:51:59'!
PASSED!

!testRun: #MarketTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'GDH 6/16/2021 22:51:59'!
PASSED!

!testRun: #MarketTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'GDH 6/16/2021 22:51:59'!
PASSED!
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 22:53:06' prior: 50929336!
test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError

	self assertCheckout: testObjectsFactory cartWithDefaultCatalogAndProducts 
		 WithCreditCardCreatedAs: [ CreditCard number: 1111222233334444
									expiring: testObjectsFactory today
									for: 'Este nombre es muy largo para una tarjeta de credito' ]
		 ShouldRaiseErrorWithMessageText: CreditCard invalidCreditCardNameErrorDescription
		
	"| cart |
	
	cart := testObjectsFactory cartWithDefaultCatalog .
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ Cashier new checkout: cart 
						with: (CreditCard number: 1111222233334444
									expiring: testObjectsFactory today
									for: 'Este nombre es muy largo para una tarjeta de credito') 
						on: testObjectsFactory today
						registeringOn: testObjectsFactory emptySalesbook ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardNameErrorDescription."
	
	
	
	
	! !

!testRun: #MarketTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/16/2021 22:53:07'!
PASSED!

!testRun: #MarketTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'GDH 6/16/2021 22:53:07'!
PASSED!

!testRun: #MarketTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 22:53:07'!
PASSED!

!testRun: #MarketTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 22:53:07'!
PASSED!

!testRun: #MarketTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 22:53:07'!
PASSED!

!testRun: #MarketTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 22:53:07'!
PASSED!

!testRun: #MarketTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 22:53:07'!
PASSED!

!testRun: #MarketTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'GDH 6/16/2021 22:53:07'!
PASSED!

!testRun: #MarketTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/16/2021 22:53:07'!
PASSED!

!testRun: #MarketTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'GDH 6/16/2021 22:53:07'!
PASSED!

!testRun: #MarketTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'GDH 6/16/2021 22:53:07'!
PASSED!
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 22:54:03' prior: 50929265!
test09CheckOutWithExpiredCardShouldRaiseAnError

	self assertCheckout: testObjectsFactory cartWithDefaultCatalogAndProducts 
		 WithCreditCard: testObjectsFactory creditCardValidButExpired
		 ShouldRaiseErrorWithMessageText: Cashier expiredCreditCardErrorMessage
		
	"| cart |
	
	cart := testObjectsFactory cartWithDefaultCatalog .
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			with: testObjectsFactory creditCardValidButExpired 
			on: testObjectsFactory today 
			registeringOn: testObjectsFactory emptySalesbook ]
		raise:  Error
		withMessageText: Cashier expiredCreditCardErrorMessage."
	
	
	
	
	! !

!testRun: #MarketTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'GDH 6/16/2021 22:54:04'!
PASSED!

!testRun: #MarketTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'GDH 6/16/2021 22:54:04'!
PASSED!

!testRun: #MarketTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 22:54:04'!
PASSED!

!testRun: #MarketTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 22:54:04'!
PASSED!

!testRun: #MarketTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 22:54:04'!
PASSED!

!testRun: #MarketTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 22:54:04'!
PASSED!

!testRun: #MarketTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 22:54:04'!
PASSED!

!testRun: #MarketTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'GDH 6/16/2021 22:54:04'!
PASSED!

!testRun: #MarketTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/16/2021 22:54:04'!
PASSED!

!testRun: #MarketTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'GDH 6/16/2021 22:54:04'!
PASSED!

!testRun: #MarketTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'GDH 6/16/2021 22:54:04'!
PASSED!
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 22:54:26' prior: 50929929!
test09CheckOutWithExpiredCardShouldRaiseAnError

	self assertCheckout: testObjectsFactory cartWithDefaultCatalogAndProducts 
		 WithCreditCard: testObjectsFactory creditCardValidButExpired
		 ShouldRaiseErrorWithMessageText: Cashier expiredCreditCardErrorMessage
	
	
	
	
	! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 22:54:30' prior: 50929855!
test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError

	self assertCheckout: testObjectsFactory cartWithDefaultCatalogAndProducts 
		 WithCreditCardCreatedAs: [ CreditCard number: 1111222233334444
									expiring: testObjectsFactory today
									for: 'Este nombre es muy largo para una tarjeta de credito' ]
		 ShouldRaiseErrorWithMessageText: CreditCard invalidCreditCardNameErrorDescription
	
	
	
	
	! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 22:54:37' prior: 50929783!
test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError

	self assertCheckout: testObjectsFactory cartWithDefaultCatalogAndProducts 
		 WithCreditCardCreatedAs: [ CreditCard number: 1.2 
											expiring: testObjectsFactory today
											for: 'Matias Sandacz' ]
		 ShouldRaiseErrorWithMessageText: CreditCard invalidCreditCardNumberTypeErrorDescription
	
	
	
	
	! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 22:54:42' prior: 50929710!
test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError

	self assertCheckout: testObjectsFactory cartWithDefaultCatalogAndProducts 
		 WithCreditCardCreatedAs: [ CreditCard number: -1111222233334444 
											expiring: testObjectsFactory today 
											for: 'Matias Sandacz' ]
		 ShouldRaiseErrorWithMessageText: CreditCard creditCardNumberMustBePositiveErrorDescription
	
	
	
	
	! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 22:54:47' prior: 50929682!
test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError
	
	self assertCheckout: testObjectsFactory cartWithDefaultCatalogAndProducts 
		 WithCreditCardCreatedAs: [ CreditCard number: 111122223333444455556666 
											expiring: testObjectsFactory today 
											for: 'Gabriel Hayon' ]
		 ShouldRaiseErrorWithMessageText: CreditCard invalidCreditCardNumberLengthErrorDescription
	
	
	
	
	! !

!testRun: #MarketTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/16/2021 23:14:05'!
PASSED!

!testRun: #MarketTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'GDH 6/16/2021 23:14:07'!
PASSED!

!testRun: #MarketTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 23:14:07'!
PASSED!

!testRun: #MarketTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'GDH 6/16/2021 23:14:07'!
PASSED!

!testRun: #MarketTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 23:14:07'!
PASSED!

!testRun: #MarketTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 23:14:07'!
PASSED!

!testRun: #MarketTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/16/2021 23:14:07'!
PASSED!

!testRun: #MarketTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'GDH 6/16/2021 23:14:07'!
PASSED!

!testRun: #MarketTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/16/2021 23:14:07'!
PASSED!

!testRun: #MarketTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'GDH 6/16/2021 23:14:07'!
PASSED!

!testRun: #MarketTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'GDH 6/16/2021 23:14:07'!
PASSED!
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 23:52:07'!
test11CheckoutWithValidCartAndCreditCartShouldProcessSuccesfullyOnMerchantProcessor
	
	
	
	
	
	
	! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 23:52:21'!
test11CheckoutWithValidCartAndCreditCardShouldProcessSuccesfullyOnMerchantProcessor
	
	
	
	
	
	
	! !

!methodRemoval: MarketTest #test11CheckoutWithValidCartAndCreditCartShouldProcessSuccesfullyOnMerchantProcessor stamp: 'GDH 6/16/2021 23:52:21'!
test11CheckoutWithValidCartAndCreditCartShouldProcessSuccesfullyOnMerchantProcessor
	
	
	
	
	
	
	!
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 23:55:57' prior: 50930118!
test11CheckoutWithValidCartAndCreditCardShouldProcessSuccesfullyOnMerchantProcessor
	
	| salesBook cart |
		
	salesBook := testObjectsFactory emptySalesbook .
	cart  := testObjectsFactory cartWithDefaultCatalogAndProducts .
	
	Cashier new checkout: cart 
				with: testObjectsFactory creditCardValidAndNotExpired 
				on: testObjectsFactory today 
				registeringOn: salesBook.
	
	self assert: salesBook includes: cart totalValue 
	
	
	
	
	! !
!Cashier methodsFor: 'checkout' stamp: 'GDH 6/16/2021 23:56:46'!
checkout: aCart withCard: aCreditCard on: purchaseGregorianMonthOfYear registeringOn: aSalesbook    
	
	(aCart isEmpty) ifTrue: [ ^self error: self class checkoutWithEmptyCartErrorMessage ].
	
	(aCreditCard isExpiredOn: purchaseGregorianMonthOfYear) ifTrue: [ ^self error: Cashier expiredCreditCardErrorMessage ].
	
	aSalesbook add: aCart totalValue.
	
	^ aCart totalValue.
	
	
	! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 23:56:46' prior: 50929513!
assertCheckout: aCart WithCreditCard: aCreditCard ShouldRaiseErrorWithMessageText: aMessageText
	
	| salesBook |
		
	salesBook := testObjectsFactory emptySalesbook .
	
	self 
		should: [ Cashier new checkout: aCart withCard: aCreditCard on: testObjectsFactory today registeringOn: salesBook ]
		raise:  Error - MessageNotUnderstood 
		withMessageText: aMessageText.
	
	self assert: salesBook isEmpty 
	! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 23:56:46' prior: 50929625!
assertCheckout: aCart WithCreditCardCreatedAs: creditCardCreationClosure ShouldRaiseErrorWithMessageText: aMessageText
	
	| salesBook |
	
	salesBook := testObjectsFactory emptySalesbook .
	
	self 
		should: [ Cashier new checkout: aCart 
						  withCard: creditCardCreationClosure value 
						  on: testObjectsFactory today 
						  registeringOn: salesBook ]
		raise:  Error - MessageNotUnderstood 
		withMessageText: aMessageText.
	
	self assert: salesBook isEmpty 
	! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 23:56:46' prior: 50929302!
test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook
		
	| cart salesBook |
	
	cart := testObjectsFactory cartWithDefaultCatalog .
	cart add: '1'.
	cart add: '2'.
	
	salesBook := testObjectsFactory emptySalesbook .
	
	Cashier new 
		checkout: cart 
		withCard: testObjectsFactory creditCardValidAndNotExpired 
		on: testObjectsFactory today 
		registeringOn: salesBook .
		
	self assert: ( salesBook includes: cart totalValue ).
	
	
	
	
	! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 23:56:46' prior: 50930132!
test11CheckoutWithValidCartAndCreditCardShouldProcessSuccesfullyOnMerchantProcessor
	
	| salesBook cart |
		
	salesBook := testObjectsFactory emptySalesbook .
	cart  := testObjectsFactory cartWithDefaultCatalogAndProducts .
	
	Cashier new checkout: cart 
				withCard: testObjectsFactory creditCardValidAndNotExpired 
				on: testObjectsFactory today 
				registeringOn: salesBook.
	
	self assert: salesBook includes: cart totalValue 
	
	
	
	
	! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 23:56:46' prior: 50929189!
test02CheckoutCartWithOneItemShouldReturnCartTotalValue

	| cart creditCard |
		
	cart := testObjectsFactory cartWithDefaultCatalog .
	cart add: '1'.
	
	creditCard := testObjectsFactory creditCardValidAndNotExpired .
	
	self assert: (Cashier new 
				checkout: cart 
				withCard: creditCard 
				on: testObjectsFactory today 
				registeringOn: testObjectsFactory emptySalesbook ) 
		equals: 10.
	
	
	
	
	
	! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 23:56:46' prior: 50929242!
test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			withCard: (CreditCard number: 1111222233334444 
				expiring: (GregorianMonthOfYear yearNumber: 19988 monthNumber: 10) for: 'Matias') on: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 4) registeringOn: OrderedCollection new ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardYearErrorDescription.
	
	
	
	
	! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 23:56:46' prior: 50929319!
test03CheckoutCartWithManyItemShouldReturnCartTotalValue

	| cart creditCard |
	
	cart := testObjectsFactory cartWithDefaultCatalog .
	cart add: '1'.
	cart add: '2'.
	
	creditCard := testObjectsFactory creditCardValidAndNotExpired .
	
	self assert: (Cashier new checkout: cart 
				withCard: creditCard 
				on: testObjectsFactory today 
				registeringOn: testObjectsFactory emptySalesbook ) 
		equals: 30.
	
	
	
	
	
	! !

!methodRemoval: Cashier #checkout:with:on:registeringOn: stamp: 'GDH 6/16/2021 23:56:46'!
checkout: aCart with: aCreditCard on: purchaseGregorianMonthOfYear registeringOn: aSalesbook    
	
	(aCart isEmpty) ifTrue: [ ^self error: self class checkoutWithEmptyCartErrorMessage ].
	
	(aCreditCard isExpiredOn: purchaseGregorianMonthOfYear) ifTrue: [ ^self error: Cashier expiredCreditCardErrorMessage ].
	
	aSalesbook add: aCart totalValue.
	
	^ aCart totalValue.
	
	
	!
!Cashier methodsFor: 'checkout' stamp: 'GDH 6/16/2021 23:59:07'!
checkout: aCart withCard: aCreditCard on: purchaseGregorianMonthOfYear registeringOn: aSalesbook processingWith: aMerchantProcessor     
	
	(aCart isEmpty) ifTrue: [ ^self error: self class checkoutWithEmptyCartErrorMessage ].
	
	(aCreditCard isExpiredOn: purchaseGregorianMonthOfYear) ifTrue: [ ^self error: Cashier expiredCreditCardErrorMessage ].
	
	aSalesbook add: aCart totalValue.
	
	^ aCart totalValue.
	
	
	! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 23:59:07' prior: 50930231!
test02CheckoutCartWithOneItemShouldReturnCartTotalValue

	| cart creditCard |
		
	cart := testObjectsFactory cartWithDefaultCatalog .
	cart add: '1'.
	
	creditCard := testObjectsFactory creditCardValidAndNotExpired .
	
	self assert: (Cashier new 
				checkout: cart 
				withCard: creditCard 
				on: testObjectsFactory today 
				registeringOn: testObjectsFactory emptySalesbook processingWith: NoErrorMerchantProcessor new ) 
		equals: 10.
	
	
	
	
	
	! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 23:59:07' prior: 50930214!
test11CheckoutWithValidCartAndCreditCardShouldProcessSuccesfullyOnMerchantProcessor
	
	| salesBook cart |
		
	salesBook := testObjectsFactory emptySalesbook .
	cart  := testObjectsFactory cartWithDefaultCatalogAndProducts .
	
	Cashier new checkout: cart 
				withCard: testObjectsFactory creditCardValidAndNotExpired 
				on: testObjectsFactory today 
				registeringOn: salesBook processingWith: NoErrorMerchantProcessor new.
	
	self assert: salesBook includes: cart totalValue 
	
	
	
	
	! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 23:59:07' prior: 50930270!
test03CheckoutCartWithManyItemShouldReturnCartTotalValue

	| cart creditCard |
	
	cart := testObjectsFactory cartWithDefaultCatalog .
	cart add: '1'.
	cart add: '2'.
	
	creditCard := testObjectsFactory creditCardValidAndNotExpired .
	
	self assert: (Cashier new checkout: cart 
				withCard: creditCard 
				on: testObjectsFactory today 
				registeringOn: testObjectsFactory emptySalesbook processingWith: NoErrorMerchantProcessor new ) 
		equals: 30.
	
	
	
	
	
	! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 23:59:07' prior: 50930179!
assertCheckout: aCart WithCreditCardCreatedAs: creditCardCreationClosure ShouldRaiseErrorWithMessageText: aMessageText
	
	| salesBook |
	
	salesBook := testObjectsFactory emptySalesbook .
	
	self 
		should: [ Cashier new checkout: aCart 
						  withCard: creditCardCreationClosure value 
						  on: testObjectsFactory today 
						  registeringOn: salesBook processingWith: NoErrorMerchantProcessor new ]
		raise:  Error - MessageNotUnderstood 
		withMessageText: aMessageText.
	
	self assert: salesBook isEmpty 
	! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 23:59:07' prior: 50930197!
test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook
		
	| cart salesBook |
	
	cart := testObjectsFactory cartWithDefaultCatalog .
	cart add: '1'.
	cart add: '2'.
	
	salesBook := testObjectsFactory emptySalesbook .
	
	Cashier new 
		checkout: cart 
		withCard: testObjectsFactory creditCardValidAndNotExpired 
		on: testObjectsFactory today 
		registeringOn: salesBook processingWith: NoErrorMerchantProcessor new .
		
	self assert: ( salesBook includes: cart totalValue ).
	
	
	
	
	! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 23:59:07' prior: 50930247!
test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			withCard: (CreditCard number: 1111222233334444 
				expiring: (GregorianMonthOfYear yearNumber: 19988 monthNumber: 10) for: 'Matias') on: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 4) registeringOn: OrderedCollection new processingWith: NoErrorMerchantProcessor new ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardYearErrorDescription.
	
	
	
	
	! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/16/2021 23:59:07' prior: 50930163!
assertCheckout: aCart WithCreditCard: aCreditCard ShouldRaiseErrorWithMessageText: aMessageText
	
	| salesBook |
		
	salesBook := testObjectsFactory emptySalesbook .
	
	self 
		should: [ Cashier new checkout: aCart withCard: aCreditCard on: testObjectsFactory today registeringOn: salesBook processingWith: NoErrorMerchantProcessor new ]
		raise:  Error - MessageNotUnderstood 
		withMessageText: aMessageText.
	
	self assert: salesBook isEmpty 
	! !

!methodRemoval: Cashier #checkout:withCard:on:registeringOn: stamp: 'GDH 6/16/2021 23:59:07'!
checkout: aCart withCard: aCreditCard on: purchaseGregorianMonthOfYear registeringOn: aSalesbook    
	
	(aCart isEmpty) ifTrue: [ ^self error: self class checkoutWithEmptyCartErrorMessage ].
	
	(aCreditCard isExpiredOn: purchaseGregorianMonthOfYear) ifTrue: [ ^self error: Cashier expiredCreditCardErrorMessage ].
	
	aSalesbook add: aCart totalValue.
	
	^ aCart totalValue.
	
	
	!

!classDefinition: #NoErrorMerchantProcessor category: 'TusLibros' stamp: 'GDH 6/17/2021 00:00:57'!
Object subclass: #NoErrorMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/17/2021 00:00:47' prior: 50930335!
test11CheckoutWithValidCartAndCreditCardShouldProcessSuccesfullyOnMerchantProcessor
	
	| salesBook cart |
		
	salesBook := testObjectsFactory emptySalesbook .
	cart  := testObjectsFactory cartWithDefaultCatalogAndProducts .
	
	Cashier new checkout: cart 
				withCard: testObjectsFactory creditCardValidAndNotExpired 
				on: testObjectsFactory today 
				registeringOn: salesBook 
				processingWith: NoErrorMerchantProcessor new.
	
	self assert: salesBook includes: cart totalValue 
	
	
	
	
	! !

Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessor category: 'TusLibros' stamp: 'GDH 6/17/2021 00:01:04'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

MerchantProcessor subclass: #NoErrorMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #NoErrorMerchantProcessor category: 'TusLibros' stamp: 'GDH 6/17/2021 00:01:10'!
MerchantProcessor subclass: #NoErrorMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessor methodsFor: 'no messages' stamp: 'GDH 6/17/2021 00:02:01'!
process: aCart withCard: aCreditCard
	
	^self subclassResponsibility ! !
!NoErrorMerchantProcessor methodsFor: 'no messages' stamp: 'GDH 6/17/2021 00:03:15' overrides: 50930518!
process: aCart withCard: aCreditCard
	
	"Simula que salió bien"! !
!Cashier methodsFor: 'checkout' stamp: 'GDH 6/17/2021 00:04:06' prior: 50930300!
checkout: aCart withCard: aCreditCard on: purchaseGregorianMonthOfYear registeringOn: aSalesbook processingWith: aMerchantProcessor     
	
	(aCart isEmpty) ifTrue: [ ^self error: self class checkoutWithEmptyCartErrorMessage ].
	
	(aCreditCard isExpiredOn: purchaseGregorianMonthOfYear) ifTrue: [ ^self error: Cashier expiredCreditCardErrorMessage ].
	
	aMerchantProcessor process: aCart withCard: aCreditCard .
	
	aSalesbook add: aCart totalValue.
	
	^ aCart totalValue.
	
	
	! !

!testRun: #MarketTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'GDH 6/17/2021 00:04:09'!
PASSED!

!testRun: #MarketTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/17/2021 00:04:09'!
PASSED!

!testRun: #MarketTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'GDH 6/17/2021 00:04:09'!
PASSED!

!testRun: #MarketTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/17/2021 00:04:09'!
PASSED!

!testRun: #MarketTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/17/2021 00:04:09'!
PASSED!

!testRun: #MarketTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/17/2021 00:04:09'!
PASSED!

!testRun: #MarketTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'GDH 6/17/2021 00:04:09'!
PASSED!

!testRun: #MarketTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/17/2021 00:04:09'!
PASSED!

!testRun: #MarketTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'GDH 6/17/2021 00:04:09'!
PASSED!

!testRun: #MarketTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'GDH 6/17/2021 00:04:09'!
PASSED!

!testRun: #MarketTest #test11CheckoutWithValidCartAndCreditCardShouldProcessSuccesfullyOnMerchantProcessor stamp: 'GDH 6/17/2021 00:04:09'!
PASSED!

!testRun: #MarketTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'GDH 6/17/2021 00:04:11'!
PASSED!

!testRun: #MarketTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/17/2021 00:04:11'!
PASSED!

!testRun: #MarketTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'GDH 6/17/2021 00:04:11'!
PASSED!

!testRun: #MarketTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/17/2021 00:04:11'!
PASSED!

!testRun: #MarketTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/17/2021 00:04:11'!
PASSED!

!testRun: #MarketTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/17/2021 00:04:11'!
PASSED!

!testRun: #MarketTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'GDH 6/17/2021 00:04:11'!
PASSED!

!testRun: #MarketTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/17/2021 00:04:11'!
PASSED!

!testRun: #MarketTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'GDH 6/17/2021 00:04:11'!
PASSED!

!testRun: #MarketTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'GDH 6/17/2021 00:04:11'!
PASSED!

!testRun: #MarketTest #test11CheckoutWithValidCartAndCreditCardShouldProcessSuccesfullyOnMerchantProcessor stamp: 'GDH 6/17/2021 00:04:11'!
PASSED!
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/17/2021 00:05:28'!
test12CheckoutWithCreditCardErrorsOnProcessShouldRaiseAnError
	
	| salesBook cart |
		
	salesBook := testObjectsFactory emptySalesbook .
	cart  := testObjectsFactory cartWithDefaultCatalogAndProducts .
	
	Cashier new checkout: cart 
				withCard: testObjectsFactory creditCardValidAndNotExpired 
				on: testObjectsFactory today 
				registeringOn: salesBook 
				processingWith: NoErrorMerchantProcessor new.
	
	self assert: salesBook includes: cart totalValue 
	
	
	
	
	! !

!classDefinition: #ErrorMerchantProcessor category: 'TusLibros' stamp: 'GDH 6/17/2021 00:07:18'!
MerchantProcessor subclass: #ErrorMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/17/2021 00:06:50' prior: 50930633!
test12CheckoutWithCreditCardErrorsOnProcessShouldRaiseAnError
	
	| salesBook cart |
		
	salesBook := testObjectsFactory emptySalesbook .
	cart  := testObjectsFactory cartWithDefaultCatalogAndProducts .
	
	Cashier new checkout: cart 
				withCard: testObjectsFactory creditCardValidAndNotExpired 
				on: testObjectsFactory today 
				registeringOn: salesBook 
				processingWith: ErrorMerchantProcessor new.
	
	self assert: salesBook isEmpty 
	
	
	
	
	! !
!ErrorMerchantProcessor methodsFor: 'no messages' stamp: 'GDH 6/17/2021 00:08:13' overrides: 50930518!
process: aCart withCard: aCreditCard
	
	^self error: 'as'! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/17/2021 00:16:13'!
test12CheckoutWithCreditCardErrorsOnProcessShouldRaiseAServerError
	
	| salesBook cart |
		
	salesBook := testObjectsFactory emptySalesbook .
	cart  := testObjectsFactory cartWithDefaultCatalogAndProducts .
	
	self should: [ Cashier new checkout: cart 
				withCard: testObjectsFactory creditCardValidAndNotExpired 
				on: testObjectsFactory today 
				registeringOn: salesBook 
				processingWith: ErrorMerchantProcessor new. ]
		raise: ServerError.
			
	
	self assert: salesBook isEmpty 
	
	
	
	
	! !

TestCase subclass: #MarketTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MarketTest category: 'TusLibros' stamp: 'GDH 6/17/2021 00:16:26'!
TestCase subclass: #MarketTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!methodRemoval: MarketTest #test12CheckoutWithCreditCardErrorsOnProcessShouldRaiseAnError stamp: 'GDH 6/17/2021 00:16:39'!
test12CheckoutWithCreditCardErrorsOnProcessShouldRaiseAnError
	
	| salesBook cart |
		
	salesBook := testObjectsFactory emptySalesbook .
	cart  := testObjectsFactory cartWithDefaultCatalogAndProducts .
	
	Cashier new checkout: cart 
				withCard: testObjectsFactory creditCardValidAndNotExpired 
				on: testObjectsFactory today 
				registeringOn: salesBook 
				processingWith: ErrorMerchantProcessor new.
	
	self assert: salesBook isEmpty 
	
	
	
	
	!

Error subclass: #MerchantProcessorError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorError category: 'TusLibros' stamp: 'GDH 6/17/2021 00:19:18'!
Error subclass: #MerchantProcessorError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MerchantProcessorError stamp: 'GDH 6/17/2021 00:21:22'!
Error subclass: #MerchantProcessorError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/17/2021 00:22:29' prior: 50930682!
test12CheckoutWithCreditCardErrorsOnProcessShouldRaiseAServerError
	
	| salesBook cart |
		
	salesBook := testObjectsFactory emptySalesbook .
	cart  := testObjectsFactory cartWithDefaultCatalogAndProducts .
	
	self should: [ Cashier new checkout: cart 
				withCard: testObjectsFactory creditCardValidAndNotExpired 
				on: testObjectsFactory today 
				registeringOn: salesBook 
				processingWith: ErrorMerchantProcessor new. ]
		raise: Error - MessageNotUnderstood.
			
	
	self assert: salesBook isEmpty 
	
	
	
	
	! !

!testRun: #MarketTest #test12CheckoutWithCreditCardErrorsOnProcessShouldRaiseAServerError stamp: 'GDH 6/17/2021 00:22:38'!
PASSED!

!testRun: #MarketTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'GDH 6/17/2021 00:22:38'!
PASSED!

!testRun: #MarketTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/17/2021 00:22:38'!
PASSED!

!testRun: #MarketTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'GDH 6/17/2021 00:22:38'!
PASSED!

!testRun: #MarketTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/17/2021 00:22:38'!
PASSED!

!testRun: #MarketTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/17/2021 00:22:38'!
PASSED!

!testRun: #MarketTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/17/2021 00:22:38'!
PASSED!

!testRun: #MarketTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'GDH 6/17/2021 00:22:38'!
PASSED!

!testRun: #MarketTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/17/2021 00:22:38'!
PASSED!

!testRun: #MarketTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'GDH 6/17/2021 00:22:38'!
PASSED!

!testRun: #MarketTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'GDH 6/17/2021 00:22:38'!
PASSED!

!testRun: #MarketTest #test11CheckoutWithValidCartAndCreditCardShouldProcessSuccesfullyOnMerchantProcessor stamp: 'GDH 6/17/2021 00:22:38'!
PASSED!

!testRun: #MarketTest #test12CheckoutWithCreditCardErrorsOnProcessShouldRaiseAServerError stamp: 'GDH 6/17/2021 00:22:38'!
PASSED!
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/17/2021 00:26:50' prior: 50930749!
test12CheckoutWithCreditCardErrorsOnProcessShouldRaiseAServerError
	
	| salesBook cart |
		
	salesBook := testObjectsFactory emptySalesbook .
	cart  := testObjectsFactory cartWithDefaultCatalogAndProducts .
	
	self should: [ Cashier new checkout: cart 
				withCard: testObjectsFactory creditCardValidAndNotExpired 
				on: testObjectsFactory today 
				registeringOn: salesBook 
				processingWith: ErrorMerchantProcessor new. ]
		raise: Error - MessageNotUnderstood
		withMessageText: ''.
			
	
	self assert: salesBook isEmpty 
	
	
	
	
	! !
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/17/2021 00:30:19' prior: 50930820!
test12CheckoutWithCreditCardErrorsOnProcessShouldRaiseAServerError
	
	| salesBook cart |
		
	salesBook := testObjectsFactory emptySalesbook .
	cart  := testObjectsFactory cartWithDefaultCatalogAndProducts .
		
	self should: [ Cashier new checkout: cart 
				withCard: testObjectsFactory creditCardValidAndNotExpired 
				on: testObjectsFactory today 
				registeringOn: salesBook 
				processingWith: ErrorMerchantProcessor new. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (anError messageText beginsWith: MerchantProcessor formatServerErrorMessageText) ].
				
	self assert: salesBook isEmpty 
	
	
	
	
	! !
!MerchantProcessor class methodsFor: 'no messages' stamp: 'GDH 6/17/2021 00:31:18'!
formatServerErrorMessageText
	
	^'Error de server: '! !
!ErrorMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'GDH 6/17/2021 00:32:41' prior: 50930677 overrides: 50930518!
process: aCart withCard: aCreditCard
	
	^self error: self class formatServerErrorMessageText , ' error simulado. '! !

!testRun: #MarketTest #test12CheckoutWithCreditCardErrorsOnProcessShouldRaiseAServerError stamp: 'GDH 6/17/2021 00:32:50'!
PASSED!

!testRun: #MarketTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'GDH 6/17/2021 00:32:50'!
PASSED!

!testRun: #MarketTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/17/2021 00:32:50'!
PASSED!

!testRun: #MarketTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'GDH 6/17/2021 00:32:50'!
PASSED!

!testRun: #MarketTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/17/2021 00:32:50'!
PASSED!

!testRun: #MarketTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/17/2021 00:32:50'!
PASSED!

!testRun: #MarketTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/17/2021 00:32:50'!
PASSED!

!testRun: #MarketTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'GDH 6/17/2021 00:32:50'!
PASSED!

!testRun: #MarketTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/17/2021 00:32:50'!
PASSED!

!testRun: #MarketTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'GDH 6/17/2021 00:32:50'!
PASSED!

!testRun: #MarketTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'GDH 6/17/2021 00:32:50'!
PASSED!

!testRun: #MarketTest #test11CheckoutWithValidCartAndCreditCardShouldProcessSuccesfullyOnMerchantProcessor stamp: 'GDH 6/17/2021 00:32:50'!
PASSED!

!testRun: #MarketTest #test12CheckoutWithCreditCardErrorsOnProcessShouldRaiseAServerError stamp: 'GDH 6/17/2021 00:32:50'!
PASSED!
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/17/2021 00:48:29'!
test13ProcessWithInvalidParametersShouldRaiseABadParametersError
	
	| salesBook cart |
		
	salesBook := testObjectsFactory emptySalesbook .
	cart  := testObjectsFactory cartWithDefaultCatalogAndProducts .
		
	self should: [ Cashier new checkout: cart 
				withCard: testObjectsFactory creditCardValidAndNotExpired 
				on: testObjectsFactory today 
				registeringOn: salesBook 
				processingWith: ErrorMerchantProcessor new. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (anError messageText beginsWith: MerchantProcessor formatServerErrorMessageText) ].
				
	self assert: salesBook isEmpty 
	
	
	
	
	! !

!classDefinition: #SimulatedBadParametersErrorMerchantProcessor category: 'TusLibros' stamp: 'GDH 6/17/2021 00:49:49'!
MerchantProcessor subclass: #SimulatedBadParametersErrorMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MarketTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/17/2021 00:49:39' prior: 50930927!
test13ProcessWithInvalidParametersShouldRaiseABadParametersError
	
	| salesBook cart |
		
	salesBook := testObjectsFactory emptySalesbook .
	cart  := testObjectsFactory cartWithDefaultCatalogAndProducts .
		
	self should: [ Cashier new checkout: cart 
				withCard: testObjectsFactory creditCardValidAndNotExpired 
				on: testObjectsFactory today 
				registeringOn: salesBook 
				processingWith: SimulatedBadParametersErrorMerchantProcessor new. ]
		raise: Error - MessageNotUnderstood
		withMessageText: MerchantProcessor badParamateresErrorMessageText.
				
	self assert: salesBook isEmpty 
	
	
	
	
	! !
!MerchantProcessor class methodsFor: 'erorr messages' stamp: 'GDH 6/17/2021 00:51:30'!
badParamateresErrorMessageText
	
	^self formatServerErrorMessageText , 'los parámetros tienen mal formato.'! !
!SimulatedBadParametersErrorMerchantProcessor methodsFor: 'no messages' stamp: 'GDH 6/17/2021 00:51:55' overrides: 50930518!
process: aCart withCard: aCreditCard
	
	^self class badParamateresErrorMessageText ! !

!testRun: #MarketTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'GDH 6/17/2021 00:51:57'!
PASSED!

!testRun: #MarketTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/17/2021 00:51:57'!
PASSED!

!testRun: #MarketTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'GDH 6/17/2021 00:51:57'!
PASSED!

!testRun: #MarketTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/17/2021 00:51:57'!
PASSED!

!testRun: #MarketTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/17/2021 00:51:57'!
PASSED!

!testRun: #MarketTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/17/2021 00:51:57'!
PASSED!

!testRun: #MarketTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'GDH 6/17/2021 00:51:57'!
PASSED!

!testRun: #MarketTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/17/2021 00:51:57'!
PASSED!

!testRun: #MarketTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'GDH 6/17/2021 00:51:57'!
PASSED!

!testRun: #MarketTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'GDH 6/17/2021 00:51:57'!
PASSED!

!testRun: #MarketTest #test11CheckoutWithValidCartAndCreditCardShouldProcessSuccesfullyOnMerchantProcessor stamp: 'GDH 6/17/2021 00:51:57'!
PASSED!

!testRun: #MarketTest #test12CheckoutWithCreditCardErrorsOnProcessShouldRaiseAServerError stamp: 'GDH 6/17/2021 00:51:57'!
PASSED!

!testRun: #MarketTest #test13ProcessWithInvalidParametersShouldRaiseABadParametersError stamp: 'GDH 6/17/2021 00:51:57'!
FAILURE!

!testRun: #MarketTest #test13ProcessWithInvalidParametersShouldRaiseABadParametersError stamp: 'GDH 6/17/2021 00:51:57'!
FAILURE!
!SimulatedBadParametersErrorMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'GDH 6/17/2021 00:52:20' prior: 50930990 overrides: 50930518!
process: aCart withCard: aCreditCard
	
	^self error: self class badParamateresErrorMessageText ! !

!testRun: #MarketTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'GDH 6/17/2021 00:52:22'!
PASSED!

!testRun: #MarketTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/17/2021 00:52:22'!
PASSED!

!testRun: #MarketTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'GDH 6/17/2021 00:52:22'!
PASSED!

!testRun: #MarketTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/17/2021 00:52:22'!
PASSED!

!testRun: #MarketTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/17/2021 00:52:22'!
PASSED!

!testRun: #MarketTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/17/2021 00:52:22'!
PASSED!

!testRun: #MarketTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'GDH 6/17/2021 00:52:22'!
PASSED!

!testRun: #MarketTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/17/2021 00:52:22'!
PASSED!

!testRun: #MarketTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'GDH 6/17/2021 00:52:22'!
PASSED!

!testRun: #MarketTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'GDH 6/17/2021 00:52:22'!
PASSED!

!testRun: #MarketTest #test11CheckoutWithValidCartAndCreditCardShouldProcessSuccesfullyOnMerchantProcessor stamp: 'GDH 6/17/2021 00:52:22'!
PASSED!

!testRun: #MarketTest #test12CheckoutWithCreditCardErrorsOnProcessShouldRaiseAServerError stamp: 'GDH 6/17/2021 00:52:22'!
PASSED!

!testRun: #MarketTest #test13ProcessWithInvalidParametersShouldRaiseABadParametersError stamp: 'GDH 6/17/2021 00:52:22'!
PASSED!

!classRenamed: #MarketTest as: #StoreTest stamp: 'GDH 6/17/2021 00:56:31'!
Smalltalk renameClassNamed: #MarketTest as: #StoreTest!

!classRenamed: #MarketTestObjectsFactory as: #StoreTestObjectsFactory stamp: 'GDH 6/17/2021 00:56:40'!
Smalltalk renameClassNamed: #MarketTestObjectsFactory as: #StoreTestObjectsFactory!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/17/2021 00:56:40' prior: 50928269 overrides: 16927572!
setUp
	
	testObjectsFactory := StoreTestObjectsFactory new.! !
!NoErrorMerchantProcessor methodsFor: 'processing' stamp: 'GDH 6/17/2021 00:58:52'!
process: aCart debitFrom: aCreditCard
	
	"Simula que salió bien"! !
!ErrorMerchantProcessor methodsFor: 'processing' stamp: 'GDH 6/17/2021 00:58:52'!
process: aCart debitFrom: aCreditCard
	
	^self error: self class formatServerErrorMessageText , ' error simulado. '! !
!SimulatedBadParametersErrorMerchantProcessor methodsFor: 'processing' stamp: 'GDH 6/17/2021 00:58:52'!
process: aCart debitFrom: aCreditCard
	
	^self error: self class badParamateresErrorMessageText ! !
!MerchantProcessor methodsFor: 'processing' stamp: 'GDH 6/17/2021 00:58:52'!
process: aCart debitFrom: aCreditCard
	
	^self subclassResponsibility ! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'GDH 6/17/2021 00:58:52' prior: 50930529!
checkout: aCart withCard: aCreditCard on: purchaseGregorianMonthOfYear registeringOn: aSalesbook processingWith: aMerchantProcessor     
	
	(aCart isEmpty) ifTrue: [ ^self error: self class checkoutWithEmptyCartErrorMessage ].
	
	(aCreditCard isExpiredOn: purchaseGregorianMonthOfYear) ifTrue: [ ^self error: Cashier expiredCreditCardErrorMessage ].
	
	aMerchantProcessor process: aCart debitFrom: aCreditCard .
	
	aSalesbook add: aCart totalValue.
	
	^ aCart totalValue.
	
	
	! !

!methodRemoval: NoErrorMerchantProcessor #process:withCard: stamp: 'GDH 6/17/2021 00:58:52'!
process: aCart withCard: aCreditCard
	
	"Simula que salió bien"!

!methodRemoval: ErrorMerchantProcessor #process:withCard: stamp: 'GDH 6/17/2021 00:58:52'!
process: aCart withCard: aCreditCard
	
	^self error: self class formatServerErrorMessageText , ' error simulado. '!

!methodRemoval: SimulatedBadParametersErrorMerchantProcessor #process:withCard: stamp: 'GDH 6/17/2021 00:58:52'!
process: aCart withCard: aCreditCard
	
	^self error: self class badParamateresErrorMessageText !

!methodRemoval: MerchantProcessor #process:withCard: stamp: 'GDH 6/17/2021 00:58:52'!
process: aCart withCard: aCreditCard
	
	^self subclassResponsibility !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GDH 6/17/2021 00:58:56'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GDH 6/17/2021 00:58:56'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'GDH 6/17/2021 00:58:56'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'GDH 6/17/2021 00:58:56'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'GDH 6/17/2021 00:58:56'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'GDH 6/17/2021 00:58:56'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'GDH 6/17/2021 00:58:56'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'GDH 6/17/2021 00:58:56'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GDH 6/17/2021 00:59:07'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GDH 6/17/2021 00:59:16'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GDH 6/17/2021 00:59:25'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GDH 6/17/2021 00:59:58'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GDH 6/17/2021 01:02:19'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GDH 6/17/2021 01:02:19'!
ERROR!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'GDH 6/17/2021 01:03:11'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'setUp/tearDown' stamp: 'GDH 6/17/2021 01:03:10' overrides: 16927572!
setUp
	
	testObjectsFactory := StoreTestObjectsFactory new.! !
!CartTest methodsFor: 'tests' stamp: 'GDH 6/17/2021 01:04:27' prior: 50927509!
test01NewCartsAreCreatedEmpty

	self assert: testObjectsFactory cartWithDefaultCatalog isEmpty! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GDH 6/17/2021 01:04:28'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GDH 6/17/2021 01:04:28'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GDH 6/17/2021 01:04:28'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'GDH 6/17/2021 01:04:28'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'GDH 6/17/2021 01:04:28'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'GDH 6/17/2021 01:04:28'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'GDH 6/17/2021 01:04:28'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'GDH 6/17/2021 01:04:28'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'GDH 6/17/2021 01:04:28'!
ERROR!
!CartTest methodsFor: 'support' stamp: 'GDH 6/17/2021 01:05:01' prior: 50927589!
defaultCatalog
	
	^ testObjectsFactory defaultCatalog ! !
!CartTest methodsFor: 'support' stamp: 'GDH 6/17/2021 01:05:11' prior: 50927598!
itemSellByTheStore
	
	^ '1'! !
!CartTest methodsFor: 'support' stamp: 'GDH 6/17/2021 01:05:26' prior: 50927585!
createCart
	
	^testObjectsFactory cartWithDefaultCatalog ! !
!CartTest methodsFor: 'tests' stamp: 'GDH 6/17/2021 01:05:35' prior: 50931249!
test01NewCartsAreCreatedEmpty

	self assert: self createCart isEmpty! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GDH 6/17/2021 01:05:36'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GDH 6/17/2021 01:05:36'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GDH 6/17/2021 01:05:36'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'GDH 6/17/2021 01:05:36'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'GDH 6/17/2021 01:05:36'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'GDH 6/17/2021 01:05:36'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'GDH 6/17/2021 01:05:36'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'GDH 6/17/2021 01:05:36'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'GDH 6/17/2021 01:05:36'!
PASSED!

!testRun: #StoreTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'GDH 6/17/2021 01:05:40'!
PASSED!

!testRun: #StoreTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/17/2021 01:05:40'!
PASSED!

!testRun: #StoreTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'GDH 6/17/2021 01:05:40'!
PASSED!

!testRun: #StoreTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/17/2021 01:05:40'!
PASSED!

!testRun: #StoreTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/17/2021 01:05:40'!
PASSED!

!testRun: #StoreTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/17/2021 01:05:40'!
PASSED!

!testRun: #StoreTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'GDH 6/17/2021 01:05:40'!
PASSED!

!testRun: #StoreTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/17/2021 01:05:40'!
PASSED!

!testRun: #StoreTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'GDH 6/17/2021 01:05:40'!
PASSED!

!testRun: #StoreTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'GDH 6/17/2021 01:05:40'!
PASSED!

!testRun: #StoreTest #test11CheckoutWithValidCartAndCreditCardShouldProcessSuccesfullyOnMerchantProcessor stamp: 'GDH 6/17/2021 01:05:40'!
PASSED!

!testRun: #StoreTest #test12CheckoutWithCreditCardErrorsOnProcessShouldRaiseAServerError stamp: 'GDH 6/17/2021 01:05:40'!
PASSED!

!testRun: #StoreTest #test13ProcessWithInvalidParametersShouldRaiseABadParametersError stamp: 'GDH 6/17/2021 01:05:40'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GDH 6/17/2021 01:05:43'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GDH 6/17/2021 01:05:43'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'GDH 6/17/2021 01:05:43'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'GDH 6/17/2021 01:05:43'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'GDH 6/17/2021 01:05:43'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'GDH 6/17/2021 01:05:43'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'GDH 6/17/2021 01:05:43'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'GDH 6/17/2021 01:05:43'!
PASSED!

!testRun: #StoreTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'GDH 6/17/2021 01:05:43'!
PASSED!

!testRun: #StoreTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/17/2021 01:05:43'!
PASSED!

!testRun: #StoreTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'GDH 6/17/2021 01:05:43'!
PASSED!

!testRun: #StoreTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/17/2021 01:05:43'!
PASSED!

!testRun: #StoreTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/17/2021 01:05:43'!
PASSED!

!testRun: #StoreTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/17/2021 01:05:43'!
PASSED!

!testRun: #StoreTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'GDH 6/17/2021 01:05:43'!
PASSED!

!testRun: #StoreTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/17/2021 01:05:43'!
PASSED!

!testRun: #StoreTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'GDH 6/17/2021 01:05:43'!
PASSED!

!testRun: #StoreTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'GDH 6/17/2021 01:05:43'!
PASSED!

!testRun: #StoreTest #test11CheckoutWithValidCartAndCreditCardShouldProcessSuccesfullyOnMerchantProcessor stamp: 'GDH 6/17/2021 01:05:43'!
PASSED!

!testRun: #StoreTest #test12CheckoutWithCreditCardErrorsOnProcessShouldRaiseAServerError stamp: 'GDH 6/17/2021 01:05:43'!
PASSED!

!testRun: #StoreTest #test13ProcessWithInvalidParametersShouldRaiseABadParametersError stamp: 'GDH 6/17/2021 01:05:43'!
PASSED!

!methodRemoval: CreditCard class #assertExpirationYearIsValid: stamp: 'GDH 6/17/2021 01:06:51'!
assertExpirationYearIsValid: aGregorianMonthOfYear


	( (aGregorianMonthOfYear year number numberOfDigitsInBase: 10) isEqualTo: 4 ) ifFalse: [ ^self error: self invalidCreditCardYearErrorDescription ].
!
!CreditCard class methodsFor: 'instance creation' stamp: 'GDH 6/17/2021 01:07:07' prior: 50927979!
number: aCreditCardNumber expiring: anExpirationDate for: aUserName   

	self assertCreditCardNumberIsValid: aCreditCardNumber .
		
	self assertUserNameSizeIsValid: aUserName.
	
	^self new initializeNumber: aCreditCardNumber expiring: anExpirationDate for: aUserName.! !

!testRun: #StoreTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'GDH 6/17/2021 01:07:09'!
PASSED!

!testRun: #StoreTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/17/2021 01:07:09'!
PASSED!

!testRun: #StoreTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'GDH 6/17/2021 01:07:09'!
PASSED!

!testRun: #StoreTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/17/2021 01:07:09'!
PASSED!

!testRun: #StoreTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/17/2021 01:07:09'!
PASSED!

!testRun: #StoreTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/17/2021 01:07:09'!
PASSED!

!testRun: #StoreTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'GDH 6/17/2021 01:07:09'!
FAILURE!

!testRun: #StoreTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/17/2021 01:07:09'!
PASSED!

!testRun: #StoreTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'GDH 6/17/2021 01:07:09'!
PASSED!

!testRun: #StoreTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'GDH 6/17/2021 01:07:09'!
PASSED!

!testRun: #StoreTest #test11CheckoutWithValidCartAndCreditCardShouldProcessSuccesfullyOnMerchantProcessor stamp: 'GDH 6/17/2021 01:07:09'!
PASSED!

!testRun: #StoreTest #test12CheckoutWithCreditCardErrorsOnProcessShouldRaiseAServerError stamp: 'GDH 6/17/2021 01:07:09'!
PASSED!

!testRun: #StoreTest #test13ProcessWithInvalidParametersShouldRaiseABadParametersError stamp: 'GDH 6/17/2021 01:07:09'!
PASSED!

!testRun: #StoreTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'GDH 6/17/2021 01:07:09'!
FAILURE!

!methodRemoval: StoreTest #test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError stamp: 'GDH 6/17/2021 01:07:28'!
test07CheckOutWithInvalidCreditCardExpirationDateShouldRaiseAnError
		
	| cart catalog |
	
	catalog := Dictionary new.
	catalog add: '1' -> 10.
	catalog add: '2' -> 20.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: '1'.
	cart add: '2'.
	
	self 
		should: [ 
			Cashier new 
			checkout: cart 
			withCard: (CreditCard number: 1111222233334444 
				expiring: (GregorianMonthOfYear yearNumber: 19988 monthNumber: 10) for: 'Matias') on: (GregorianMonthOfYear yearNumber: 2021 monthNumber: 4) registeringOn: OrderedCollection new processingWith: NoErrorMerchantProcessor new ]
		raise:  Error
		withMessageText: CreditCard invalidCreditCardYearErrorDescription.
	
	
	
	
	!

!testRun: #StoreTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'GDH 6/17/2021 01:07:30'!
PASSED!

!testRun: #StoreTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/17/2021 01:07:30'!
PASSED!

!testRun: #StoreTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'GDH 6/17/2021 01:07:30'!
PASSED!

!testRun: #StoreTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/17/2021 01:07:30'!
PASSED!

!testRun: #StoreTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/17/2021 01:07:30'!
PASSED!

!testRun: #StoreTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/17/2021 01:07:30'!
PASSED!

!testRun: #StoreTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/17/2021 01:07:30'!
PASSED!

!testRun: #StoreTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'GDH 6/17/2021 01:07:30'!
PASSED!

!testRun: #StoreTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'GDH 6/17/2021 01:07:30'!
PASSED!

!testRun: #StoreTest #test11CheckoutWithValidCartAndCreditCardShouldProcessSuccesfullyOnMerchantProcessor stamp: 'GDH 6/17/2021 01:07:30'!
PASSED!

!testRun: #StoreTest #test12CheckoutWithCreditCardErrorsOnProcessShouldRaiseAServerError stamp: 'GDH 6/17/2021 01:07:30'!
PASSED!

!testRun: #StoreTest #test13ProcessWithInvalidParametersShouldRaiseABadParametersError stamp: 'GDH 6/17/2021 01:07:30'!
PASSED!
!StoreTest methodsFor: 'testing' stamp: 'GDH 6/17/2021 01:07:37'!
test07CheckOutWithInvalidCreditCardNameShouldRaiseAnError

	self assertCheckout: testObjectsFactory cartWithDefaultCatalogAndProducts 
		 WithCreditCardCreatedAs: [ CreditCard number: 1111222233334444
									expiring: testObjectsFactory today
									for: 'Este nombre es muy largo para una tarjeta de credito' ]
		 ShouldRaiseErrorWithMessageText: CreditCard invalidCreditCardNameErrorDescription
	
	
	
	
	! !

!methodRemoval: StoreTest #test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/17/2021 01:07:37'!
test08CheckOutWithInvalidCreditCardNameShouldRaiseAnError

	self assertCheckout: testObjectsFactory cartWithDefaultCatalogAndProducts 
		 WithCreditCardCreatedAs: [ CreditCard number: 1111222233334444
									expiring: testObjectsFactory today
									for: 'Este nombre es muy largo para una tarjeta de credito' ]
		 ShouldRaiseErrorWithMessageText: CreditCard invalidCreditCardNameErrorDescription
	
	
	
	
	!
!StoreTest methodsFor: 'testing' stamp: 'GDH 6/17/2021 01:07:45'!
test08CheckOutWithExpiredCardShouldRaiseAnError

	self assertCheckout: testObjectsFactory cartWithDefaultCatalogAndProducts 
		 WithCreditCard: testObjectsFactory creditCardValidButExpired
		 ShouldRaiseErrorWithMessageText: Cashier expiredCreditCardErrorMessage
	
	
	
	
	! !

!methodRemoval: StoreTest #test09CheckOutWithExpiredCardShouldRaiseAnError stamp: 'GDH 6/17/2021 01:07:45'!
test09CheckOutWithExpiredCardShouldRaiseAnError

	self assertCheckout: testObjectsFactory cartWithDefaultCatalogAndProducts 
		 WithCreditCard: testObjectsFactory creditCardValidButExpired
		 ShouldRaiseErrorWithMessageText: Cashier expiredCreditCardErrorMessage
	
	
	
	
	!
!StoreTest methodsFor: 'testing' stamp: 'GDH 6/17/2021 01:07:52'!
test09SuccessfulCheckoutShouldRegisterSaleOnSalesBook
		
	| cart salesBook |
	
	cart := testObjectsFactory cartWithDefaultCatalog .
	cart add: '1'.
	cart add: '2'.
	
	salesBook := testObjectsFactory emptySalesbook .
	
	Cashier new 
		checkout: cart 
		withCard: testObjectsFactory creditCardValidAndNotExpired 
		on: testObjectsFactory today 
		registeringOn: salesBook processingWith: NoErrorMerchantProcessor new .
		
	self assert: ( salesBook includes: cart totalValue ).
	
	
	
	
	! !

!methodRemoval: StoreTest #test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'GDH 6/17/2021 01:07:52'!
test10SuccessfulCheckoutShouldRegisterSaleOnSalesBook
		
	| cart salesBook |
	
	cart := testObjectsFactory cartWithDefaultCatalog .
	cart add: '1'.
	cart add: '2'.
	
	salesBook := testObjectsFactory emptySalesbook .
	
	Cashier new 
		checkout: cart 
		withCard: testObjectsFactory creditCardValidAndNotExpired 
		on: testObjectsFactory today 
		registeringOn: salesBook processingWith: NoErrorMerchantProcessor new .
		
	self assert: ( salesBook includes: cart totalValue ).
	
	
	
	
	!
!StoreTest methodsFor: 'testing' stamp: 'GDH 6/17/2021 01:07:58'!
test10CheckoutWithValidCartAndCreditCardShouldProcessSuccesfullyOnMerchantProcessor
	
	| salesBook cart |
		
	salesBook := testObjectsFactory emptySalesbook .
	cart  := testObjectsFactory cartWithDefaultCatalogAndProducts .
	
	Cashier new checkout: cart 
				withCard: testObjectsFactory creditCardValidAndNotExpired 
				on: testObjectsFactory today 
				registeringOn: salesBook 
				processingWith: NoErrorMerchantProcessor new.
	
	self assert: salesBook includes: cart totalValue 
	
	
	
	
	! !

!methodRemoval: StoreTest #test11CheckoutWithValidCartAndCreditCardShouldProcessSuccesfullyOnMerchantProcessor stamp: 'GDH 6/17/2021 01:07:58'!
test11CheckoutWithValidCartAndCreditCardShouldProcessSuccesfullyOnMerchantProcessor
	
	| salesBook cart |
		
	salesBook := testObjectsFactory emptySalesbook .
	cart  := testObjectsFactory cartWithDefaultCatalogAndProducts .
	
	Cashier new checkout: cart 
				withCard: testObjectsFactory creditCardValidAndNotExpired 
				on: testObjectsFactory today 
				registeringOn: salesBook 
				processingWith: NoErrorMerchantProcessor new.
	
	self assert: salesBook includes: cart totalValue 
	
	
	
	
	!
!StoreTest methodsFor: 'testing' stamp: 'GDH 6/17/2021 01:08:03'!
test11CheckoutWithCreditCardErrorsOnProcessShouldRaiseAServerError
	
	| salesBook cart |
		
	salesBook := testObjectsFactory emptySalesbook .
	cart  := testObjectsFactory cartWithDefaultCatalogAndProducts .
		
	self should: [ Cashier new checkout: cart 
				withCard: testObjectsFactory creditCardValidAndNotExpired 
				on: testObjectsFactory today 
				registeringOn: salesBook 
				processingWith: ErrorMerchantProcessor new. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (anError messageText beginsWith: MerchantProcessor formatServerErrorMessageText) ].
				
	self assert: salesBook isEmpty 
	
	
	
	
	! !

!methodRemoval: StoreTest #test12CheckoutWithCreditCardErrorsOnProcessShouldRaiseAServerError stamp: 'GDH 6/17/2021 01:08:03'!
test12CheckoutWithCreditCardErrorsOnProcessShouldRaiseAServerError
	
	| salesBook cart |
		
	salesBook := testObjectsFactory emptySalesbook .
	cart  := testObjectsFactory cartWithDefaultCatalogAndProducts .
		
	self should: [ Cashier new checkout: cart 
				withCard: testObjectsFactory creditCardValidAndNotExpired 
				on: testObjectsFactory today 
				registeringOn: salesBook 
				processingWith: ErrorMerchantProcessor new. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (anError messageText beginsWith: MerchantProcessor formatServerErrorMessageText) ].
				
	self assert: salesBook isEmpty 
	
	
	
	
	!
!StoreTest methodsFor: 'testing' stamp: 'GDH 6/17/2021 01:08:08'!
test12ProcessWithInvalidParametersShouldRaiseABadParametersError
	
	| salesBook cart |
		
	salesBook := testObjectsFactory emptySalesbook .
	cart  := testObjectsFactory cartWithDefaultCatalogAndProducts .
		
	self should: [ Cashier new checkout: cart 
				withCard: testObjectsFactory creditCardValidAndNotExpired 
				on: testObjectsFactory today 
				registeringOn: salesBook 
				processingWith: SimulatedBadParametersErrorMerchantProcessor new. ]
		raise: Error - MessageNotUnderstood
		withMessageText: MerchantProcessor badParamateresErrorMessageText.
				
	self assert: salesBook isEmpty 
	
	
	
	
	! !

!methodRemoval: StoreTest #test13ProcessWithInvalidParametersShouldRaiseABadParametersError stamp: 'GDH 6/17/2021 01:08:08'!
test13ProcessWithInvalidParametersShouldRaiseABadParametersError
	
	| salesBook cart |
		
	salesBook := testObjectsFactory emptySalesbook .
	cart  := testObjectsFactory cartWithDefaultCatalogAndProducts .
		
	self should: [ Cashier new checkout: cart 
				withCard: testObjectsFactory creditCardValidAndNotExpired 
				on: testObjectsFactory today 
				registeringOn: salesBook 
				processingWith: SimulatedBadParametersErrorMerchantProcessor new. ]
		raise: Error - MessageNotUnderstood
		withMessageText: MerchantProcessor badParamateresErrorMessageText.
				
	self assert: salesBook isEmpty 
	
	
	
	
	!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GDH 6/17/2021 01:08:15'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GDH 6/17/2021 01:08:15'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'GDH 6/17/2021 01:08:15'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'GDH 6/17/2021 01:08:15'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'GDH 6/17/2021 01:08:15'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'GDH 6/17/2021 01:08:15'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'GDH 6/17/2021 01:08:15'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'GDH 6/17/2021 01:08:15'!
PASSED!

!testRun: #StoreTest #test01CheckoutWithEmptyCartShouldRaiseAnError stamp: 'GDH 6/17/2021 01:08:15'!
PASSED!

!testRun: #StoreTest #test02CheckoutCartWithOneItemShouldReturnCartTotalValue stamp: 'GDH 6/17/2021 01:08:15'!
PASSED!

!testRun: #StoreTest #test03CheckoutCartWithManyItemShouldReturnCartTotalValue stamp: 'GDH 6/17/2021 01:08:15'!
PASSED!

!testRun: #StoreTest #test04CheckOutWithInvalidLengthCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/17/2021 01:08:15'!
PASSED!

!testRun: #StoreTest #test05CheckOutWithNegativeCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/17/2021 01:08:15'!
PASSED!

!testRun: #StoreTest #test06CheckOutWithNonIntegerCreditCardNumberShouldRaiseAnError stamp: 'GDH 6/17/2021 01:08:15'!
PASSED!

!testRun: #StoreTest #test07CheckOutWithInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/17/2021 01:08:15'!
PASSED!

!testRun: #StoreTest #test08CheckOutWithExpiredCardShouldRaiseAnError stamp: 'GDH 6/17/2021 01:08:15'!
PASSED!

!testRun: #StoreTest #test09SuccessfulCheckoutShouldRegisterSaleOnSalesBook stamp: 'GDH 6/17/2021 01:08:15'!
PASSED!

!testRun: #StoreTest #test10CheckoutWithValidCartAndCreditCardShouldProcessSuccesfullyOnMerchantProcessor stamp: 'GDH 6/17/2021 01:08:15'!
PASSED!

!testRun: #StoreTest #test11CheckoutWithCreditCardErrorsOnProcessShouldRaiseAServerError stamp: 'GDH 6/17/2021 01:08:15'!
PASSED!

!testRun: #StoreTest #test12ProcessWithInvalidParametersShouldRaiseABadParametersError stamp: 'GDH 6/17/2021 01:08:15'!
PASSED!