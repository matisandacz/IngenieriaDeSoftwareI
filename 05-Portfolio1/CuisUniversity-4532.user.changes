
----QUIT----(7 May 2021 03:13:58) CuisUniversity-4532.image priorSource: 18095465!

----STARTUP---- (10 May 2021 17:03:07) as C:\Users\matia\Downloads\windows64\windows64\CuisUniversity-4532.image!


----End fileIn of C:\Users\matia\Downloads\new\2021-1c\17-Portfolio 1\Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 5/17/2021 20:23:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 5/17/2021 20:23:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 5/17/2021 20:23:26'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 5/17/2021 20:23:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 5/17/2021 20:23:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 5/17/2021 20:23:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 5/17/2021 20:23:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 5/17/2021 20:23:26'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 5/17/2021 20:27:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 5/17/2021 20:27:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 5/17/2021 20:27:00'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 5/17/2021 20:27:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 5/17/2021 20:27:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 5/17/2021 20:27:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 5/17/2021 20:27:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 5/17/2021 20:27:00'!
FAILURE!

account balance!
!ReceptiveAccount methodsFor: 'balance' stamp: 'MS 5/17/2021 20:38:42' prior: 50898279!
balance

	^transactions sum: [ : aTransaction | 
		
		(aTransaction isKindOf: Deposit) ifTrue: [ aTransaction value ].
		(aTransaction isKindOf: Withdraw ) ifTrue: [ aTransaction value negative ].
		
		 ] ifEmpty: [ 0 ].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 5/17/2021 20:38:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 5/17/2021 20:38:46'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 5/17/2021 20:38:46'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 5/17/2021 20:38:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 5/17/2021 20:38:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 5/17/2021 20:38:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 5/17/2021 20:38:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 5/17/2021 20:38:57'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 5/17/2021 20:39:35'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 5/17/2021 20:40:04'!
ERROR!

aTransaction value negative!

aTransaction value negated!
!ReceptiveAccount methodsFor: 'balance' stamp: 'MS 5/17/2021 20:41:02' prior: 50898355!
balance

	^transactions sum: [ : aTransaction | 
		
		(aTransaction isKindOf: Deposit) ifTrue: [ aTransaction value ].
		(aTransaction isKindOf: Withdraw ) ifTrue: [ aTransaction value negated ].
		
		 ] ifEmpty: [ 0 ].! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 5/17/2021 20:41:04'!
ERROR!

aTransaction value!

aTransaction value negated!

3 negated + 5!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 5/17/2021 20:42:37'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 5/17/2021 20:43:40'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'MS 5/17/2021 20:44:23' prior: 50898405!
balance

	^transactions sum: [ : aTransaction | 
		
		(aTransaction isKindOf: Deposit) ifTrue: [ ^aTransaction value ].
		(aTransaction isKindOf: Withdraw ) ifTrue: [ ^aTransaction value negated ].
		
		 ] ifEmpty: [ 0 ].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 5/17/2021 20:44:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 5/17/2021 20:44:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 5/17/2021 20:44:25'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 5/17/2021 20:44:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 5/17/2021 20:44:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 5/17/2021 20:44:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 5/17/2021 20:44:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 5/17/2021 20:44:25'!
FAILURE!

aTransaction value!
!Deposit methodsFor: 'nil' stamp: 'MS 5/17/2021 20:50:14'!
m

	^value.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'MS 5/17/2021 20:53:25' prior: 50898429!
balance
	| transactionValue |

	^transactions sum: [ : aTransaction | 
		
		(aTransaction isKindOf: Deposit) ifTrue: [ transactionValue := aTransaction value ].
		(aTransaction isKindOf: Withdraw ) ifTrue: [ transactionValue := aTransaction value negated ].
		transactionValue.
		 ] ifEmpty: [ 0 ].! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'MS 5/17/2021 20:53:27' prior: 50898473!
balance
	| transactionValue |

	^transactions sum: [ : aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [ transactionValue := aTransaction value ].
		(aTransaction isKindOf: Withdraw ) ifTrue: [ transactionValue := aTransaction value negated ].
		transactionValue.
		 ] ifEmpty: [ 0 ].! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'MS 5/17/2021 20:53:30' prior: 50898486!
balance
	| transactionValue |

	^transactions sum: [ : aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [ transactionValue := aTransaction value ].
		(aTransaction isKindOf: Withdraw ) ifTrue: [ transactionValue := aTransaction value negated ].
		transactionValue.
		 ] ifEmpty: [ 0 ].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 5/17/2021 20:53:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 5/17/2021 20:53:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 5/17/2021 20:53:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 5/17/2021 20:53:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 5/17/2021 20:53:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 5/17/2021 20:53:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 5/17/2021 20:53:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 5/17/2021 20:53:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 5/17/2021 20:53:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 5/17/2021 20:53:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 5/17/2021 20:53:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 5/17/2021 20:53:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 5/17/2021 20:53:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 5/17/2021 20:53:41'!
PASSED!

Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'MS 5/17/2021 20:59:01'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'nil' stamp: 'MS 5/17/2021 21:03:48'!
test01EmptyPortfolioBalanceShouldBeZero

	self assert: (Portfolio new balance = 0).! !

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'MS 5/17/2021 21:04:10'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'nil' stamp: 'MS 5/17/2021 21:04:21'!
test01EmptyPortfolioBalanceShouldBeZero

	self assert: (Portfolio new balance = 0).! !

!methodRemoval: Portfolio #test01EmptyPortfolioBalanceShouldBeZero stamp: 'MS 5/17/2021 21:04:23'!
test01EmptyPortfolioBalanceShouldBeZero

	self assert: (Portfolio new balance = 0).!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceShouldBeZero stamp: 'MS 5/17/2021 21:04:40'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceShouldBeZero stamp: 'MS 5/17/2021 21:04:40'!
ERROR!

Object subclass: #Portfolio
	instanceVariableNames: 'balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'MS 5/17/2021 21:05:02'!
Object subclass: #Portfolio
	instanceVariableNames: 'balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'MS 5/17/2021 21:07:18'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'tests' stamp: 'MS 5/17/2021 21:10:01'!
test01EmptyPortfolioShouldHaveNoTransactionsForAnyAccount

	self assert: (Portfolio new balance = 0).! !

!methodRemoval: PortfolioTest #test01EmptyPortfolioBalanceShouldBeZero stamp: 'MS 5/17/2021 21:10:02'!
test01EmptyPortfolioBalanceShouldBeZero

	self assert: (Portfolio new balance = 0).!

----QUIT----(17 May 2021 21:56:47) CuisUniversity-4532.image priorSource: 18124589!

----STARTUP---- (20 May 2021 19:57:17) as C:\Users\matia\Downloads\windows64\windows64\CuisUniversity-4532.image!


!methodRemoval: PortfolioTest #test01EmptyPortfolioShouldHaveNoTransactionsForAnyAccount stamp: 'MS 5/20/2021 20:20:39'!
test01EmptyPortfolioShouldHaveNoTransactionsForAnyAccount

	self assert: (Portfolio new balance = 0).!
!PortfolioTest methodsFor: 'nil' stamp: 'MS 5/20/2021 20:21:00'!
test01EmptyPortfolioShouldHaveCeroBalance

	self assert: (Portfolio new balance = 0).! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/20/2021 20:21:04'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/20/2021 20:21:04'!
ERROR!
!Portfolio methodsFor: 'nil' stamp: 'MS 5/20/2021 20:21:20'!
balance

	^0.! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/20/2021 20:21:24'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/20/2021 20:22:38'!
test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances

	| portfolio acc1 acc2 |

	portfolio := Portfolio new.
	"portfolio add: 
	
	self assert: (Portfolio new balance = 0).
	"! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/20/2021 20:23:12' prior: 50898677!
test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances

	| portfolio acc1 |

	portfolio := Portfolio new.
	
	acc1 := ReceptiveAccount new.
	
	"portfolio add: 
	
	self assert: (Portfolio new balance = 0).
	"! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/20/2021 20:24:32' prior: 50898687!
test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances

	| portfolio acc1 deposit1 withdraw1|

	portfolio := Portfolio new.
	
	deposit1 := Deposit for: 100.
	withdraw1 := Withdraw for: 50.
	
	acc1 := ReceptiveAccount new.
	acc1 register: deposit1.
	acc1 register: withdraw1.
	
	"portfolio add: 
	
	self assert: (Portfolio new balance = 0).
	"! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/20/2021 20:24:46' prior: 50898698!
test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances

	| portfolio acc1 deposit1 withdraw1|

	portfolio := Portfolio new.
	
	deposit1 := Deposit for: 100.
	withdraw1 := Withdraw for: 50.
	
	acc1 := ReceptiveAccount new.
	acc1 register: deposit1.
	acc1 register: withdraw1.
	
	self assert: (Portfolio new balance = 0).
	
	"portfolio add: 
	
	
	"! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/20/2021 20:24:55' prior: 50898713!
test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances

	| portfolio acc1 deposit1 withdraw1|

	portfolio := Portfolio new.
	
	deposit1 := Deposit for: 100.
	withdraw1 := Withdraw for: 50.
	
	acc1 := ReceptiveAccount new.
	acc1 register: deposit1.
	acc1 register: withdraw1.
	
	self assert: (portfolio balance = 0).
	
	"portfolio add: 
	
	
	"! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/20/2021 20:25:23' prior: 50898728!
test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances

	| portfolio acc1 deposit1 withdraw1|

	portfolio := Portfolio new.
	
	deposit1 := Deposit for: 100.
	withdraw1 := Withdraw for: 50.
	
	acc1 := ReceptiveAccount new.
	acc1 register: deposit1.
	acc1 register: withdraw1.
	
	self assert: (portfolio balance = 50).
	! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/20/2021 20:25:32'!
FAILURE!

portfolio balance!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/20/2021 20:26:10'!
FAILURE!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/20/2021 20:26:10'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/20/2021 20:26:40' prior: 50898743!
test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances

	| portfolio acc1 deposit1 withdraw1|

	portfolio := Portfolio new.
	
	deposit1 := Deposit for: 100.
	withdraw1 := Withdraw for: 50.
	
	acc1 := ReceptiveAccount new.
	acc1 register: deposit1.
	acc1 register: withdraw1.
	
	portfolio add: acc1.
	
	self assert: (portfolio balance = 50).
	! !
!Portfolio methodsFor: 'nil' stamp: 'MS 5/20/2021 20:26:49'!
add: anAccount! !

Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'MS 5/20/2021 20:26:58'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'nil' stamp: 'MS 5/20/2021 20:27:11' overrides: 16896425!
initialize

	accounts := Collection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/20/2021 20:28:05' prior: 50898785!
add: anAccount

	accounts add: anAccount.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/20/2021 20:28:26' prior: 50898670!
balance

	"Iterar sobre los elementos de la coleccion y sumar su value"

	^0.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/20/2021 20:28:33' prior: 50898810!
balance

	"Iterar sobre los elementos de la coleccion y sumar su balance"

	^0.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/20/2021 20:30:38' prior: 50898816!
balance

	"Iterar sobre los elementos de la coleccion y sumar su balance"

	^(accounts collect: [:account | account balance]) sum.				

	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/20/2021 20:30:48' prior: 50898822!
balance

	"Iterar sobre los elementos de la coleccion y sumar su balance"
	^(accounts collect: [:account | account balance]) sum ifEmpty: [0].				

	! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/20/2021 20:31:07'!
ERROR!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/20/2021 20:31:08'!
ERROR!

a = Collection new!

a add: 5!

a := Collection new.
a add: 5.
a sum.!

a := OrderedCollection new.
a add: 5.
a sum.!

a := OrderedCollection new.
a add: 5.
a sum.!

a := OrderedCollection new.
a add: 5.
a sum.!

a := OrderedCollection new.
a add: 5.
a sum.!

a := OrderedCollection new.
a add: 5.
a sum.!

a := OrderedCollection new.
a add: 5.
a sum.!

a := OrderedCollection new.
a add: 5.
a sum.!

a := OrderedCollection new.
a add: 5.
a sum.!

a := OrderedCollection new.
a add: 5.
a sum.!

a := OrderedCollection new.
a add: 5.
a sum.!

a := OrderedCollection new.
a add: 5.
a sum.!

a := OrderedCollection new.
a add: 5.
a sum.!

x := OrderedCollection new.
x add: 5.
x sum.!

x := OrderedCollection new.
x add: 5.
x sum.!

x := OrderedCollection new.
x add: 5.
x sum.!

x := OrderedCollection new.
x add: 5.
x sum.!

x := OrderedCollection new.
x add: 5.
x sum.!

x := OrderedCollection new.
x add: 5.
x sum.!

x := OrderedCollection new.
x add: 5.
x sum.!

x := OrderedCollection new.
x add: 5.
x sum.!

x sum.!

x := OrderedCollection new.
x add: 5.
x sum. !

x := Collection new.
x add: 5.
x sum.  !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/20/2021 20:33:03' prior: 50898800 overrides: 16896425!
initialize

	accounts := OrderedCollection new.! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/20/2021 20:33:05'!
ERROR!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/20/2021 20:33:05'!
ERROR!

x := Collection new.
x add: 5.
x sum ifEmpty: [0]  !

x sum: 0 ifEmpty: 0!

x sum: [:elem | elem] ifEmpty: 0!

x := Collection new.
x add: 5.
x sum: [:elem | elem] ifEmpty: [0]!

x := Collection new.
x add: 5.
x sum: [:elem | elem] ifEmpty: [0].!

x := Collection new.
x add: 5.!

x := Collection new.!

x add: 5.!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/20/2021 20:38:01' prior: 50898830!
balance

	"Iterar sobre los elementos de la coleccion y sumar su balance"
	^(accounts collect: [:account | account balance]) sum: [ :a | a] ifEmpty: [0].				

	! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/20/2021 20:38:02'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/20/2021 20:38:02'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/20/2021 20:38:25' prior: 50898904!
balance

	"Iterar sobre los elementos de la coleccion y sumar su balance"
	^accounts sum: [ :account | account balance] ifEmpty: [0].				

	! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/20/2021 20:38:27'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/20/2021 20:38:27'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/20/2021 20:40:56' prior: 50898771!
test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances

	| portfolio account1 account2|

	portfolio := Portfolio new.
	account1 := (ReceptiveAccount new register: (Deposit for: 100)) register: (Withdraw for: 50).
	account2 := (ReceptiveAccount new register: (Deposit for: 10)) register: (Withdraw for: 20).
	
	portfolio add: account1.
	portfolio add: account2.
	
	self assert: (portfolio balance = 40).
	! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/20/2021 20:40:57'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/20/2021 20:40:57'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/20/2021 20:40:57'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/20/2021 20:41:00'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/20/2021 20:41:01'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/20/2021 20:41:41'!
test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances

	| portfolio account1 account2 |

	portfolio := Portfolio new.
	account1 := (ReceptiveAccount new register: (Deposit for: 100)) register: (Withdraw for: 50).
	account2 := (ReceptiveAccount new register: (Deposit for: 10)) register: (Withdraw for: 20).
	
	portfolio add: account1.
	portfolio add: account2.
	
	self assert: (portfolio balance = 40).
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/20/2021 20:43:53' prior: 50898973!
test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances

	| portfolio account1 account2 account3 portfolio1 |

	portfolio := Portfolio new.
	
	account1 := (ReceptiveAccount new register: (Deposit for: 100)) register: (Withdraw for: 50).
	account2 := (ReceptiveAccount new register: (Deposit for: 10)) register: (Withdraw for: 20).
	
	portfolio1 := Portfolio new.
	account3 := (ReceptiveAccount new register: (Deposit for: 200)) register: (Withdraw for: 50).
	portfolio1 add: account3.
	
	portfolio add: account1.
	portfolio add: account2.
	portfolio add: portfolio1.
	
	self assert: (portfolio balance = 190).
	! !

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/20/2021 20:43:56'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/20/2021 20:43:56'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/20/2021 20:43:56'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/20/2021 20:43:56'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/20/2021 21:05:51'!
addAccount: anAccount

	accounts add: anAccount.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/20/2021 21:10:02' prior: 50898936!
test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances

	| portfolio account1 account2|

	portfolio := Portfolio new.
	account1 := (ReceptiveAccount new register: (Deposit for: 100)) register: (Withdraw for: 50).
	account2 := (ReceptiveAccount new register: (Deposit for: 10)) register: (Withdraw for: 20).
	
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	
	self assert: (portfolio balance = 40).
	! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/20/2021 21:10:05'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/20/2021 21:10:05'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/20/2021 21:10:05'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/20/2021 21:10:05'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/20/2021 21:10:20' prior: 50898991!
test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances

	| portfolio account1 account2 account3 portfolio1 |

	portfolio := Portfolio new.
	
	account1 := (ReceptiveAccount new register: (Deposit for: 100)) register: (Withdraw for: 50).
	account2 := (ReceptiveAccount new register: (Deposit for: 10)) register: (Withdraw for: 20).
	
	portfolio1 := Portfolio new.
	account3 := (ReceptiveAccount new register: (Deposit for: 200)) register: (Withdraw for: 50).
	portfolio1 add: account3.
	
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	portfolio addPortfolio: portfolio1.
	
	self assert: (portfolio balance = 190).
	! !

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/20/2021 21:10:34'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/20/2021 21:10:34'!
ERROR!

Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'MS 5/20/2021 21:10:42'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/20/2021 21:10:53' prior: 50898881 overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/20/2021 21:11:07'!
addPortfolio: aPortfolio

	accounts add: aPortfolio .! !

!methodRemoval: Portfolio #add: stamp: 'MS 5/20/2021 21:11:11'!
add: anAccount

	accounts add: anAccount.!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/20/2021 21:11:20'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/20/2021 21:11:20'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/20/2021 21:11:20'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/20/2021 21:11:20'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/20/2021 21:11:57' prior: 50898920!
balance

	"Iterar sobre los elementos de la coleccion y sumar su balance"
	^ ( accounts sum: [ :account | account balance] ifEmpty: [0] ) + ( portfolios sum: [ :portfolio | portfolio balance] ifEmpty: [0] ).				

	! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/20/2021 21:12:01'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/20/2021 21:12:01'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/20/2021 21:12:01'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/20/2021 21:12:01'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/20/2021 21:12:09'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/20/2021 21:12:09'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/20/2021 21:12:26' prior: 50899072!
test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances

	| portfolio account1 account2 account3 portfolio1 |

	portfolio := Portfolio new.
	
	account1 := (ReceptiveAccount new register: (Deposit for: 100)) register: (Withdraw for: 50).
	account2 := (ReceptiveAccount new register: (Deposit for: 10)) register: (Withdraw for: 20).
	
	portfolio1 := Portfolio new.
	account3 := (ReceptiveAccount new register: (Deposit for: 200)) register: (Withdraw for: 50).
	portfolio1 addAccount: account3.
	
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	portfolio addPortfolio: portfolio1.
	
	self assert: (portfolio balance = 190).
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 5/20/2021 21:12:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 5/20/2021 21:12:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 5/20/2021 21:12:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 5/20/2021 21:12:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 5/20/2021 21:12:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 5/20/2021 21:12:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 5/20/2021 21:12:29'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/20/2021 21:12:35'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/20/2021 21:12:35'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/20/2021 21:12:35'!
PASSED!

----QUIT----(21 May 2021 15:56:45) CuisUniversity-4532.image priorSource: 18143813!

----STARTUP---- (23 May 2021 16:01:45) as C:\Users\matia\Downloads\windows64\windows64\CuisUniversity-4532.image!


!methodRemoval: Deposit #m stamp: 'MS 5/23/2021 16:47:00'!
m

	^value.!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 5/23/2021 16:53:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 5/23/2021 16:53:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 5/23/2021 16:53:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 5/23/2021 16:53:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 5/23/2021 16:53:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 5/23/2021 16:53:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 5/23/2021 16:53:30'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'MS 5/23/2021 16:54:47' prior: 50898499!
balance
	| transactionValue |

	"^transactions sum: [ : aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [ transactionValue := aTransaction value ].
		(aTransaction isKindOf: Withdraw ) ifTrue: [ transactionValue := aTransaction value negated ].
		transactionValue.
		 ] ifEmpty: [ 0 ].".
	^transactions inject: 0 into: [ :accum :currentTransaction | currentTransaction m: accum ].! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'MS 5/23/2021 16:54:56' prior: 50899291!
balance
	"| transactionValue |

	^transactions sum: [ : aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [ transactionValue := aTransaction value ].
		(aTransaction isKindOf: Withdraw ) ifTrue: [ transactionValue := aTransaction value negated ].
		transactionValue.
		 ] ifEmpty: [ 0 ].".
	^transactions inject: 0 into: [ :accum :currentTransaction | currentTransaction m: accum ].! !
!AccountTransaction methodsFor: 'nil' stamp: 'MS 5/23/2021 16:55:28'!
m: acum

	^acum! !

!methodRemoval: AccountTransaction #m: stamp: 'MS 5/23/2021 16:55:38'!
m: acum

	^acum!
!Deposit methodsFor: 'nil' stamp: 'MS 5/23/2021 16:55:50'!
m: accum

	^value.! !
!Withdraw methodsFor: 'nil' stamp: 'MS 5/23/2021 16:55:55'!
m: accum

	^value.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 5/23/2021 16:56:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 5/23/2021 16:56:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 5/23/2021 16:56:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 5/23/2021 16:56:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 5/23/2021 16:56:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 5/23/2021 16:56:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 5/23/2021 16:56:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 5/23/2021 16:56:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 5/23/2021 16:56:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 5/23/2021 16:56:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 5/23/2021 16:56:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 5/23/2021 16:56:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 5/23/2021 16:56:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 5/23/2021 16:56:26'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'MS 5/23/2021 16:56:33' prior: 50899307!
balance
	"| transactionValue |

	^transactions sum: [ : aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [ transactionValue := aTransaction value ].
		(aTransaction isKindOf: Withdraw ) ifTrue: [ transactionValue := aTransaction value negated ].
		transactionValue.
		 ] ifEmpty: [ 0 ].".
	^transactions inject: 1 into: [ :accum :currentTransaction | currentTransaction m: accum ].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 5/23/2021 16:56:35'!
FAILURE!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 5/23/2021 16:56:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 5/23/2021 16:56:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 5/23/2021 16:56:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 5/23/2021 16:56:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 5/23/2021 16:56:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 5/23/2021 16:56:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 5/23/2021 16:56:35'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'MS 5/23/2021 16:56:41' prior: 50899387!
balance
	"| transactionValue |

	^transactions sum: [ : aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [ transactionValue := aTransaction value ].
		(aTransaction isKindOf: Withdraw ) ifTrue: [ transactionValue := aTransaction value negated ].
		transactionValue.
		 ] ifEmpty: [ 0 ].".
	^transactions inject: 0 into: [ :accum :currentTransaction | currentTransaction m: accum ].! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 17:20:23' prior: 50899328!
m: accum

	^accum + value.! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 17:20:28' prior: 50899331!
m: accum

	^accum + value.! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 17:20:39' prior: 50899453!
m: accum

	^accum - value.! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 17:20:40' prior: 50899457!
m: accum

	^accum - value.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 5/23/2021 17:20:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 5/23/2021 17:20:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 5/23/2021 17:20:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 5/23/2021 17:20:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 5/23/2021 17:20:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 5/23/2021 17:20:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 5/23/2021 17:20:57'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'MS 5/23/2021 17:27:08' prior: 50899433!
balance
	"| transactionValue |

	^transactions sum: [ : aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [ transactionValue := aTransaction value ].
		(aTransaction isKindOf: Withdraw ) ifTrue: [ transactionValue := aTransaction value negated ].
		transactionValue.
		 ] ifEmpty: [ 0 ].".
	^transactions inject: 0 into: [ :accumulatedBalance :aTransaction | aTransaction makeTransaction: accumulatedBalance ].! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 17:27:24' prior: 50899449!
m: accum

	^accum + value.! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 17:27:52'!
makeTransaction: accum

	^accum + value.! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 17:28:21' prior: 50899512!
makeTransaction: currentBalance

	^currentBalance + value.! !

!methodRemoval: Deposit #m: stamp: 'MS 5/23/2021 17:28:23'!
m: accum

	^accum + value.!
!Withdraw methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 17:28:29'!
makeTransaction: currentBalance

	^currentBalance - value.! !

!methodRemoval: Withdraw #m: stamp: 'MS 5/23/2021 17:28:30'!
m: accum

	^accum - value.!
!AccountTransaction methodsFor: 'nil' stamp: 'MS 5/23/2021 17:28:43'!
makeTransaction: currentBalance

	^self subclassResponsibility.! !
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 17:28:46' prior: 50899532!
makeTransaction: currentBalance

	self subclassResponsibility.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'MS 5/23/2021 17:31:42' prior: 50899491!
balance

	^transactions inject: 0 into: [ :accumulatedBalance :aTransaction | aTransaction makeTransaction: accumulatedBalance ].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 5/23/2021 17:31:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 5/23/2021 17:31:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 5/23/2021 17:31:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 5/23/2021 17:31:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 5/23/2021 17:31:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 5/23/2021 17:31:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 5/23/2021 17:31:47'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/23/2021 17:31:50'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/23/2021 17:31:50'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/23/2021 17:31:50'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 17:32:50' prior: 50899126!
addPortfolio: aPortfolio

	portfolios add: aPortfolio .! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/23/2021 17:33:00'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/23/2021 17:33:00'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/23/2021 17:33:00'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 17:33:25' prior: 50899037!
test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances

	| portfolio account1 account2 |

	portfolio := Portfolio new.
	account1 := (ReceptiveAccount new register: (Deposit for: 100)) register: (Withdraw for: 50).
	account2 := (ReceptiveAccount new register: (Deposit for: 10)) register: (Withdraw for: 20).
	
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	
	self assert: (portfolio balance = 40).
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 17:33:57' prior: 50899608!
test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances

	| portfolio account1 account2 |

	portfolio := Portfolio new.
	account1 := (ReceptiveAccount new register: (Deposit for: 100)) register: (Withdraw for: 50). "50"
	account2 := (ReceptiveAccount new register: (Deposit for: 10)) register: (Withdraw for: 20). "-10"
	
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	
	self assert: (portfolio balance = 40).
	! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/23/2021 17:33:58'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/23/2021 17:33:58'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/23/2021 17:33:58'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/23/2021 17:33:58'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 17:34:50' prior: 50899192!
test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances

	| portfolio account1 account2 account3 portfolio1 |

	portfolio := Portfolio new.
	
	account1 := (ReceptiveAccount new register: (Deposit for: 100)) register: (Withdraw for: 50). "50"
	account2 := (ReceptiveAccount new register: (Deposit for: 10)) register: (Withdraw for: 20). "-10"
	
	portfolio1 := Portfolio new.
	account3 := (ReceptiveAccount new register: (Deposit for: 200)) register: (Withdraw for: 50). "150"
	portfolio1 addAccount: account3.
	
	portfolio addAccount: account1. "50"
	portfolio addAccount: account2. "-10"
	portfolio addPortfolio: portfolio1. "150"
	
	self assert: (portfolio balance = 190).
	! !

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/23/2021 17:34:51'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/23/2021 17:34:51'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/23/2021 17:34:51'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/23/2021 17:34:51'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 17:36:39'!
test04EmptyPortfolioShouldHaveNoTransactions

	self assert: (Portfolio new transactions isEmpty).! !

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/23/2021 17:36:39'!
ERROR!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/23/2021 17:36:39'!
ERROR!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'MS 5/23/2021 17:36:57'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 17:36:55' prior: 50899120 overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.
	transactions := OrderedCollection new.! !

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/23/2021 17:37:14'!
ERROR!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/23/2021 17:37:14'!
ERROR!
!Portfolio methodsFor: 'nil' stamp: 'MS 5/23/2021 17:37:26'!
transactions

	^transactions.! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/23/2021 17:37:27'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/23/2021 17:37:27'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/23/2021 17:37:27'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/23/2021 17:37:27'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 17:37:33' prior: 50899704!
test04EmptyPortfolioShouldHaveNoTransactions

	self assert: (Portfolio new transactions isEmpty).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 17:39:32'!
test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions

	| portfolio account1 account2 |

	portfolio := Portfolio new.
	account1 := (ReceptiveAccount new register: (Deposit for: 100)) register: (Withdraw for: 50). "50"
	account2 := (ReceptiveAccount new register: (Deposit for: 10)) register: (Withdraw for: 20). "-10"
	
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	
	self assert: (portfolio balance = 40).
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'MS 5/23/2021 17:39:51' prior: 50898275!
transactions 

	^ transactions copy! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 17:41:07' prior: 50899766!
test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions

	| portfolio account1 account2 x |

	portfolio := Portfolio new.
	account1 := (ReceptiveAccount new register: (Deposit for: 100)) register: (Withdraw for: 50). "50"
	account2 := (ReceptiveAccount new register: (Deposit for: 10)) register: (Withdraw for: 20). "-10"
	
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	
	x := OrderedCollection new.
	
	
	self assert: (portfolio transactions = 40).
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 17:49:08' prior: 50899789!
test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions

	| portfolio account1 account2 x |

	portfolio := Portfolio new.
	account1 := (ReceptiveAccount new register: (Deposit for: 100)) register: (Withdraw for: 50). "50"
	account2 := (ReceptiveAccount new register: (Deposit for: 10)) register: (Withdraw for: 20). "-10"
	
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	
	x := OrderedCollection new.
	
	self assert: (portfolio transactions includesAllOf: x).
	self assert: (x includesAllOf: portfolio transactions).
	
	
	"self assert: (portfolio transactions = 40)."
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 17:49:58' prior: 50899808!
test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions

	| portfolio account1 account2 x |

	portfolio := Portfolio new.
	account1 := (ReceptiveAccount new register: (Deposit for: 100)) register: (Withdraw for: 50). "50"
	account2 := (ReceptiveAccount new register: (Deposit for: 10)) register: (Withdraw for: 20). "-10"
	
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	
	"x := OrderedCollection new."
	x:= Collection new.
	
	self assert: (portfolio transactions includesAllOf: x).
	self assert: (x includesAllOf: portfolio transactions).
	
	
	"self assert: (portfolio transactions = 40)."
	! !

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 17:50:18'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 17:52:29' prior: 50899831!
test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions

	| portfolio account1 account2 expectedPortfolioTransactions |

	portfolio := Portfolio new.
	account1 := (ReceptiveAccount new register: (Deposit for: 100)) register: (Withdraw for: 50). "50"
	account2 := (ReceptiveAccount new register: (Deposit for: 10)) register: (Withdraw for: 20). "-10"
	
	portfolio addAccount: account1.
	portfolio addAccount: account2.

	expectedPortfolioTransactions := Collection with: (Deposit for: 100) with: (Withdraw for: 50) with: (Deposit for: 10) with: (Withdraw for: 20).
	

	self assert: (portfolio transactions includesAllOf: expectedPortfolioTransactions ).
	self assert: (expectedPortfolioTransactions includesAllOf: portfolio transactions).
	
	
	"self assert: (portfolio transactions = 40)."
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 17:52:31' prior: 50899859!
test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions

	| portfolio account1 account2 expectedPortfolioTransactions |

	portfolio := Portfolio new.
	account1 := (ReceptiveAccount new register: (Deposit for: 100)) register: (Withdraw for: 50). "50"
	account2 := (ReceptiveAccount new register: (Deposit for: 10)) register: (Withdraw for: 20). "-10"
	
	portfolio addAccount: account1.
	portfolio addAccount: account2.

	expectedPortfolioTransactions := Collection with: (Deposit for: 100) with: (Withdraw for: 50) with: (Deposit for: 10) with: (Withdraw for: 20).
	
	self assert: (portfolio transactions includesAllOf: expectedPortfolioTransactions ).
	self assert: (expectedPortfolioTransactions includesAllOf: portfolio transactions).
	
	
	"self assert: (portfolio transactions = 40)."
	! !

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 17:52:31'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 17:52:38' prior: 50899888!
test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions

	| portfolio account1 account2 expectedPortfolioTransactions |

	portfolio := Portfolio new.
	account1 := (ReceptiveAccount new register: (Deposit for: 100)) register: (Withdraw for: 50). "50"
	account2 := (ReceptiveAccount new register: (Deposit for: 10)) register: (Withdraw for: 20). "-10"
	
	portfolio addAccount: account1.
	portfolio addAccount: account2.

	expectedPortfolioTransactions := Collection with: (Deposit for: 100) with: (Withdraw for: 50) with: (Deposit for: 10) with: (Withdraw for: 20).
	
	self assert: (portfolio transactions includesAllOf: expectedPortfolioTransactions).
	self assert: (expectedPortfolioTransactions includesAllOf: portfolio transactions).
	
	! !

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 17:52:43'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 17:53:06' prior: 50899922!
test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions

	| portfolio account1 account2 expectedPortfolioTransactions |

	portfolio := Portfolio new.
	account1 := (ReceptiveAccount new register: (Deposit for: 100)) register: (Withdraw for: 50). "50"
	account2 := (ReceptiveAccount new register: (Deposit for: 10)) register: (Withdraw for: 20). "-10"
	
	portfolio addAccount: account1.
	portfolio addAccount: account2.

	expectedPortfolioTransactions := OrderedCollection with: (Deposit for: 100) with: (Withdraw for: 50) with: (Deposit for: 10) with: (Withdraw for: 20).
	
	self assert: (portfolio transactions includesAllOf: expectedPortfolioTransactions).
	self assert: (expectedPortfolioTransactions includesAllOf: portfolio transactions).
	
	! !

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 17:53:07'!
FAILURE!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 17:57:40'!
FAILURE!

Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'MS 5/23/2021 18:03:53'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 18:07:16' prior: 50899739!
transactions

	transactions addAll: self accountsTransactions.
	
	^transactions.! !
!Portfolio methodsFor: 'nil' stamp: 'MS 5/23/2021 18:08:00'!
accountsTransactions

	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 18:08:50' prior: 50900010!
accountsTransactions

	"Pidiendo todas las transacciones a cada una de las accounts y volcar todo en una nueva coleccion"
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 18:17:00' prior: 50900014!
accountsTransactions

	| allAccountTransactions |

	"Pidiendo todas las transacciones a cada una de las accounts y volcar todo en una nueva coleccion"
	allAccountTransactions := accounts collect: [:account | account transactions].
	^allAccountTransactions inject: OrderedCollection into: [:a :c | a union: c].! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/23/2021 18:17:02'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/23/2021 18:17:02'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/23/2021 18:17:02'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/23/2021 18:17:02'!
ERROR!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 18:17:02'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 18:17:14' prior: 50900021!
accountsTransactions

	| allAccountTransactions |

	"Pidiendo todas las transacciones a cada una de las accounts y volcar todo en una nueva coleccion"
	allAccountTransactions := accounts collect: [:account | account transactions].
	^allAccountTransactions inject: OrderedCollection new into: [:a :c | a union: c].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 18:17:17' prior: 50900055!
accountsTransactions

	| allAccountTransactions |

	"Pidiendo todas las transacciones a cada una de las accounts y volcar todo en una nueva coleccion"
	allAccountTransactions := accounts collect: [:account | account transactions].
	^allAccountTransactions inject: (OrderedCollection new) into: [:a :c | a union: c].! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/23/2021 18:17:18'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/23/2021 18:17:18'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/23/2021 18:17:18'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/23/2021 18:17:18'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 18:17:18'!
FAILURE!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 18:17:18'!
FAILURE!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/23/2021 18:17:30'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/23/2021 18:17:30'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/23/2021 18:17:30'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/23/2021 18:17:30'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 18:17:30'!
FAILURE!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 18:17:30'!
FAILURE!

expectedPortfolioTransactions!

portfolio transactions!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 18:18:32'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 18:20:20' prior: 50900068!
accountsTransactions

	^(accounts collect: [:account | account transactions]) flatten.
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 18:20:24' prior: 50900140!
accountsTransactions

	^(accounts collect: [ :account | account transactions]) flatten.
	! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/23/2021 18:20:25'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/23/2021 18:20:25'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/23/2021 18:20:25'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/23/2021 18:20:25'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 18:20:25'!
FAILURE!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 18:20:25'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 18:20:35' prior: 50900146!
accountsTransactions

	^ (accounts collect: [ :account | account transactions]) flatten.
	! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/23/2021 18:20:39'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/23/2021 18:20:39'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/23/2021 18:20:39'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/23/2021 18:20:39'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 18:20:39'!
FAILURE!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 18:20:39'!
FAILURE!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/23/2021 18:20:50'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/23/2021 18:20:50'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/23/2021 18:20:50'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/23/2021 18:20:50'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 18:20:50'!
FAILURE!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 18:20:50'!
FAILURE!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/23/2021 18:21:12'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/23/2021 18:21:12'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/23/2021 18:21:12'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/23/2021 18:21:12'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 18:21:12'!
FAILURE!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 18:21:12'!
FAILURE!

expectedPortfolioTransactions!

portfolio transactions!

(accounts collect: [ :account | account transactions])!

(accounts collect: [ :account | account transactions]) flatten !

self accountsTransactions!

transactions!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 18:28:05'!
FAILURE!

portfolio transactions!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 18:29:29' prior: 50900005!
transactions

	transactions := self accountsTransactions.
	
	^transactions.! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/23/2021 18:29:38'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/23/2021 18:29:38'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/23/2021 18:29:38'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/23/2021 18:29:38'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 18:29:38'!
FAILURE!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 18:29:38'!
FAILURE!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 18:29:43'!
FAILURE!

portfolio transactions!

expectedPortfolioTransactions!

portfolio transactions includesAllOf: expectedPortfolioTransactions!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 18:34:45' prior: 50899954!
test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions

	| portfolio account1 account2 expectedPortfolioTransactions transaction1 transaction2 transaction3 transaction4 | 
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	transaction3 := Deposit for: 10.
	transaction4 := Withdraw for: 20.
	
	portfolio := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1) register: transaction2 . "50"
	account2 := (ReceptiveAccount new register: transaction3) register: transaction4. "-10"
	
	portfolio addAccount: account1.
	portfolio addAccount: account2.

	expectedPortfolioTransactions := OrderedCollection with: transaction1 with: transaction2 with: transaction3 with: transaction4.
	
	self assert: (portfolio transactions includesAllOf: expectedPortfolioTransactions).
	self assert: (expectedPortfolioTransactions includesAllOf: portfolio transactions).
	
	! !

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 18:34:46'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/23/2021 18:34:46'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/23/2021 18:34:46'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/23/2021 18:34:46'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/23/2021 18:34:46'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 18:34:46'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 18:35:50'!
test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions

	| portfolio account1 account2 expectedPortfolioTransactions transaction1 transaction2 transaction3 transaction4 | 
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	transaction3 := Deposit for: 10.
	transaction4 := Withdraw for: 20.
	
	portfolio := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1) register: transaction2 . "50"
	account2 := (ReceptiveAccount new register: transaction3) register: transaction4. "-10"
	
	portfolio addAccount: account1.
	portfolio addAccount: account2.

	expectedPortfolioTransactions := OrderedCollection with: transaction1 with: transaction2 with: transaction3 with: transaction4.
	
	self assert: (portfolio transactions includesAllOf: expectedPortfolioTransactions).
	self assert: (expectedPortfolioTransactions includesAllOf: portfolio transactions).
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 18:37:21' prior: 50899660!
test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances

	| portfolio1 account1 account2 account3 portfolio2 |

	portfolio1 := Portfolio new.
	
	account1 := (ReceptiveAccount new register: (Deposit for: 100)) register: (Withdraw for: 50). "50"
	account2 := (ReceptiveAccount new register: (Deposit for: 10)) register: (Withdraw for: 20). "-10"
	
	portfolio2 := Portfolio new.
	account3 := (ReceptiveAccount new register: (Deposit for: 200)) register: (Withdraw for: 50). "150"
	portfolio2 addAccount: account3.
	
	portfolio1 addAccount: account1. "50"
	portfolio1 addAccount: account2. "-10"
	portfolio1 addPortfolio: portfolio2. "150"
	
	self assert: (portfolio1 balance = 190).
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 18:43:47' prior: 50900374!
test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions

	| portfolio1 account1 account2 expectedPortfolioTransactions transaction1 transaction2 transaction3 transaction4 | 
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	transaction3 := Deposit for: 10.
	transaction4 := Withdraw for: 20.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1) register: transaction2 . "50"
	account2 := (ReceptiveAccount new register: transaction3) register: transaction4. "-10"
	
	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.

	expectedPortfolioTransactions := OrderedCollection with: transaction1 with: transaction2 with: transaction3 with: transaction4.
	
	self assert: (portfolio1 transactions includesAllOf: expectedPortfolioTransactions).
	self assert: (expectedPortfolioTransactions includesAllOf: portfolio1 transactions).
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 18:44:07' prior: 50900433!
test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions

	| portfolio1 portfolio2 account1 account2 expectedPortfolioTransactions transaction1 transaction2 transaction3 transaction4 | 
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	transaction3 := Deposit for: 10.
	transaction4 := Withdraw for: 20.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1) register: transaction2 . "50"
	account2 := (ReceptiveAccount new register: transaction3) register: transaction4. "-10"
	
	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.

	expectedPortfolioTransactions := OrderedCollection with: transaction1 with: transaction2 with: transaction3 with: transaction4.
	
	self assert: (portfolio1 transactions includesAllOf: expectedPortfolioTransactions).
	self assert: (expectedPortfolioTransactions includesAllOf: portfolio1 transactions).
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 18:45:39' prior: 50900466!
test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions

	| portfolio1 portfolio2 account1 account2 account3 expectedPortfolioTransactions transaction1 transaction2 transaction3 transaction4 transaction5 | 
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	transaction3 := Deposit for: 10.
	transaction4 := Withdraw for: 20.
	transaction5 := Deposit for: 200.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1) register: transaction2 . "50"
	account2 := (ReceptiveAccount new register: transaction3) register: transaction4. "-10"
	
	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.
	
	portfolio2 := Portfolio new.
	account3 := (ReceptiveAccount new register: transaction5) register: (Withdraw for: 50). "150"
	portfolio2 addAccount: account3.

	expectedPortfolioTransactions := OrderedCollection with: transaction1 with: transaction2 with: transaction3 with: transaction4.
	
	self assert: (portfolio1 transactions includesAllOf: expectedPortfolioTransactions).
	self assert: (expectedPortfolioTransactions includesAllOf: portfolio1 transactions).
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 18:46:11' prior: 50900500!
test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions

	| portfolio1 portfolio2 account1 account2 account3 expectedPortfolioTransactions transaction1 transaction2 transaction3 transaction4 transaction5 | 
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	transaction3 := Deposit for: 10.
	transaction4 := Withdraw for: 20.
	transaction5 := Deposit for: 200.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1) register: transaction2 . "50"
	account2 := (ReceptiveAccount new register: transaction3) register: transaction4. "-10"
	
	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.
	
	portfolio2 := Portfolio new.
	account3 := (ReceptiveAccount new register: transaction5) register: transaction2. "150"
	portfolio2 addAccount: account3.

	expectedPortfolioTransactions := OrderedCollection with: transaction1 with: transaction2 with: transaction3 with: transaction4.
	
	self assert: (portfolio1 transactions includesAllOf: expectedPortfolioTransactions).
	self assert: (expectedPortfolioTransactions includesAllOf: portfolio1 transactions).
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 18:46:27' prior: 50900541!
test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions

	| portfolio1 portfolio2 account1 account2 account3 expectedPortfolioTransactions transaction1 transaction2 transaction3 transaction4 transaction5 | 
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	transaction3 := Deposit for: 10.
	transaction4 := Withdraw for: 20.
	transaction5 := Deposit for: 200.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1) register: transaction2 . "50"
	account2 := (ReceptiveAccount new register: transaction3) register: transaction4. "-10"
	
	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.
	
	portfolio2 := Portfolio new.
	account3 := (ReceptiveAccount new register: transaction5) register: transaction2. "150"
	portfolio2 addAccount: account3.

	expectedPortfolioTransactions := OrderedCollection with: transaction1 with: transaction2 with: transaction3 with: transaction4.
	
	self assert: (portfolio1 transactions includesAllOf: expectedPortfolioTransactions).
	self assert: (expectedPortfolioTransactions includesAllOf: portfolio1 transactions).
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 18:47:31' prior: 50900581!
test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions

	| portfolio1 portfolio2 account1 account2 account3 expectedPortfolioTransactions transaction1 transaction2 transaction3 transaction4 transaction5 | 
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	transaction3 := Deposit for: 10.
	transaction4 := Withdraw for: 20.
	transaction5 := Deposit for: 200.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1) register: transaction2 . "50"
	account2 := (ReceptiveAccount new register: transaction3) register: transaction4. "-10"
	
	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.
	
	portfolio2 := Portfolio new.
	account3 := (ReceptiveAccount new register: transaction5) register: transaction2. "150"
	portfolio2 addAccount: account3.

	expectedPortfolioTransactions := OrderedCollection with: transaction1 with: transaction2 with: transaction3 with: transaction4 with: transaction5 with: transaction2.
	
	self assert: (portfolio1 transactions includesAllOf: expectedPortfolioTransactions).
	self assert: (expectedPortfolioTransactions includesAllOf: portfolio1 transactions).
	
	! !

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'MS 5/23/2021 18:47:32'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 18:48:48' prior: 50900275!
transactions

	transactions := self accountsTransactions.
	transactions union: self portfoliosTransactions.
	
	^transactions.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 18:49:01'!
portfoliosTransactions

	^ (portfolios collect: [ :account | account transactions]) flatten.
	! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/23/2021 18:49:06'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/23/2021 18:49:06'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/23/2021 18:49:06'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/23/2021 18:49:06'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 18:49:06'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'MS 5/23/2021 18:49:06'!
FAILURE!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'MS 5/23/2021 18:49:06'!
FAILURE!

portfolio1 transactions!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 18:49:41' prior: 50900621!
test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions

	| portfolio1 portfolio2 account1 account2 account3 expectedPortfolioTransactions transaction1 transaction2 transaction3 transaction4 transaction5 | 
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	transaction3 := Deposit for: 10.
	transaction4 := Withdraw for: 20.
	transaction5 := Deposit for: 200.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1) register: transaction2 . "50"
	account2 := (ReceptiveAccount new register: transaction3) register: transaction4. "-10"
	
	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.
	
	portfolio2 := Portfolio new.
	account3 := (ReceptiveAccount new register: transaction5) register: transaction2. "150"
	portfolio2 addAccount: account3.
	
	portfolio1 addPortfolio: portfolio2.

	expectedPortfolioTransactions := OrderedCollection with: transaction1 with: transaction2 with: transaction3 with: transaction4 with: transaction5 with: transaction2.
	
	self assert: (portfolio1 transactions includesAllOf: expectedPortfolioTransactions).
	self assert: (expectedPortfolioTransactions includesAllOf: portfolio1 transactions).
	
	! !

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'MS 5/23/2021 18:49:45'!
FAILURE!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'MS 5/23/2021 18:50:03'!
FAILURE!

portfolio1 transactions!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'MS 5/23/2021 18:50:28'!
FAILURE!

portfolio1 transactions!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 18:51:23' prior: 50900668!
transactions

	transactions := self accountsTransactions.
	transactions := transactions union: self portfoliosTransactions.
	
	^transactions.! !

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'MS 5/23/2021 18:51:25'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/23/2021 18:51:25'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/23/2021 18:51:25'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/23/2021 18:51:25'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/23/2021 18:51:25'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 18:51:25'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'MS 5/23/2021 18:51:25'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 18:55:14'!
test07EmptyPortfolioShouldHaveNotRegisteredTransactions

	| aTransaction |

	self deny: (Portfolio new hasRegistered: aTransaction ).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 18:55:51' prior: 50900816!
test07EmptyPortfolioShouldHaveNotRegisteredTransactions

	| aTransaction |
	
	aTransaction := Deposit for: 100.

	self deny: (Portfolio new hasRegistered: aTransaction ).! !

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'MS 5/23/2021 18:55:59'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 18:56:26'!
hasRegistered: aDeposit 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 18:56:58' prior: 50900836!
hasRegistered: aTransaction
	^false.! !

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'MS 5/23/2021 18:57:00'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/23/2021 18:57:00'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/23/2021 18:57:00'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/23/2021 18:57:00'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/23/2021 18:57:00'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 18:57:00'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'MS 5/23/2021 18:57:00'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'MS 5/23/2021 18:57:00'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 18:57:21' prior: 50900841!
hasRegistered: aTransaction

	^false.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 19:02:11'!
test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions

	| aTransaction |
	
	aTransaction := Deposit for: 100.

	self deny: (Portfolio new hasRegistered: aTransaction ).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 19:04:03' prior: 50900884!
test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions

	| transaction1 portfolio1 account1 |
	
	transaction1 := Deposit for: 100.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).

	self assert: (Portfolio new hasRegistered: transaction1 ).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 19:07:33' prior: 50900894!
test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions

	| transaction1 transaction2 portfolio1 account1 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).

	self assert: ( Portfolio new hasRegistered: transaction1 ).
	self deny: ( Portfolio new hasRegistered: transaction2 ).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 19:08:13' prior: 50900907!
test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions

	| transaction1 transaction2 portfolio1 account1 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 addAccount: account1.

	self assert: ( portfolio1 hasRegistered: transaction1 ).
	self deny: ( portfolio1 hasRegistered: transaction2 ).! !

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'MS 5/23/2021 19:08:16'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 19:09:48' prior: 50900880!
hasRegistered: aTransaction

	^self accountsHasRegistered: aTransaction.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 19:10:58'!
accountsHasRegistered: aTransaction

	^accounts anySatisfy: [ :account | account transactions includes: aTransaction ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 19:11:26' prior: 50900951!
accountsHasRegistered: aTransaction

	^self accountsTransactions includes: aTransaction.! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/23/2021 19:11:35'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/23/2021 19:11:35'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/23/2021 19:11:35'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/23/2021 19:11:35'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 19:11:35'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'MS 5/23/2021 19:11:35'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'MS 5/23/2021 19:11:35'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'MS 5/23/2021 19:11:35'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 19:12:16'!
test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions

	| transaction1 transaction2 portfolio1 portfolio2 account1 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 addAccount: account1.

	self assert: ( portfolio1 hasRegistered: transaction1 ).
	self deny: ( portfolio1 hasRegistered: transaction2 ).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 19:13:27' prior: 50900999!
test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions

	| transaction1 transaction2 transaction3 portfolio1 portfolio2 account1 account2 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	transaction3 := Deposit for: 50.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 addAccount: account1.
	
	portfolio2 := Portfolio new.
	account2 := (ReceptiveAccount new register: transaction2).
	portfolio2 addAccount: account2.
	
	portfolio1 addPortfolio: portfolio2.

	self assert: ( portfolio1 hasRegistered: transaction1 ).
	self deny: ( portfolio1 hasRegistered: transaction2 ).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 19:13:35' prior: 50901018!
test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions

	| transaction1 transaction2 transaction3 portfolio1 portfolio2 account1 account2 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	transaction3 := Deposit for: 10.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 addAccount: account1.
	
	portfolio2 := Portfolio new.
	account2 := (ReceptiveAccount new register: transaction2).
	portfolio2 addAccount: account2.
	
	portfolio1 addPortfolio: portfolio2.

	self assert: ( portfolio1 hasRegistered: transaction1 ).
	self deny: ( portfolio1 hasRegistered: transaction2 ).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 19:13:54' prior: 50901044!
test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions

	| transaction1 transaction2 transaction3 portfolio1 portfolio2 account1 account2 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	transaction3 := Deposit for: 10.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 addAccount: account1.
	
	portfolio2 := Portfolio new.
	account2 := (ReceptiveAccount new register: transaction2).
	portfolio2 addAccount: account2.
	
	portfolio1 addPortfolio: portfolio2.

	self assert: ( portfolio1 hasRegistered: transaction2 ).
	self deny: ( portfolio1 hasRegistered: transaction3 ).! !

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'MS 5/23/2021 19:13:55'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 19:15:24' prior: 50900946!
hasRegistered: aTransaction

	^(self accountsHasRegistered: aTransaction) or: [self portfoliosHasRegistered: aTransaction] .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 19:15:53'!
portfoliosHasRegistered: aTransaction

	^self portfoliosTransactions includes: aTransaction.! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/23/2021 19:16:02'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/23/2021 19:16:02'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/23/2021 19:16:02'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/23/2021 19:16:02'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 19:16:02'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'MS 5/23/2021 19:16:02'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'MS 5/23/2021 19:16:02'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'MS 5/23/2021 19:16:02'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'MS 5/23/2021 19:16:02'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 19:17:01' prior: 50900675!
portfoliosTransactions

	^(portfolios collect: [ :account | account transactions]) flatten.
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 19:18:12' prior: 50899153!
balance

	^ ( accounts sum: [ :account | account balance] ifEmpty: [0] ) + ( portfolios sum: [ :portfolio | portfolio balance] ifEmpty: [0] ).				

	! !

----QUIT----(23 May 2021 19:20:04) CuisUniversity-4532.image priorSource: 18163349!

----STARTUP---- (23 May 2021 19:25:28) as C:\Users\matia\Downloads\windows64\windows64\CuisUniversity-4532.image!


p2 := Portfolio new!

p3 := Portfolio new!

p3 := Portfolio new!

p3 := Portfolio new!

p2 := Portfolio new.
p3 := Portfolio new.
a1 := ReceptiveAccount new.
a2 := ReceptiveAccount new.!

p3 addAccount: a1.
p3 addAccount: a2.!

p2 addPortfolio: p3.!

a3 := ReceptiveAccount new.!

p3 addAccount: a3.!

p2!

portfolios first !

Object subclass: #PortfolioEntry
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioEntry category: 'Portfolio-Ejercicio' stamp: 'MS 5/23/2021 19:55:47'!
Object subclass: #PortfolioEntry
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioEntry subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'MS 5/23/2021 19:57:14'!
PortfolioEntry subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioEntry subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'MS 5/23/2021 19:57:15'!
PortfolioEntry subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioEntry subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'MS 5/23/2021 19:57:15'!
PortfolioEntry subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioEntry subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'MS 5/23/2021 19:57:16'!
PortfolioEntry subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioEntry subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'MS 5/23/2021 19:57:16'!
PortfolioEntry subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioEntry subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'MS 5/23/2021 19:57:16'!
PortfolioEntry subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioEntry subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'MS 5/23/2021 19:57:16'!
PortfolioEntry subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioEntry subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'MS 5/23/2021 19:57:16'!
PortfolioEntry subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioEntry subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'MS 5/23/2021 19:57:17'!
PortfolioEntry subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioEntry subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'MS 5/23/2021 19:57:17'!
PortfolioEntry subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioEntry subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'MS 5/23/2021 19:57:38'!
PortfolioEntry subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/23/2021 19:57:53'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/23/2021 19:57:53'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/23/2021 19:57:53'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/23/2021 19:57:53'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 19:57:53'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'MS 5/23/2021 19:57:53'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'MS 5/23/2021 19:57:53'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'MS 5/23/2021 19:57:53'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'MS 5/23/2021 19:57:53'!
PASSED!

PortfolioEntry subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'MS 5/23/2021 19:58:58'!
PortfolioEntry subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioEntry methodsFor: 'nil' stamp: 'MS 5/23/2021 19:59:31'!
balance! !
!PortfolioEntry methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 20:00:17' prior: 50901404!
balance

	^self subclassResponsibility.! !
!PortfolioEntry methodsFor: 'nil' stamp: 'MS 5/23/2021 20:00:41'!
hasRegistered: aTransaction

	^self subclassResponsibility.! !
!PortfolioEntry methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 20:00:50'!
transactions

	^self subclassResponsibility.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'MS 5/23/2021 20:04:01'!
PortfolioEntry subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactions entries'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 20:03:59'!
add: aPortfolioEntry

	entries add: aPortfolioEntry.
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 20:04:32' prior: 50899726 overrides: 16896425!
initialize

	entries := OrderedCollection new.

	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.
	transactions := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 20:04:42' prior: 50901436 overrides: 16896425!
initialize

	entries := OrderedCollection new.

	transactions := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 20:06:01' prior: 50901161 overrides: 50901408!
balance

	^ ( entries sum: [ :anEntry | anEntry balance] ifEmpty: [0] ).
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 20:10:18' prior: 50900776 overrides: 50901417!
transactions

	"Recorro los entries y uno las transactions de todos"
	
	transactions := self accountsTransactions.
	transactions := transactions union: self portfoliosTransactions.
	
	^transactions.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 20:11:12' prior: 50901458 overrides: 50901417!
transactions

	"Recorro los entries y uno las transactions de todos"
	
	^(entries collect: [ :anEntry | anEntry transactions]) flatten.
	
	"transactions := self accountsTransactions.
	transactions := transactions union: self portfoliosTransactions.
	
	^transactions."! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 20:12:11' prior: 50901101 overrides: 50901412!
hasRegistered: aTransaction

	^self transactions includes: aTransaction.

	"^(self accountsHasRegistered: aTransaction) or: [self portfoliosHasRegistered: aTransaction] ."! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 20:13:30' prior: 50899625!
test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances

	| portfolio account1 account2 |

	portfolio := Portfolio new.
	account1 := (ReceptiveAccount new register: (Deposit for: 100)) register: (Withdraw for: 50). "50"
	account2 := (ReceptiveAccount new register: (Deposit for: 10)) register: (Withdraw for: 20). "-10"
	
	portfolio addEntry: account1.
	portfolio addEntry: account2.
	
	self assert: (portfolio balance = 40).
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 20:14:53' prior: 50900407!
test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances

	| portfolio1 account1 account2 account3 portfolio2 |

	portfolio1 := Portfolio new.
	
	account1 := (ReceptiveAccount new register: (Deposit for: 100)) register: (Withdraw for: 50). "50"
	account2 := (ReceptiveAccount new register: (Deposit for: 10)) register: (Withdraw for: 20). "-10"
	
	portfolio2 := Portfolio new.
	account3 := (ReceptiveAccount new register: (Deposit for: 200)) register: (Withdraw for: 50). "150"
	portfolio2 addAccount: account3.
	
	portfolio1 addAccount: account1. "50"
	portfolio1 addAccount: account2. "-10"
	portfolio1 addPortfolio: portfolio2. "150"
	
	self assert: (portfolio1 balance = 190).
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 20:15:25' prior: 50901507!
test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances

	| portfolio1 account1 account2 account3 portfolio2 |

	portfolio1 := Portfolio new.
	
	account1 := (ReceptiveAccount new register: (Deposit for: 100)) register: (Withdraw for: 50). "50"
	account2 := (ReceptiveAccount new register: (Deposit for: 10)) register: (Withdraw for: 20). "-10"
	
	portfolio2 := Portfolio new.
	account3 := (ReceptiveAccount new register: (Deposit for: 200)) register: (Withdraw for: 50). "150"
	portfolio2 addEntry: account3.
	
	portfolio1 addEntry: account1. "50"
	portfolio1 addEntry: account2. "-10"
	portfolio1 addEntry: portfolio2. "150"
	
	self assert: (portfolio1 balance = 190).
	! !

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/23/2021 20:15:33'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/23/2021 20:15:33'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 20:16:07' prior: 50901489!
test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances

	| portfolio account1 account2 |

	portfolio := Portfolio new.
	account1 := (ReceptiveAccount new register: (Deposit for: 100)) register: (Withdraw for: 50). "50"
	account2 := (ReceptiveAccount new register: (Deposit for: 10)) register: (Withdraw for: 20). "-10"
	
	portfolio add: account1.
	portfolio add: account2.
	
	self assert: (portfolio balance = 40).
	! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/23/2021 20:16:11'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 20:16:23' prior: 50901533!
test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances

	| portfolio1 account1 account2 account3 portfolio2 |

	portfolio1 := Portfolio new.
	
	account1 := (ReceptiveAccount new register: (Deposit for: 100)) register: (Withdraw for: 50). "50"
	account2 := (ReceptiveAccount new register: (Deposit for: 10)) register: (Withdraw for: 20). "-10"
	
	portfolio2 := Portfolio new.
	account3 := (ReceptiveAccount new register: (Deposit for: 200)) register: (Withdraw for: 50). "150"
	portfolio2 add: account3.
	
	portfolio1 add: account1. "50"
	portfolio1 add: account2. "-10"
	portfolio1 add: portfolio2. "150"
	
	self assert: (portfolio1 balance = 190).
	! !

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/23/2021 20:16:30'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/23/2021 20:16:34'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 20:16:45' prior: 50900316!
test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions

	| portfolio account1 account2 expectedPortfolioTransactions transaction1 transaction2 transaction3 transaction4 | 
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	transaction3 := Deposit for: 10.
	transaction4 := Withdraw for: 20.
	
	portfolio := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1) register: transaction2 . "50"
	account2 := (ReceptiveAccount new register: transaction3) register: transaction4. "-10"
	
	portfolio add: account1.
	portfolio add: account2.

	expectedPortfolioTransactions := OrderedCollection with: transaction1 with: transaction2 with: transaction3 with: transaction4.
	
	self assert: (portfolio transactions includesAllOf: expectedPortfolioTransactions).
	self assert: (expectedPortfolioTransactions includesAllOf: portfolio transactions).
	
	! !

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 20:16:47'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 20:17:04' prior: 50900715!
test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions

	| portfolio1 portfolio2 account1 account2 account3 expectedPortfolioTransactions transaction1 transaction2 transaction3 transaction4 transaction5 | 
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	transaction3 := Deposit for: 10.
	transaction4 := Withdraw for: 20.
	transaction5 := Deposit for: 200.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1) register: transaction2 . "50"
	account2 := (ReceptiveAccount new register: transaction3) register: transaction4. "-10"
	
	portfolio1 add: account1.
	portfolio1 add: account2.
	
	portfolio2 := Portfolio new.
	account3 := (ReceptiveAccount new register: transaction5) register: transaction2. "150"
	portfolio2 add: account3.
	
	portfolio1 add: portfolio2.

	expectedPortfolioTransactions := OrderedCollection with: transaction1 with: transaction2 with: transaction3 with: transaction4 with: transaction5 with: transaction2.
	
	self assert: (portfolio1 transactions includesAllOf: expectedPortfolioTransactions).
	self assert: (expectedPortfolioTransactions includesAllOf: portfolio1 transactions).
	
	! !

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'MS 5/23/2021 20:17:06'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 20:17:31' prior: 50900924!
test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions

	| transaction1 transaction2 portfolio1 account1 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 add: account1.

	self assert: ( portfolio1 hasRegistered: transaction1 ).
	self deny: ( portfolio1 hasRegistered: transaction2 ).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 20:17:45' prior: 50901070!
test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions

	| transaction1 transaction2 transaction3 portfolio1 portfolio2 account1 account2 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	transaction3 := Deposit for: 10.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 add: account1.
	
	portfolio2 := Portfolio new.
	account2 := (ReceptiveAccount new register: transaction2).
	portfolio2 add: account2.
	
	portfolio1 add: portfolio2.

	self assert: ( portfolio1 hasRegistered: transaction2 ).
	self deny: ( portfolio1 hasRegistered: transaction3 ).! !

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'MS 5/23/2021 20:17:46'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/23/2021 20:17:46'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/23/2021 20:17:46'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/23/2021 20:17:46'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/23/2021 20:17:46'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 20:17:46'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'MS 5/23/2021 20:17:46'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'MS 5/23/2021 20:17:46'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'MS 5/23/2021 20:17:46'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'MS 5/23/2021 20:17:46'!
PASSED!

!methodRemoval: Portfolio #addAccount: stamp: 'MS 5/23/2021 20:17:54'!
addAccount: anAccount

	accounts add: anAccount.!

!methodRemoval: Portfolio #addPortfolio: stamp: 'MS 5/23/2021 20:17:58'!
addPortfolio: aPortfolio

	portfolios add: aPortfolio .!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 20:18:08' prior: 50901445 overrides: 16896425!
initialize

	entries := OrderedCollection new.
! !

PortfolioEntry subclass: #Portfolio
	instanceVariableNames: 'entries'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'MS 5/23/2021 20:18:20'!
PortfolioEntry subclass: #Portfolio
	instanceVariableNames: 'entries'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!methodRemoval: Portfolio #portfoliosHasRegistered: stamp: 'MS 5/23/2021 20:18:28'!
portfoliosHasRegistered: aTransaction

	^self portfoliosTransactions includes: aTransaction.!

!methodRemoval: Portfolio #portfoliosTransactions stamp: 'MS 5/23/2021 20:18:30'!
portfoliosTransactions

	^(portfolios collect: [ :account | account transactions]) flatten.
	!

!methodRemoval: Portfolio #accountsHasRegistered: stamp: 'MS 5/23/2021 20:18:37'!
accountsHasRegistered: aTransaction

	^self accountsTransactions includes: aTransaction.!

!methodRemoval: Portfolio #accountsTransactions stamp: 'MS 5/23/2021 20:18:38'!
accountsTransactions

	^ (accounts collect: [ :account | account transactions]) flatten.
	!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 20:18:53' prior: 50901452 overrides: 50901408!
balance

	^entries sum: [ :anEntry | anEntry balance] ifEmpty: [0].
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 20:18:58' prior: 50901480 overrides: 50901412!
hasRegistered: aTransaction

	^self transactions includes: aTransaction.
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/23/2021 20:19:04' prior: 50901468 overrides: 50901417!
transactions

	^(entries collect: [ :anEntry | anEntry transactions]) flatten.
	! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'MS 5/23/2021 20:19:14' prior: 50899543 overrides: 50901408!
balance
	^transactions inject: 0 into: [ :accumulatedBalance :aTransaction | aTransaction makeTransaction: accumulatedBalance ].! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'MS 5/23/2021 20:19:20' prior: 50898285 overrides: 50901412!
hasRegistered: aTransaction
	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'MS 5/23/2021 20:19:24' prior: 50899784 overrides: 50901417!
transactions 
	^ transactions copy! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'MS 5/23/2021 20:19:27' prior: 50898270!
register: aTransaction
	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'MS 5/23/2021 20:19:31' prior: 50898265 overrides: 16896425!
initialize
	transactions := OrderedCollection new.! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/23/2021 20:22:45'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/23/2021 20:22:45'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/23/2021 20:22:45'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/23/2021 20:22:45'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 20:22:45'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'MS 5/23/2021 20:22:45'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'MS 5/23/2021 20:22:45'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'MS 5/23/2021 20:22:46'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'MS 5/23/2021 20:22:46'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'MS 5/23/2021 20:22:48'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/23/2021 20:22:52'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/23/2021 20:22:52'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/23/2021 20:22:52'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/23/2021 20:22:52'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 20:22:52'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'MS 5/23/2021 20:22:52'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'MS 5/23/2021 20:22:52'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'MS 5/23/2021 20:22:52'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'MS 5/23/2021 20:22:52'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/23/2021 20:22:52'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/23/2021 20:22:52'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/23/2021 20:22:52'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/23/2021 20:22:52'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 20:22:52'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'MS 5/23/2021 20:22:52'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'MS 5/23/2021 20:22:52'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'MS 5/23/2021 20:22:52'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'MS 5/23/2021 20:22:52'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/23/2021 20:22:53'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/23/2021 20:22:53'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/23/2021 20:22:53'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/23/2021 20:22:53'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 20:22:53'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'MS 5/23/2021 20:22:53'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'MS 5/23/2021 20:22:53'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'MS 5/23/2021 20:22:53'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'MS 5/23/2021 20:22:53'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/23/2021 20:22:53'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/23/2021 20:22:53'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/23/2021 20:22:53'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/23/2021 20:22:53'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 20:22:53'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'MS 5/23/2021 20:22:53'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'MS 5/23/2021 20:22:53'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'MS 5/23/2021 20:22:53'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'MS 5/23/2021 20:22:53'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/23/2021 20:22:53'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/23/2021 20:22:53'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/23/2021 20:22:53'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/23/2021 20:22:53'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 20:22:53'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'MS 5/23/2021 20:22:53'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'MS 5/23/2021 20:22:53'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'MS 5/23/2021 20:22:53'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'MS 5/23/2021 20:22:53'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/23/2021 20:23:29'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/23/2021 20:23:29'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/23/2021 20:23:29'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/23/2021 20:23:29'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/23/2021 20:23:29'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'MS 5/23/2021 20:23:29'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'MS 5/23/2021 20:23:29'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'MS 5/23/2021 20:23:29'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'MS 5/23/2021 20:23:29'!
PASSED!

----QUIT----(23 May 2021 21:46:21) CuisUniversity-4532.image priorSource: 18224568!

----STARTUP---- (24 May 2021 14:17:23) as C:\Users\matia\Downloads\windows64\windows64\CuisUniversity-4532.image!

!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/24/2021 14:21:20'!
test10CanNotAddRepetedAccountToPortfolioContainingOnlyAccounts

	| transaction1 transaction2 portfolio1 account1 account2 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 add: account1.
	
	account2 := (ReceptiveAccount new register: transaction2).
	
	portfolio1 add: account2.

	self deny: (self assertCanAdd: account1 to: portfolio1). ! !
!Portfolio methodsFor: 'nil' stamp: 'MS 5/24/2021 14:21:58'!
assertCanAdd: anAccount to: aPortfolio

	^true.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/24/2021 14:22:37' prior: 50902209!
assertCanAdd: anAccount to: aPortfolio

	^(entries includes: anAccount) negated.! !

!testRun: #PortfolioTest #test10CanNotAddRepetedAccountToPortfolioContainingOnlyAccounts stamp: 'MS 5/24/2021 14:22:47'!
ERROR!

!testRun: #PortfolioTest #test10CanNotAddRepetedAccountToPortfolioContainingOnlyAccounts stamp: 'MS 5/24/2021 14:22:47'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/24/2021 14:23:09' prior: 50902192!
test10CanNotAddRepetedAccountToPortfolioContainingOnlyAccounts

	| transaction1 transaction2 portfolio1 account1 account2 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 add: account1.
	
	account2 := (ReceptiveAccount new register: transaction2).
	
	portfolio1 add: account2.

	self deny: (portfolio1 assertCanAdd: account1). ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/24/2021 14:23:19'!
assertCanAdd: anAccount

	^(entries includes: anAccount) negated.! !

!methodRemoval: Portfolio #assertCanAdd:to: stamp: 'MS 5/24/2021 14:23:21'!
assertCanAdd: anAccount to: aPortfolio

	^(entries includes: anAccount) negated.!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/24/2021 14:23:24'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/24/2021 14:23:24'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/24/2021 14:23:24'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/24/2021 14:23:24'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/24/2021 14:23:24'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'MS 5/24/2021 14:23:24'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'MS 5/24/2021 14:23:24'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'MS 5/24/2021 14:23:24'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'MS 5/24/2021 14:23:24'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddRepetedAccountToPortfolioContainingOnlyAccounts stamp: 'MS 5/24/2021 14:23:24'!
ERROR!

!testRun: #PortfolioTest #test10CanNotAddRepetedAccountToPortfolioContainingOnlyAccounts stamp: 'MS 5/24/2021 14:23:24'!
ERROR!

!testRun: #PortfolioTest #test10CanNotAddRepetedAccountToPortfolioContainingOnlyAccounts stamp: 'MS 5/24/2021 14:23:39'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/24/2021 14:24:12' prior: 50902245!
assertCanAdd: anAccount

	^(entries includes: anAccount) not.! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/24/2021 14:24:13'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/24/2021 14:24:13'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/24/2021 14:24:13'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/24/2021 14:24:13'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/24/2021 14:24:13'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'MS 5/24/2021 14:24:13'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'MS 5/24/2021 14:24:13'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'MS 5/24/2021 14:24:13'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'MS 5/24/2021 14:24:13'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddRepetedAccountToPortfolioContainingOnlyAccounts stamp: 'MS 5/24/2021 14:24:13'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/24/2021 14:26:43'!
test11CanNotAddPortfolioToPortfolioIfTheyShareAccounts

	| transaction1 transaction2 portfolio1 account1 account2 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 add: account1.
	
	account2 := (ReceptiveAccount new register: transaction2).
	
	portfolio1 add: account2.

	self deny: (portfolio1 assertCanAdd: account1). ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/24/2021 14:28:10' prior: 50902358!
test11CanNotAddPortfolioToPortfolioIfTheyShareAccounts

	| transaction1 transaction2 portfolio1 portfolio2 account1 account2 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 add: account1.
	
	account2 := (ReceptiveAccount new register: transaction2).
	
	portfolio1 add: account2.
	
	portfolio2 := Portfolio new.
	portfolio2 add: account1.

	portfolio1 add: portfolio2.

	self deny: (portfolio1 assertCanAdd: portfolio2). ! !

!testRun: #PortfolioTest #test11CanNotAddPortfolioToPortfolioIfTheyShareAccounts stamp: 'MS 5/24/2021 14:28:18'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/24/2021 14:28:18'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/24/2021 14:28:18'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/24/2021 14:28:18'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/24/2021 14:28:18'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/24/2021 14:28:18'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'MS 5/24/2021 14:28:18'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'MS 5/24/2021 14:28:18'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'MS 5/24/2021 14:28:18'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'MS 5/24/2021 14:28:18'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddRepetedAccountToPortfolioContainingOnlyAccounts stamp: 'MS 5/24/2021 14:28:18'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioToPortfolioIfTheyShareAccounts stamp: 'MS 5/24/2021 14:28:18'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/24/2021 14:28:28' prior: 50902376!
test11CanNotAddPortfolioToPortfolioIfTheyShareAccounts

	| transaction1 transaction2 portfolio1 portfolio2 account1 account2 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 add: account1.
	
	account2 := (ReceptiveAccount new register: transaction2).
	
	portfolio1 add: account2.
	
	portfolio2 := Portfolio new.
	portfolio2 add: account1.

	self deny: (portfolio1 assertCanAdd: portfolio2). ! !

!testRun: #PortfolioTest #test11CanNotAddPortfolioToPortfolioIfTheyShareAccounts stamp: 'MS 5/24/2021 14:28:29'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/24/2021 14:29:02' prior: 50902308!
assertCanAdd: anAccount

	^(entries includes: anAccount) not.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/24/2021 14:32:44'!
test11CanNotAddPortfolioToPortfolioContainingOnlyAccountsIfTheyShareAccounts

	| transaction1 transaction2 portfolio1 portfolio2 account1 account2 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 add: account1.
	
	account2 := (ReceptiveAccount new register: transaction2).
	
	portfolio1 add: account2.
	
	portfolio2 := Portfolio new.
	portfolio2 add: account1.

	self deny: (portfolio1 assertCanAdd: portfolio2). ! !

!methodRemoval: PortfolioTest #test11CanNotAddPortfolioToPortfolioIfTheyShareAccounts stamp: 'MS 5/24/2021 14:32:48'!
test11CanNotAddPortfolioToPortfolioIfTheyShareAccounts

	| transaction1 transaction2 portfolio1 portfolio2 account1 account2 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 add: account1.
	
	account2 := (ReceptiveAccount new register: transaction2).
	
	portfolio1 add: account2.
	
	portfolio2 := Portfolio new.
	portfolio2 add: account1.

	self deny: (portfolio1 assertCanAdd: portfolio2). !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/24/2021 14:39:36'!
test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts

	| transaction1 transaction2 portfolio1 portfolio2 account1 account2 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 add: account1.
	
	account2 := (ReceptiveAccount new register: transaction2).
	
	portfolio1 add: account2.
	
	portfolio2 := Portfolio new.
	portfolio2 add: account1.

	self deny: (portfolio1 assertCanAdd: portfolio2). ! !

!methodRemoval: PortfolioTest #test11CanNotAddPortfolioToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'MS 5/24/2021 14:39:39'!
test11CanNotAddPortfolioToPortfolioContainingOnlyAccountsIfTheyShareAccounts

	| transaction1 transaction2 portfolio1 portfolio2 account1 account2 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 add: account1.
	
	account2 := (ReceptiveAccount new register: transaction2).
	
	portfolio1 add: account2.
	
	portfolio2 := Portfolio new.
	portfolio2 add: account1.

	self deny: (portfolio1 assertCanAdd: portfolio2). !

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'MS 5/24/2021 14:39:49'!
FAILURE!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'MS 5/24/2021 14:39:49'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/24/2021 14:52:10' prior: 50902473!
assertCanAdd: aPortfolioEntry
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue: [^(entries includes: aPortfolioEntry ) not.].
	(aPortfolioEntry isKindOf: Portfolio ) ifTrue: [
		
		^aPortfolioEntry allSatisfy: [ :anAccount | self assertCanAdd: anAccount ]
		
		].
	! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/24/2021 14:52:12'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/24/2021 14:52:12'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/24/2021 14:52:12'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/24/2021 14:52:12'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/24/2021 14:52:12'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'MS 5/24/2021 14:52:12'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'MS 5/24/2021 14:52:12'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'MS 5/24/2021 14:52:12'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'MS 5/24/2021 14:52:12'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddRepetedAccountToPortfolioContainingOnlyAccounts stamp: 'MS 5/24/2021 14:52:12'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'MS 5/24/2021 14:52:12'!
ERROR!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'MS 5/24/2021 14:52:12'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/24/2021 14:52:51' prior: 50902571!
assertCanAdd: aPortfolioEntry
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue: [^(entries includes: aPortfolioEntry ) not.].
	(aPortfolioEntry isKindOf: Portfolio ) ifTrue: [
		
		^aPortfolioEntry entries allSatisfy: [ :anAccount | self assertCanAdd: anAccount ]
		
		].
	! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/24/2021 14:52:52'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/24/2021 14:52:52'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/24/2021 14:52:52'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/24/2021 14:52:52'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/24/2021 14:52:52'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'MS 5/24/2021 14:52:52'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'MS 5/24/2021 14:52:52'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'MS 5/24/2021 14:52:52'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'MS 5/24/2021 14:52:52'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddRepetedAccountToPortfolioContainingOnlyAccounts stamp: 'MS 5/24/2021 14:52:52'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'MS 5/24/2021 14:52:52'!
ERROR!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'MS 5/24/2021 14:52:52'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/24/2021 14:53:40'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/24/2021 14:53:40'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/24/2021 14:53:40'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/24/2021 14:53:40'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/24/2021 14:53:40'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'MS 5/24/2021 14:53:40'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'MS 5/24/2021 14:53:40'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'MS 5/24/2021 14:53:40'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'MS 5/24/2021 14:53:40'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddRepetedAccountToPortfolioContainingOnlyAccounts stamp: 'MS 5/24/2021 14:53:40'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'MS 5/24/2021 14:53:40'!
ERROR!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'MS 5/24/2021 14:53:40'!
ERROR!
!Portfolio methodsFor: 'nil' stamp: 'MS 5/24/2021 15:31:42'!
entries

	^entries.! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/24/2021 15:31:51'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/24/2021 15:31:51'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/24/2021 15:31:51'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/24/2021 15:31:51'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/24/2021 15:31:51'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'MS 5/24/2021 15:31:51'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'MS 5/24/2021 15:31:51'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'MS 5/24/2021 15:31:51'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'MS 5/24/2021 15:31:51'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddRepetedAccountToPortfolioContainingOnlyAccounts stamp: 'MS 5/24/2021 15:31:51'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'MS 5/24/2021 15:31:51'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/24/2021 15:36:17'!
test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts

	| transaction1 transaction2 portfolio1 account1 account2 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 add: account1.
	
	account2 := (ReceptiveAccount new register: transaction2).
	
	portfolio1 add: account2.

	self deny: (portfolio1 assertCanAdd: account1). ! !

!methodRemoval: PortfolioTest #test10CanNotAddRepetedAccountToPortfolioContainingOnlyAccounts stamp: 'MS 5/24/2021 15:36:21'!
test10CanNotAddRepetedAccountToPortfolioContainingOnlyAccounts

	| transaction1 transaction2 portfolio1 account1 account2 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 add: account1.
	
	account2 := (ReceptiveAccount new register: transaction2).
	
	portfolio1 add: account2.

	self deny: (portfolio1 assertCanAdd: account1). !

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'MS 5/24/2021 16:12:37'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/24/2021 16:12:37'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/24/2021 16:12:37'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/24/2021 16:12:37'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/24/2021 16:12:37'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/24/2021 16:12:37'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'MS 5/24/2021 16:12:37'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'MS 5/24/2021 16:12:37'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'MS 5/24/2021 16:12:37'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'MS 5/24/2021 16:12:37'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'MS 5/24/2021 16:12:37'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'MS 5/24/2021 16:12:38'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'MS 5/24/2021 16:25:05' prior: 50901430!
add: aPortfolioEntry

	self assertCanAdd: aPortfolioEntry.

	entries add: aPortfolioEntry.
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/24/2021 16:29:44' prior: 50902638!
assertCanAdd: aPortfolioEntry
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue: [^(entries includes: aPortfolioEntry ) not ifFalse: [self raiseCanNotAddPortfolioEntryException].].
	(aPortfolioEntry isKindOf: Portfolio ) ifTrue: [
		
		^aPortfolioEntry entries allSatisfy: [ :anAccount | self assertCanAdd: anAccount ]
		
		].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/24/2021 16:30:37' prior: 50902911!
assertCanAdd: aPortfolioEntry
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue: [(entries includes: aPortfolioEntry ) not ifFalse: [self raiseCanNotAddPortfolioEntryException]].
	(aPortfolioEntry isKindOf: Portfolio ) ifTrue: [
		
		(aPortfolioEntry entries allSatisfy: [ :anAccount | self assertCanAdd: anAccount ]) ifFalse: [self raiseCanNotAddPortfolioEntryException].
		
		].
	! !
!Portfolio methodsFor: 'nil' stamp: 'MS 5/24/2021 16:31:42'!
raiseCanNotAddPortfolioEntryException

	self error: self class canNotAddPortfolioEntryExceptionMessage.! !
!Portfolio class methodsFor: 'nil' stamp: 'MS 5/24/2021 16:32:07'!
canNotAddPortfolioEntryExceptionMessage

	^'Can not add entry to portfolio'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'MS 5/24/2021 16:32:26' prior: 50902946!
canNotAddPortfolioEntryExceptionMessage

	^'Can not add repeated entry to portfolio'! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/24/2021 16:33:56' prior: 50902925!
assertCanAdd: aPortfolioEntry
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) 
		ifTrue: [(entries includes: aPortfolioEntry ) not 
			ifFalse: [self raiseCanNotAddPortfolioEntryException]].
	
	(aPortfolioEntry isKindOf: Portfolio ) 
		ifTrue: [
			(aPortfolioEntry entries allSatisfy: [ :anAccount | self assertCanAdd: anAccount ]) 
			ifFalse: [self raiseCanNotAddPortfolioEntryException].
		].
	! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/24/2021 16:33:57'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/24/2021 16:33:57'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/24/2021 16:33:57'!
ERROR!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/24/2021 16:33:57'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/24/2021 16:33:57'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'MS 5/24/2021 16:33:57'!
ERROR!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'MS 5/24/2021 16:33:57'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'MS 5/24/2021 16:33:57'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'MS 5/24/2021 16:33:57'!
ERROR!

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'MS 5/24/2021 16:33:57'!
ERROR!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'MS 5/24/2021 16:33:57'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/24/2021 16:34:22' prior: 50902814!
test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts

	| transaction1 transaction2 portfolio1 account1 account2 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 add: account1.
	
	account2 := (ReceptiveAccount new register: transaction2).
	
	portfolio1 add: account2.

	self deny: (portfolio1 add: account1). ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/24/2021 16:37:45' prior: 50903024!
test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts

	| transaction1 transaction2 portfolio1 account1 account2 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 add: account1.
	
	account2 := (ReceptiveAccount new register: transaction2).
	
	portfolio1 add: account2.
	
	self 
		should: [ portfolio1 add: account1 ] 
		raise: Error 
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio canNotAddPortfolioEntryExceptionMessage ].

	 ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/24/2021 16:38:15' prior: 50902518!
test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts

	| transaction1 transaction2 portfolio1 portfolio2 account1 account2 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 add: account1.
	
	account2 := (ReceptiveAccount new register: transaction2).
	
	portfolio1 add: account2.
	
	portfolio2 := Portfolio new.
	portfolio2 add: account1.

	self 
		should: [ portfolio1 add: portfolio2 ] 
		raise: Error 
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio canNotAddPortfolioEntryExceptionMessage ].! !

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'MS 5/24/2021 16:38:16'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/24/2021 16:38:16'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/24/2021 16:38:16'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/24/2021 16:38:16'!
ERROR!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/24/2021 16:38:16'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/24/2021 16:38:16'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'MS 5/24/2021 16:38:16'!
ERROR!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'MS 5/24/2021 16:38:16'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'MS 5/24/2021 16:38:16'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'MS 5/24/2021 16:38:16'!
ERROR!

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'MS 5/24/2021 16:38:16'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'MS 5/24/2021 16:38:16'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/24/2021 16:38:44'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/24/2021 16:38:44'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/24/2021 16:38:44'!
ERROR!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/24/2021 16:38:44'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/24/2021 16:38:44'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'MS 5/24/2021 16:38:44'!
ERROR!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'MS 5/24/2021 16:38:44'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'MS 5/24/2021 16:38:44'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'MS 5/24/2021 16:38:44'!
ERROR!

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'MS 5/24/2021 16:38:44'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'MS 5/24/2021 16:38:44'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/24/2021 16:38:46'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/24/2021 16:43:40' prior: 50902958!
assertCanAdd: aPortfolioEntry
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) 
		ifTrue: [(entries includes: aPortfolioEntry ) not 
			ifFalse: [self raiseCanNotAddPortfolioEntryException]].
	
	(aPortfolioEntry isKindOf: Portfolio ) 
		ifTrue: [
			(aPortfolioEntry entries do: [ :anAccount | self assertCanAdd: anAccount ]).
		].
	! !

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/24/2021 16:43:42'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'MS 5/24/2021 16:43:45'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'MS 5/24/2021 16:43:47'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/24/2021 16:43:50'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/24/2021 16:43:50'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/24/2021 16:43:50'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/24/2021 16:43:50'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/24/2021 16:43:50'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'MS 5/24/2021 16:43:50'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'MS 5/24/2021 16:43:50'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'MS 5/24/2021 16:43:50'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'MS 5/24/2021 16:43:50'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'MS 5/24/2021 16:43:50'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'MS 5/24/2021 16:43:50'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 5/24/2021 16:52:34'!
test12

	| transaction1 transaction2 portfolio1 portfolio2 account1 account2 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 add: account1.
	
	account2 := (ReceptiveAccount new register: transaction2).
	
	portfolio2 := Portfolio new.
	portfolio2 add: account2.
	
	portfolio1 add: portfolio2.

	self 
		should: [ portfolio1 add: account2 ] 
		raise: Error 
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio canNotAddPortfolioEntryExceptionMessage ].! !

!testRun: #PortfolioTest #test12 stamp: 'MS 5/24/2021 16:52:53'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'MS 5/24/2021 16:53:00'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'MS 5/24/2021 17:24:42' prior: 50902905!
add: aPortfolioEntry

	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue: [self assertCanAdd: aPortfolioEntry ].
	(aPortfolioEntry isKindOf: Portfolio ) ifTrue: [].

	entries add: aPortfolioEntry.
! !
!Portfolio methodsFor: 'adding' stamp: 'MS 5/24/2021 17:25:29' prior: 50903307!
add: aPortfolioEntry

	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue: [self assertCanAdd: aPortfolioEntry ].
	(aPortfolioEntry isKindOf: Portfolio ) ifTrue: [aPortfolioEntry entries do: [ :anAccount | self assertCanAdd: anAccount ]].

	entries add: aPortfolioEntry.
! !
!PortfolioEntry methodsFor: 'nil' stamp: 'MS 5/24/2021 17:26:07'!
assertCanAdd: aPortfolioEntry

	^self subclassResponsibility.! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'MS 5/24/2021 17:28:06' overrides: 50903327!
assertCanAdd: aPortfolioEntry

	(aPortfolioEntry = self) ifTrue: [].! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 5/24/2021 17:29:41'!
assertCanAdd: aPortfolioEntry ifCanNotAddEvaluate: aClosure

	(aPortfolioEntry = self) ifTrue: [aClosure value].! !

!methodRemoval: ReceptiveAccount #assertCanAdd: stamp: 'MS 5/24/2021 17:29:52'!
assertCanAdd: aPortfolioEntry

	(aPortfolioEntry = self) ifTrue: [].!
!PortfolioEntry methodsFor: 'as yet unclassified' stamp: 'MS 5/24/2021 17:30:18'!
assertCanAdd: aPortfolioEntry ifCanNotAddEvaluate: aClosure

	^self subclassResponsibility.! !

!methodRemoval: PortfolioEntry #assertCanAdd: stamp: 'MS 5/24/2021 17:30:20'!
assertCanAdd: aPortfolioEntry

	^self subclassResponsibility.!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/24/2021 17:31:08' overrides: 50903348!
assertCanAdd: aPortfolioEntry ifCanNotAddEvaluate: aClosure
	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 5/24/2021 17:32:28' prior: 50903359 overrides: 50903348!
assertCanAdd: aPortfolioEntry ifCanNotAddEvaluate: aClosure
	
	entries do: [ :anEntry | anEntry assertCanAdd: aPortfolioEntry ifCanNotAddEvaluate: aClosure ].! !

!methodRemoval: Portfolio #assertCanAdd: stamp: 'MS 5/24/2021 17:32:40'!
assertCanAdd: aPortfolioEntry
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) 
		ifTrue: [(entries includes: aPortfolioEntry ) not 
			ifFalse: [self raiseCanNotAddPortfolioEntryException]].
	
	(aPortfolioEntry isKindOf: Portfolio ) 
		ifTrue: [
			(aPortfolioEntry entries do: [ :anAccount | self assertCanAdd: anAccount ]).
		].
	!
!Portfolio methodsFor: 'adding' stamp: 'MS 5/24/2021 17:33:59' prior: 50903316!
add: aPortfolioEntry

	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue: [self assertCanAdd: aPortfolioEntry ifCanNotAddEvaluate: [self raiseCanNotAddPortfolioEntryException ]].
	
	(aPortfolioEntry isKindOf: Portfolio ) ifTrue: [aPortfolioEntry entries do: [ :anAccount | self assertCanAdd: anAccount ifCanNotAddEvaluate: [self raiseCanNotAddPortfolioEntryException ]]].

	entries add: aPortfolioEntry.
! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/24/2021 17:34:04'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/24/2021 17:34:04'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/24/2021 17:34:04'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/24/2021 17:34:04'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/24/2021 17:34:04'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'MS 5/24/2021 17:34:04'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'MS 5/24/2021 17:34:04'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'MS 5/24/2021 17:34:04'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'MS 5/24/2021 17:34:04'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'MS 5/24/2021 17:34:04'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'MS 5/24/2021 17:34:04'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'MS 5/24/2021 17:34:04'!
PASSED!

----QUIT----(24 May 2021 17:47:33) CuisUniversity-4532.image priorSource: 18257115!

----STARTUP---- (24 May 2021 19:28:57) as C:\Users\matia\Downloads\windows64\windows64\CuisUniversity-4532.image!


----QUIT----(24 May 2021 20:22:23) CuisUniversity-4532.image priorSource: 18297702!

----STARTUP---- (25 May 2021 02:27:45) as C:\Users\matia\Downloads\windows64\windows64\CuisUniversity-4532.image!


----QUIT----(25 May 2021 02:27:53) CuisUniversity-4532.image priorSource: 18297903!

!methodRemoval: Portfolio #addAccount: stamp: 'GDH 5/24/2021 17:42:08'!
addAccount: anAccount

	accounts add: anAccount.!

!methodRemoval: Portfolio #addPortfolio: stamp: 'GDH 5/24/2021 17:42:10'!
addPortfolio: aPortfolio

	portfolios add: aPortfolio .!

!methodRemoval: Portfolio #accountsHasRegistered: stamp: 'GDH 5/24/2021 17:42:17'!
accountsHasRegistered: aTransaction

	^self accountsTransactions includes: aTransaction.!

!methodRemoval: Portfolio #accountsTransactions stamp: 'GDH 5/24/2021 17:42:18'!
accountsTransactions

	^ (accounts collect: [ :account | account transactions]) flatten.
	!

!methodRemoval: Portfolio #portfoliosHasRegistered: stamp: 'GDH 5/24/2021 17:42:19'!
portfoliosHasRegistered: aTransaction

	^self portfoliosTransactions includes: aTransaction.!

!methodRemoval: Portfolio #portfoliosTransactions stamp: 'GDH 5/24/2021 17:42:20'!
portfoliosTransactions

	^(portfolios collect: [ :account | account transactions]) flatten.
	!
!Portfolio methodsFor: 'adding' stamp: 'GDH 5/24/2021 17:44:16' prior: 50889243!
add: aPortfolioEntry

	( aPortfolioEntry isKindOf: ReceptiveAccount ) ifTrue: [ self assertCanAdd: aPortfolioEntry ifCanNotAddEvaluate: [ self raiseCanNotAddPortfolioEntryException ] ].
	
	( aPortfolioEntry isKindOf: Portfolio ) ifTrue: [ aPortfolioEntry entries do: [ :anAccount | self assertCanAdd: anAccount ifCanNotAddEvaluate: [ self raiseCanNotAddPortfolioEntryException ] ] ].

	entries add: aPortfolioEntry.
! !
!Portfolio methodsFor: 'balance' stamp: 'GDH 5/24/2021 17:44:27' prior: 50889259 overrides: 50889216!
balance

	^entries sum: [ :anEntry | anEntry balance ] ifEmpty: [ 0 ].
! !
!ReceptiveAccount methodsFor: 'assertion - private' stamp: 'GDH 5/24/2021 17:44:50' prior: 50889358 overrides: 50889225!
assertCanAdd: aPortfolioEntry ifCanNotAddEvaluate: aClosure

	( aPortfolioEntry = self ) ifTrue: [ aClosure value ].! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'GDH 5/24/2021 17:45:01' prior: 50889352 overrides: 50889220!
hasRegistered: aTransaction
	^transactions includes: aTransaction 
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GDH 5/24/2021 17:55:31'!
test13

	| transaction1 transaction2 portfolio1 portfolio2 portfolio3 account1 account2 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 add: account1.
	
	account2 := (ReceptiveAccount new register: transaction2).
	
	portfolio2 := Portfolio new.
	portfolio2 add: account2.
	
	portfolio1 add: portfolio2.
	
	portfolio3 := Portfolio new.
	portfolio3 add: account2.

	self 
		should: [ portfolio1 add: portfolio3 ] 
		raise: Error 
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio canNotAddPortfolioEntryExceptionMessage ].! !
!ReceptiveAccount methodsFor: 'assertion - private' stamp: 'GDH 5/24/2021 18:00:16' prior: 50889421 overrides: 50889225!
assertCanAdd: aPortfolioEntry ifCanNotAddEvaluate: aClosure
	
	( aPortfolioEntry = self ) ifTrue: [ aClosure value ]
	
	"aPortfolioEntry m: self."
	"ReceptiveAccount m: aReceptiveAccount n: aClosure"
	"( aPortfolioEntry = self ) ifTrue: [ aClosure value ]."
	"Portfolio m: aReceptiveAccount n: aClosure"
	" self assertCanAdd: aReceptiveAccount ifCanNotAddEvaluate: [ aClosure ]"! !
!ReceptiveAccount methodsFor: 'assertion - private' stamp: 'GDH 5/24/2021 18:00:43' prior: 50889460 overrides: 50889225!
assertCanAdd: aPortfolioEntry ifCanNotAddEvaluate: aClosure
	
	( aPortfolioEntry = self ) ifTrue: [ aClosure value ]
	
	"aPortfolioEntry m: self."
	
	"ReceptiveAccount m: aReceptiveAccount n: aClosure"
	"( aPortfolioEntry = self ) ifTrue: [ aClosure value ]."
	"Portfolio m: aReceptiveAccount n: aClosure"
	" self assertCanAdd: aReceptiveAccount ifCanNotAddEvaluate: [ aClosure ]"! !
!ReceptiveAccount methodsFor: 'assertion - private' stamp: 'GDH 5/24/2021 18:04:55' prior: 50889476 overrides: 50889225!
assertCanAdd: aPortfolioEntry ifCanNotAddEvaluate: aClosure
	
	( aPortfolioEntry = self ) ifTrue: [ aClosure value ]! !
!PortfolioEntry methodsFor: 'assertion - private' stamp: 'GDH 5/24/2021 18:05:52'!
m: aReceptiveAccount n: aClosure
	
	^self subclassResponsibility ! !
!PortfolioEntry methodsFor: 'assertion - private' stamp: 'GDH 5/24/2021 18:07:42' prior: 50889499!
m: aReceptiveAccount n: onFailureClosure
	
	^self subclassResponsibility ! !
!Portfolio methodsFor: 'adding' stamp: 'GDH 5/24/2021 18:08:34' overrides: 50889505!
m: aReceptiveAccount n: onFailureClosure
	
	self assertCanAdd: aReceptiveAccount ifCanNotAddEvaluate: [ onFailureClosure ].! !
!ReceptiveAccount methodsFor: 'assertion - private' stamp: 'GDH 5/24/2021 18:09:29' overrides: 50889505!
m: aReceptiveAccount n: onFailureClosure
	
	( aReceptiveAccount = self ) ifTrue: [ onFailureClosure value ].! !
!ReceptiveAccount methodsFor: 'assertion - private' stamp: 'GDH 5/24/2021 18:10:06' prior: 50889492 overrides: 50889225!
assertCanAdd: aPortfolioEntry ifCanNotAddEvaluate: aClosure
	
	self m: aPortfolioEntry n: aClosure.! !
!ReceptiveAccount methodsFor: 'assertion - private' stamp: 'GDH 5/24/2021 18:10:47' prior: 50889527 overrides: 50889225!
assertCanAdd: aPortfolioEntry ifCanNotAddEvaluate: aClosure
	
	aPortfolioEntry m: self n: aClosure.! !
!Portfolio methodsFor: 'adding' stamp: 'GDH 5/24/2021 18:16:31' prior: 50889397!
add: aPortfolioEntry

	self assertCanAdd: aPortfolioEntry ifCanNotAddEvaluate: [ self raiseCanNotAddPortfolioEntryException ].

	"( aPortfolioEntry isKindOf: ReceptiveAccount ) ifTrue: [ self assertCanAdd: aPortfolioEntry ifCanNotAddEvaluate: [ self raiseCanNotAddPortfolioEntryException ] ].
	
	( aPortfolioEntry isKindOf: Portfolio ) ifTrue: [ aPortfolioEntry entries do: [ :anAccount | self assertCanAdd: anAccount ifCanNotAddEvaluate: [ self raiseCanNotAddPortfolioEntryException ] ] ]."

	entries add: aPortfolioEntry.
! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'GDH 5/24/2021 18:16:35'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'GDH 5/24/2021 18:16:35'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'GDH 5/24/2021 18:16:35'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'GDH 5/24/2021 18:16:35'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'GDH 5/24/2021 18:16:35'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'GDH 5/24/2021 18:16:35'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'GDH 5/24/2021 18:16:35'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'GDH 5/24/2021 18:16:35'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'GDH 5/24/2021 18:16:35'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'GDH 5/24/2021 18:16:35'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'GDH 5/24/2021 18:16:35'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'GDH 5/24/2021 18:16:35'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'GDH 5/24/2021 18:16:35'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'GDH 5/24/2021 18:16:42'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'GDH 5/24/2021 18:17:18'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'GDH 5/24/2021 18:17:31'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'GDH 5/24/2021 18:17:34'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'GDH 5/24/2021 18:20:30'!
FAILURE!

aPortfolioEntry transactions !

anEntry transactions !

aReceptiveAccount = self!

aPortfolioEntry entries!

self entries!

self entries!

aPortfolioEntry entries!

anEntry transactions !

entries first transactions !

entries first transactions value!

entries first transactions first value!

aPortfolioEntry transactions first value!

aReceptiveAccount = self!
!Portfolio methodsFor: 'assertion - private' stamp: 'GDH 5/24/2021 18:37:58' prior: 50889511 overrides: 50889505!
m: aReceptiveAccount n: onFailureClosure
	
	self assertCanAdd: aReceptiveAccount ifCanNotAddEvaluate: onFailureClosure.! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'GDH 5/24/2021 18:38:16'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'GDH 5/24/2021 18:38:16'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'GDH 5/24/2021 18:38:16'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'GDH 5/24/2021 18:38:16'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'GDH 5/24/2021 18:38:16'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'GDH 5/24/2021 18:38:16'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'GDH 5/24/2021 18:38:16'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'GDH 5/24/2021 18:38:16'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'GDH 5/24/2021 18:38:16'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'GDH 5/24/2021 18:38:16'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'GDH 5/24/2021 18:38:16'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'GDH 5/24/2021 18:38:16'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'GDH 5/24/2021 18:38:16'!
PASSED!
!PortfolioEntry methodsFor: 'assertion - private' stamp: 'GDH 5/24/2021 18:56:12'!
canBeAddedTo: aReceptiveAccount ifCanNot: onFailureClosure
	
	^self subclassResponsibility ! !
!Portfolio methodsFor: 'assertion - private' stamp: 'GDH 5/24/2021 18:56:12' overrides: 50889701!
canBeAddedTo: aReceptiveAccount ifCanNot: onFailureClosure
	
	self assertCanAdd: aReceptiveAccount ifCanNotAddEvaluate: onFailureClosure.! !
!ReceptiveAccount methodsFor: 'assertion - private' stamp: 'GDH 5/24/2021 18:56:12' overrides: 50889701!
canBeAddedTo: aReceptiveAccount ifCanNot: onFailureClosure
	
	( aReceptiveAccount = self ) ifTrue: [ onFailureClosure value ].! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'GDH 5/24/2021 18:56:12' prior: 50889534 overrides: 50889225!
assertCanAdd: aPortfolioEntry ifCanNotAddEvaluate: aClosure
	
	aPortfolioEntry canBeAddedTo: self ifCanNot: aClosure.! !

!methodRemoval: PortfolioEntry #m:n: stamp: 'GDH 5/24/2021 18:56:12'!
m: aReceptiveAccount n: onFailureClosure
	
	^self subclassResponsibility !

!methodRemoval: Portfolio #m:n: stamp: 'GDH 5/24/2021 18:56:12'!
m: aReceptiveAccount n: onFailureClosure
	
	self assertCanAdd: aReceptiveAccount ifCanNotAddEvaluate: onFailureClosure.!

!methodRemoval: ReceptiveAccount #m:n: stamp: 'GDH 5/24/2021 18:56:12'!
m: aReceptiveAccount n: onFailureClosure
	
	( aReceptiveAccount = self ) ifTrue: [ onFailureClosure value ].!
!PortfolioEntry methodsFor: 'assertion - private' stamp: 'GDH 5/24/2021 18:57:46'!
canBeAddedTo: aReceptiveAccount ifCanNotBeAdded: onFailureClosure
	
	^self subclassResponsibility ! !
!ReceptiveAccount methodsFor: 'assertion - private' stamp: 'GDH 5/24/2021 18:57:46' overrides: 50889747!
canBeAddedTo: aReceptiveAccount ifCanNotBeAdded: onFailureClosure
	
	( aReceptiveAccount = self ) ifTrue: [ onFailureClosure value ].! !
!Portfolio methodsFor: 'assertion - private' stamp: 'GDH 5/24/2021 18:57:46' overrides: 50889747!
canBeAddedTo: aReceptiveAccount ifCanNotBeAdded: onFailureClosure
	
	self assertCanAdd: aReceptiveAccount ifCanNotAddEvaluate: onFailureClosure.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'GDH 5/24/2021 18:57:46' prior: 50889724 overrides: 50889225!
assertCanAdd: aPortfolioEntry ifCanNotAddEvaluate: aClosure
	
	aPortfolioEntry canBeAddedTo: self ifCanNotBeAdded: aClosure.! !

!methodRemoval: PortfolioEntry #canBeAddedTo:ifCanNot: stamp: 'GDH 5/24/2021 18:57:46'!
canBeAddedTo: aReceptiveAccount ifCanNot: onFailureClosure
	
	^self subclassResponsibility !

!methodRemoval: ReceptiveAccount #canBeAddedTo:ifCanNot: stamp: 'GDH 5/24/2021 18:57:46'!
canBeAddedTo: aReceptiveAccount ifCanNot: onFailureClosure
	
	( aReceptiveAccount = self ) ifTrue: [ onFailureClosure value ].!

!methodRemoval: Portfolio #canBeAddedTo:ifCanNot: stamp: 'GDH 5/24/2021 18:57:46'!
canBeAddedTo: aReceptiveAccount ifCanNot: onFailureClosure
	
	self assertCanAdd: aReceptiveAccount ifCanNotAddEvaluate: onFailureClosure.!
!PortfolioEntry methodsFor: 'assertion - private' stamp: 'GDH 5/24/2021 18:58:01' prior: 50889225!
assertCanAdd: aPortfolioEntry ifCanNotAddEvaluate: onFailureClosure

	^self subclassResponsibility.! !
!Portfolio methodsFor: 'assertion - private' stamp: 'GDH 5/24/2021 18:58:14' prior: 50889282 overrides: 50889798!
assertCanAdd: aPortfolioEntry ifCanNotAddEvaluate: onFailureClosure
	
	entries do: [ :anEntry | anEntry assertCanAdd: aPortfolioEntry ifCanNotAddEvaluate: onFailureClosure ].! !
!ReceptiveAccount methodsFor: 'assertion - private' stamp: 'GDH 5/24/2021 18:58:18' prior: 50889771 overrides: 50889798!
assertCanAdd: aPortfolioEntry ifCanNotAddEvaluate: onFailureClosure
	
	aPortfolioEntry canBeAddedTo: self ifCanNotBeAdded: onFailureClosure.! !
!Portfolio methodsFor: 'adding' stamp: 'GDH 5/24/2021 18:58:41' prior: 50889540!
add: aPortfolioEntry

	self assertCanAdd: aPortfolioEntry ifCanNotAddEvaluate: [ self raiseCanNotAddPortfolioEntryException ].

	entries add: aPortfolioEntry.
! !
!PortfolioEntry methodsFor: 'assertion - private' stamp: 'GDH 5/24/2021 19:10:27'!
doesNotCreateRepetition: aReceptiveAccount ifRepeats: onFailureClosure
	
	^self subclassResponsibility ! !
!Portfolio methodsFor: 'assertion - private' stamp: 'GDH 5/24/2021 19:10:27' overrides: 50889831!
doesNotCreateRepetition: aReceptiveAccount ifRepeats: onFailureClosure
	
	self assertCanAdd: aReceptiveAccount ifCanNotAddEvaluate: onFailureClosure.! !
!ReceptiveAccount methodsFor: 'assertion - private' stamp: 'GDH 5/24/2021 19:10:27' overrides: 50889831!
doesNotCreateRepetition: aReceptiveAccount ifRepeats: onFailureClosure
	
	( aReceptiveAccount = self ) ifTrue: [ onFailureClosure value ].! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'GDH 5/24/2021 19:10:27' prior: 50889815 overrides: 50889798!
assertCanAdd: aPortfolioEntry ifCanNotAddEvaluate: onFailureClosure
	
	aPortfolioEntry doesNotCreateRepetition: self ifRepeats: onFailureClosure.! !

!methodRemoval: PortfolioEntry #canBeAddedTo:ifCanNotBeAdded: stamp: 'GDH 5/24/2021 19:10:27'!
canBeAddedTo: aReceptiveAccount ifCanNotBeAdded: onFailureClosure
	
	^self subclassResponsibility !

!methodRemoval: Portfolio #canBeAddedTo:ifCanNotBeAdded: stamp: 'GDH 5/24/2021 19:10:27'!
canBeAddedTo: aReceptiveAccount ifCanNotBeAdded: onFailureClosure
	
	self assertCanAdd: aReceptiveAccount ifCanNotAddEvaluate: onFailureClosure.!

!methodRemoval: ReceptiveAccount #canBeAddedTo:ifCanNotBeAdded: stamp: 'GDH 5/24/2021 19:10:27'!
canBeAddedTo: aReceptiveAccount ifCanNotBeAdded: onFailureClosure
	
	( aReceptiveAccount = self ) ifTrue: [ onFailureClosure value ].!
!PortfolioEntry methodsFor: 'assertion - private' stamp: 'GDH 5/24/2021 19:11:31'!
doesNotCreateRepetitionWith: aReceptiveAccount ifRepeats: onFailureClosure
	
	^self subclassResponsibility ! !
!Portfolio methodsFor: 'assertion - private' stamp: 'GDH 5/24/2021 19:11:31' overrides: 50889885!
doesNotCreateRepetitionWith: aReceptiveAccount ifRepeats: onFailureClosure
	
	self assertCanAdd: aReceptiveAccount ifCanNotAddEvaluate: onFailureClosure.! !
!ReceptiveAccount methodsFor: 'assertion - private' stamp: 'GDH 5/24/2021 19:11:31' overrides: 50889885!
doesNotCreateRepetitionWith: aReceptiveAccount ifRepeats: onFailureClosure
	
	( aReceptiveAccount = self ) ifTrue: [ onFailureClosure value ].! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'GDH 5/24/2021 19:11:31' prior: 50889856 overrides: 50889798!
assertCanAdd: aPortfolioEntry ifCanNotAddEvaluate: onFailureClosure
	
	aPortfolioEntry doesNotCreateRepetitionWith: self ifRepeats: onFailureClosure.! !

!methodRemoval: PortfolioEntry #doesNotCreateRepetition:ifRepeats: stamp: 'GDH 5/24/2021 19:11:31'!
doesNotCreateRepetition: aReceptiveAccount ifRepeats: onFailureClosure
	
	^self subclassResponsibility !

!methodRemoval: Portfolio #doesNotCreateRepetition:ifRepeats: stamp: 'GDH 5/24/2021 19:11:31'!
doesNotCreateRepetition: aReceptiveAccount ifRepeats: onFailureClosure
	
	self assertCanAdd: aReceptiveAccount ifCanNotAddEvaluate: onFailureClosure.!

!methodRemoval: ReceptiveAccount #doesNotCreateRepetition:ifRepeats: stamp: 'GDH 5/24/2021 19:11:31'!
doesNotCreateRepetition: aReceptiveAccount ifRepeats: onFailureClosure
	
	( aReceptiveAccount = self ) ifTrue: [ onFailureClosure value ].!
!Portfolio methodsFor: 'assertion - private' stamp: 'GDH 5/24/2021 19:12:57' prior: 50889892 overrides: 50889885!
doesNotCreateRepetitionWith: aReceptiveAccount ifRepeats: onFailureClosure
	
	"Genera una repeticion si no lo puede agregar"
	self assertCanAdd: aReceptiveAccount ifCanNotAddEvaluate: onFailureClosure.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GDH 5/24/2021 19:15:30'!
test14

	| transaction1 transaction2 portfolio1 portfolio2 account1 account2 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 add: account1.
	
	account2 := (ReceptiveAccount new register: transaction2).
	
	portfolio2 := Portfolio new.
	portfolio2 add: account2.
	
	portfolio1 add: portfolio2.

	self 
		should: [ portfolio2 add: account1 ] 
		raise: Error 
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio canNotAddPortfolioEntryExceptionMessage ].! !

!testRun: #PortfolioTest #test14 stamp: 'GDH 5/24/2021 19:15:37'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'GDH 5/24/2021 19:15:55'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'GDH 5/24/2021 19:15:55'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'GDH 5/24/2021 19:15:55'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'GDH 5/24/2021 19:15:55'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'GDH 5/24/2021 19:15:55'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'GDH 5/24/2021 19:15:55'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'GDH 5/24/2021 19:15:55'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'GDH 5/24/2021 19:15:55'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'GDH 5/24/2021 19:15:55'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'GDH 5/24/2021 19:15:55'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'GDH 5/24/2021 19:15:55'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'GDH 5/24/2021 19:15:55'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'GDH 5/24/2021 19:15:55'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'GDH 5/24/2021 19:15:55'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'GDH 5/24/2021 19:15:55'!
FAILURE!

!testRun: #PortfolioTest #test14 stamp: 'GDH 5/24/2021 19:15:55'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'GDH 5/24/2021 19:20:27' prior: 50889823!
add: aPortfolioEntry

	"Buscamos todas las raices de self y le pedimos el assertCanAdd"
	self findRoots do: [ :aPortfolio | aPortfolio assertCanAdd: aPortfolioEntry ifCanNotAddEvaluate: [ self raiseCanNotAddPortfolioEntryException ] ].

	entries add: aPortfolioEntry.
! !
!Portfolio methodsFor: 'adding' stamp: 'GDH 5/24/2021 19:21:12' prior: 50890037!
add: aPortfolioEntry

	"Buscamos todas las raices de self y le pedimos el assertCanAdd"
	self findRoots do: [ :aPortfolio | aPortfolio assertCanAdd: aPortfolioEntry 
									 ifCanNotAddEvaluate: [ self raiseCanNotAddPortfolioEntryException ] ].

	entries add: aPortfolioEntry.
! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'GDH 5/24/2021 19:27:21'!
PortfolioEntry subclass: #Portfolio
	instanceVariableNames: 'entries parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'adding' stamp: 'GDH 5/24/2021 19:27:17'!
findRoots

	parents ifEmpty: [ ^self ].
	
	parents collect: [ :aPortfolioParent | aPortfolioParent findRoots ] flatten! !
!Portfolio methodsFor: 'initialization' stamp: 'GDH 5/24/2021 19:28:03' prior: 50889271 overrides: 16896425!
initialize

	entries := OrderedCollection new.
	parents := OrderedCollection new.
! !
!Portfolio methodsFor: 'adding' stamp: 'GDH 5/24/2021 19:29:48' prior: 50890049!
add: aPortfolioEntry

	"Buscamos todas las raices de self y le pedimos el assertCanAdd"
	self findRoots do: [ :aPortfolioRoot | aPortfolioRoot assertCanAdd: aPortfolioEntry 
									 ifCanNotAddEvaluate: [ self raiseCanNotAddPortfolioEntryException ] ].

	entries add: aPortfolioEntry.
	
	aPortfolioEntry addNewParent: self.
! !
!Portfolio methodsFor: 'adding' stamp: 'GDH 5/24/2021 19:30:41'!
addNewParent: aPortfolio

	parents add: aPortfolio .
! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'GDH 5/24/2021 19:30:52'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'GDH 5/24/2021 19:30:52'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'GDH 5/24/2021 19:30:52'!
ERROR!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'GDH 5/24/2021 19:30:52'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'GDH 5/24/2021 19:30:52'!
ERROR!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'GDH 5/24/2021 19:30:52'!
ERROR!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'GDH 5/24/2021 19:30:52'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'GDH 5/24/2021 19:30:52'!
ERROR!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'GDH 5/24/2021 19:30:52'!
ERROR!

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'GDH 5/24/2021 19:30:52'!
ERROR!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'GDH 5/24/2021 19:30:52'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'GDH 5/24/2021 19:30:52'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'GDH 5/24/2021 19:30:52'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'GDH 5/24/2021 19:30:52'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'GDH 5/24/2021 19:31:03'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'GDH 5/24/2021 19:31:52' prior: 50890068!
findRoots

	parents ifEmpty: [ ^OrderedCollection with: self ].
	
	parents collect: [ :aPortfolioParent | aPortfolioParent findRoots ] flatten! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'GDH 5/24/2021 19:31:54'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'GDH 5/24/2021 19:31:54'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'GDH 5/24/2021 19:31:54'!
ERROR!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'GDH 5/24/2021 19:31:54'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'GDH 5/24/2021 19:31:54'!
ERROR!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'GDH 5/24/2021 19:31:54'!
ERROR!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'GDH 5/24/2021 19:31:54'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'GDH 5/24/2021 19:31:54'!
ERROR!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'GDH 5/24/2021 19:31:54'!
ERROR!

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'GDH 5/24/2021 19:31:54'!
ERROR!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'GDH 5/24/2021 19:31:54'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'GDH 5/24/2021 19:31:54'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'GDH 5/24/2021 19:31:54'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'GDH 5/24/2021 19:31:54'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'GDH 5/24/2021 19:31:58'!
ERROR!

PortfolioEntry subclass: #Portfolio
	instanceVariableNames: 'entries'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'GDH 5/24/2021 19:32:40'!
PortfolioEntry subclass: #Portfolio
	instanceVariableNames: 'entries'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #PortfolioEntry
	instanceVariableNames: 'parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioEntry category: 'Portfolio-Ejercicio' stamp: 'GDH 5/24/2021 19:32:46'!
Object subclass: #PortfolioEntry
	instanceVariableNames: 'parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!methodRemoval: Portfolio #addNewParent: stamp: 'GDH 5/24/2021 19:33:30'!
addNewParent: aPortfolio

	parents add: aPortfolio .
!
!PortfolioEntry methodsFor: 'balance' stamp: 'GDH 5/24/2021 19:34:27'!
addNewParent: aPortfolioEntry

	parents add: aPortfolioEntry.
! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'GDH 5/24/2021 19:35:10'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'GDH 5/24/2021 19:35:10'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'GDH 5/24/2021 19:35:10'!
ERROR!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'GDH 5/24/2021 19:35:10'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'GDH 5/24/2021 19:35:10'!
ERROR!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'GDH 5/24/2021 19:35:10'!
ERROR!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'GDH 5/24/2021 19:35:10'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'GDH 5/24/2021 19:35:10'!
ERROR!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'GDH 5/24/2021 19:35:10'!
ERROR!

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'GDH 5/24/2021 19:35:10'!
ERROR!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'GDH 5/24/2021 19:35:10'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'GDH 5/24/2021 19:35:10'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'GDH 5/24/2021 19:35:10'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'GDH 5/24/2021 19:35:10'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'GDH 5/24/2021 19:35:14'!
ERROR!
!Portfolio methodsFor: 'initialization' stamp: 'GDH 5/24/2021 19:35:45' prior: 50890076 overrides: 16896425!
initialize

	entries := OrderedCollection new.
! !
!PortfolioEntry methodsFor: 'initialization' stamp: 'GDH 5/24/2021 19:36:02' overrides: 16896425!
initialize
	
	parents := OrderedCollection new.! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'GDH 5/24/2021 19:36:05'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'GDH 5/24/2021 19:36:05'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'GDH 5/24/2021 19:36:05'!
ERROR!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'GDH 5/24/2021 19:36:05'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'GDH 5/24/2021 19:36:05'!
ERROR!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'GDH 5/24/2021 19:36:05'!
ERROR!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'GDH 5/24/2021 19:36:05'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'GDH 5/24/2021 19:36:05'!
ERROR!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'GDH 5/24/2021 19:36:05'!
ERROR!

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'GDH 5/24/2021 19:36:05'!
ERROR!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'GDH 5/24/2021 19:36:05'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'GDH 5/24/2021 19:36:05'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'GDH 5/24/2021 19:36:05'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'GDH 5/24/2021 19:36:05'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'GDH 5/24/2021 19:36:08'!
ERROR!

!methodRemoval: PortfolioEntry #initialize stamp: 'GDH 5/24/2021 19:37:18'!
initialize
	
	parents := OrderedCollection new.!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'GDH 5/24/2021 19:37:25' prior: 50889328 overrides: 16896425!
initialize
	transactions := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'initialization' stamp: 'GDH 5/24/2021 19:37:28' prior: 50890320 overrides: 16896425!
initialize

	entries := OrderedCollection new.
	parents := OrderedCollection new.
! !
!Portfolio methodsFor: 'initialization' stamp: 'GDH 5/24/2021 19:37:30' prior: 50890401 overrides: 16896425!
initialize

	entries := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'initialization' stamp: 'GDH 5/24/2021 19:37:47' prior: 50890408 overrides: 16896425!
initialize

	entries := OrderedCollection new.! !
!PortfolioEntry methodsFor: 'initialization' stamp: 'GDH 5/24/2021 19:38:01' overrides: 16896425!
initialize
	
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'initialization' stamp: 'GDH 5/24/2021 19:38:14' prior: 50890415 overrides: 50890420!
initialize
	
	super initialize .
	
	entries := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'GDH 5/24/2021 19:38:42' prior: 50890394 overrides: 50890420!
initialize
	super initialize .

	transactions := OrderedCollection new.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GDH 5/24/2021 19:38:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GDH 5/24/2021 19:38:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GDH 5/24/2021 19:38:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GDH 5/24/2021 19:38:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GDH 5/24/2021 19:38:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GDH 5/24/2021 19:38:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GDH 5/24/2021 19:38:44'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'GDH 5/24/2021 19:38:46'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'GDH 5/24/2021 19:38:46'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'GDH 5/24/2021 19:38:46'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'GDH 5/24/2021 19:38:46'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'GDH 5/24/2021 19:38:46'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'GDH 5/24/2021 19:38:46'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'GDH 5/24/2021 19:38:46'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'GDH 5/24/2021 19:38:46'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'GDH 5/24/2021 19:38:46'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'GDH 5/24/2021 19:38:46'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'GDH 5/24/2021 19:38:46'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'GDH 5/24/2021 19:38:46'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'GDH 5/24/2021 19:38:46'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'GDH 5/24/2021 19:38:46'!
FAILURE!

!testRun: #PortfolioTest #test14 stamp: 'GDH 5/24/2021 19:38:46'!
FAILURE!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'GDH 5/24/2021 19:39:21'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'GDH 5/24/2021 19:39:21'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'GDH 5/24/2021 19:39:21'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'GDH 5/24/2021 19:39:21'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'GDH 5/24/2021 19:39:21'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'GDH 5/24/2021 19:39:21'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'GDH 5/24/2021 19:39:21'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'GDH 5/24/2021 19:39:21'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'GDH 5/24/2021 19:39:21'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'GDH 5/24/2021 19:39:21'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'GDH 5/24/2021 19:39:21'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'GDH 5/24/2021 19:39:21'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'GDH 5/24/2021 19:39:21'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'GDH 5/24/2021 19:39:21'!
FAILURE!

!testRun: #PortfolioTest #test14 stamp: 'GDH 5/24/2021 19:39:21'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'GDH 5/24/2021 19:39:58' prior: 50890160!
findRoots

	parents ifEmpty: [ ^OrderedCollection with: self ].
	
	(parents collect: [ :aPortfolioParent | aPortfolioParent findRoots ]) flatten! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'GDH 5/24/2021 19:40:00'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'GDH 5/24/2021 19:40:00'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'GDH 5/24/2021 19:40:00'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'GDH 5/24/2021 19:40:00'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'GDH 5/24/2021 19:40:00'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'GDH 5/24/2021 19:40:00'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'GDH 5/24/2021 19:40:00'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'GDH 5/24/2021 19:40:00'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'GDH 5/24/2021 19:40:00'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'GDH 5/24/2021 19:40:00'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'GDH 5/24/2021 19:40:00'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'GDH 5/24/2021 19:40:00'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'GDH 5/24/2021 19:40:00'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'GDH 5/24/2021 19:40:00'!
FAILURE!

!testRun: #PortfolioTest #test14 stamp: 'GDH 5/24/2021 19:40:00'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'GDH 5/24/2021 19:40:15' prior: 50890583!
findRoots

	parents ifEmpty: [ ^OrderedCollection with: self ].
	
	^(parents collect: [ :aPortfolioParent | aPortfolioParent findRoots ]) flatten.! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'GDH 5/24/2021 19:40:16'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'GDH 5/24/2021 19:40:16'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'GDH 5/24/2021 19:40:16'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'GDH 5/24/2021 19:40:16'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'GDH 5/24/2021 19:40:16'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'GDH 5/24/2021 19:40:16'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'GDH 5/24/2021 19:40:16'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'GDH 5/24/2021 19:40:16'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'GDH 5/24/2021 19:40:17'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'GDH 5/24/2021 19:40:17'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'GDH 5/24/2021 19:40:17'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'GDH 5/24/2021 19:40:17'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'GDH 5/24/2021 19:40:17'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'GDH 5/24/2021 19:40:17'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'GDH 5/24/2021 19:40:33' prior: 50890651!
findRoots

	parents ifEmpty: [ ^OrderedCollection with: self ].
	
	^( parents collect: [ :aPortfolioParent | aPortfolioParent findRoots ] ) flatten.! !

!methodRemoval: Portfolio #entries stamp: 'GDH 5/24/2021 19:46:06'!
entries

	^entries.!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'GDH 5/24/2021 19:46:09'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'GDH 5/24/2021 19:46:09'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'GDH 5/24/2021 19:46:09'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'GDH 5/24/2021 19:46:09'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'GDH 5/24/2021 19:46:09'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'GDH 5/24/2021 19:46:09'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'GDH 5/24/2021 19:46:09'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'GDH 5/24/2021 19:46:09'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'GDH 5/24/2021 19:46:09'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'GDH 5/24/2021 19:46:09'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'GDH 5/24/2021 19:46:09'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'GDH 5/24/2021 19:46:09'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'GDH 5/24/2021 19:46:09'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'GDH 5/24/2021 19:46:09'!
PASSED!

!methodRemoval: PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'GDH 5/24/2021 19:51:22'!
test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts

	| transaction1 transaction2 portfolio1 account1 account2 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 add: account1.
	
	account2 := (ReceptiveAccount new register: transaction2).
	
	portfolio1 add: account2.
	
	self 
		should: [ portfolio1 add: account1 ] 
		raise: Error 
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio canNotAddPortfolioEntryExceptionMessage ].

	 !

!methodRemoval: PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'GDH 5/24/2021 19:51:25'!
test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts

	| transaction1 transaction2 portfolio1 portfolio2 account1 account2 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 add: account1.
	
	account2 := (ReceptiveAccount new register: transaction2).
	
	portfolio1 add: account2.
	
	portfolio2 := Portfolio new.
	portfolio2 add: account1.

	self 
		should: [ portfolio1 add: portfolio2 ] 
		raise: Error 
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio canNotAddPortfolioEntryExceptionMessage ].!

!methodRemoval: PortfolioTest #test12 stamp: 'GDH 5/24/2021 19:51:27'!
test12

	| transaction1 transaction2 portfolio1 portfolio2 account1 account2 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 add: account1.
	
	account2 := (ReceptiveAccount new register: transaction2).
	
	portfolio2 := Portfolio new.
	portfolio2 add: account2.
	
	portfolio1 add: portfolio2.

	self 
		should: [ portfolio1 add: account2 ] 
		raise: Error 
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio canNotAddPortfolioEntryExceptionMessage ].!

!methodRemoval: PortfolioTest #test13 stamp: 'GDH 5/24/2021 19:51:29'!
test13

	| transaction1 transaction2 portfolio1 portfolio2 portfolio3 account1 account2 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 add: account1.
	
	account2 := (ReceptiveAccount new register: transaction2).
	
	portfolio2 := Portfolio new.
	portfolio2 add: account2.
	
	portfolio1 add: portfolio2.
	
	portfolio3 := Portfolio new.
	portfolio3 add: account2.

	self 
		should: [ portfolio1 add: portfolio3 ] 
		raise: Error 
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio canNotAddPortfolioEntryExceptionMessage ].!
!PortfolioTest methodsFor: 'tests' stamp: 'GDH 5/24/2021 19:58:36'!
test13

	| transaction1 transaction2 portfolio1 portfolio2 portfolio3 account1 account2 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 add: account1.
	
	account2 := (ReceptiveAccount new register: transaction2).
	
	portfolio2 := Portfolio new.
	portfolio2 add: account2.
	
	portfolio1 add: portfolio2.
	
	portfolio3 := Portfolio new.
	portfolio3 add: account2.

	self 
		should: [ portfolio1 add: portfolio3 ] 
		raise: Error 
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio canNotAddPortfolioEntryExceptionMessage ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'GDH 5/24/2021 19:58:49'!
test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts

	| transaction1 transaction2 portfolio1 account1 account2 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 add: account1.
	
	account2 := (ReceptiveAccount new register: transaction2).
	
	portfolio1 add: account2.
	
	self 
		should: [ portfolio1 add: account1 ] 
		raise: Error 
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio canNotAddPortfolioEntryExceptionMessage ].! !
!PortfolioTest methodsFor: 'tests' stamp: 'GDH 5/24/2021 19:58:57'!
test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts

	| transaction1 transaction2 portfolio1 portfolio2 account1 account2 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 add: account1.
	
	account2 := (ReceptiveAccount new register: transaction2).
	
	portfolio1 add: account2.
	
	portfolio2 := Portfolio new.
	portfolio2 add: account1.

	self 
		should: [ portfolio1 add: portfolio2 ] 
		raise: Error 
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio canNotAddPortfolioEntryExceptionMessage ].! !
!PortfolioTest methodsFor: 'tests' stamp: 'GDH 5/24/2021 19:59:05'!
test12

	| transaction1 transaction2 portfolio1 portfolio2 account1 account2 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 add: account1.
	
	account2 := (ReceptiveAccount new register: transaction2).
	
	portfolio2 := Portfolio new.
	portfolio2 add: account2.
	
	portfolio1 add: portfolio2.

	self 
		should: [ portfolio1 add: account2 ] 
		raise: Error 
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio canNotAddPortfolioEntryExceptionMessage ].! !

!methodRemoval: PortfolioTest #test12 stamp: 'GDH 5/24/2021 20:00:48'!
test12

	| transaction1 transaction2 portfolio1 portfolio2 account1 account2 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 add: account1.
	
	account2 := (ReceptiveAccount new register: transaction2).
	
	portfolio2 := Portfolio new.
	portfolio2 add: account2.
	
	portfolio1 add: portfolio2.

	self 
		should: [ portfolio1 add: account2 ] 
		raise: Error 
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio canNotAddPortfolioEntryExceptionMessage ].!

!methodRemoval: PortfolioTest #test13 stamp: 'GDH 5/24/2021 20:00:50'!
test13

	| transaction1 transaction2 portfolio1 portfolio2 portfolio3 account1 account2 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 add: account1.
	
	account2 := (ReceptiveAccount new register: transaction2).
	
	portfolio2 := Portfolio new.
	portfolio2 add: account2.
	
	portfolio1 add: portfolio2.
	
	portfolio3 := Portfolio new.
	portfolio3 add: account2.

	self 
		should: [ portfolio1 add: portfolio3 ] 
		raise: Error 
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio canNotAddPortfolioEntryExceptionMessage ]!
!PortfolioTest methodsFor: 'tests' stamp: 'GDH 5/24/2021 20:04:36'!
test12CanNotAddPortfolioEntryToPortfolioHierarchyIfGeneratesRepeatedAccounts

	| transaction1 transaction2 portfolio1 portfolio2 account1 account2 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 add: account1.
	
	account2 := (ReceptiveAccount new register: transaction2).
	
	portfolio2 := Portfolio new.
	portfolio2 add: account2.
	
	portfolio1 add: portfolio2.

	self 
		should: [ portfolio2 add: account1 ] 
		raise: Error 
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio canNotAddPortfolioEntryExceptionMessage ].! !

!methodRemoval: PortfolioTest #test14 stamp: 'GDH 5/24/2021 20:04:39'!
test14

	| transaction1 transaction2 portfolio1 portfolio2 account1 account2 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 add: account1.
	
	account2 := (ReceptiveAccount new register: transaction2).
	
	portfolio2 := Portfolio new.
	portfolio2 add: account2.
	
	portfolio1 add: portfolio2.

	self 
		should: [ portfolio2 add: account1 ] 
		raise: Error 
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio canNotAddPortfolioEntryExceptionMessage ].!
!PortfolioTest methodsFor: 'setUp' stamp: 'GDH 5/24/2021 20:04:57' overrides: 16927572!
setUp
	! !

TestCase subclass: #PortfolioTest
	instanceVariableNames: 'transaction1 transaction2 transaction3 transaction4 transaction5'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

TestCase subclass: #PortfolioTest
	instanceVariableNames: 'transactionn1 transactionn2 transactionn3 transactionn4 transactionn5'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'GDH 5/24/2021 20:07:23'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'transactionn1 transactionn2 transactionn3 transactionn4 transactionn5'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'setUp' stamp: 'GDH 5/24/2021 20:08:23' prior: 50891063 overrides: 16927572!
setUp
	
	transactionn1 := Deposit for: 100.
	transactionn2 := Withdraw for: 50.
	transactionn3 := Deposit for: 10.
	transactionn4 := Withdraw for: 20.
	transactionn5 := Deposit for: 200.
	! !
!PortfolioTest methodsFor: 'accounts' stamp: 'GDH 5/24/2021 20:09:00'!
account1
	
	! !
!PortfolioTest methodsFor: 'accounts' stamp: 'GDH 5/24/2021 20:09:05'!
account2
	
	! !
!PortfolioTest methodsFor: 'accounts' stamp: 'GDH 5/24/2021 20:10:14' prior: 50891099!
account1
	
	^(ReceptiveAccount new register: transactionn1) register: transactionn2 . "50"! !
!PortfolioTest methodsFor: 'accounts' stamp: 'GDH 5/24/2021 20:10:41' prior: 50891102!
account2
	
	^( ReceptiveAccount new register: transactionn3 ) register: transactionn4 . "-10"! !
!PortfolioTest methodsFor: 'tests' stamp: 'GDH 5/24/2021 20:11:07' prior: 50888747!
test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances

	| portfolio |

	portfolio := Portfolio new.
	
	portfolio add: self account1 .
	portfolio add: self account2 .
	
	self assert: (portfolio balance = 40).
	! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'GDH 5/24/2021 20:11:08'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'GDH 5/24/2021 20:11:08'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'GDH 5/24/2021 20:11:08'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'GDH 5/24/2021 20:11:08'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'GDH 5/24/2021 20:11:08'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'GDH 5/24/2021 20:11:08'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'GDH 5/24/2021 20:11:08'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'GDH 5/24/2021 20:11:08'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'GDH 5/24/2021 20:11:08'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'GDH 5/24/2021 20:11:08'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'GDH 5/24/2021 20:11:08'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'GDH 5/24/2021 20:11:08'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddPortfolioEntryToPortfolioHierarchyIfGeneratesRepeatedAccounts stamp: 'GDH 5/24/2021 20:11:08'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'GDH 5/24/2021 20:12:17' prior: 50888764!
test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances

	| portfolio1 portfolio2 |

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio2 add: self account3.
	
	portfolio1 add: self account1 . "50"
	portfolio1 add: self account2 . "-10"
	portfolio1 add: portfolio2. "150"
	
	self assert: (portfolio1 balance = 190).
	! !
!PortfolioTest methodsFor: 'accounts' stamp: 'GDH 5/24/2021 20:12:46'!
account3
	
	^(ReceptiveAccount new register: transactionn5 ) register: transactionn2 . "150"! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'GDH 5/24/2021 20:12:53'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'GDH 5/24/2021 20:12:53'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'GDH 5/24/2021 20:12:53'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'GDH 5/24/2021 20:12:53'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'GDH 5/24/2021 20:12:53'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'GDH 5/24/2021 20:12:53'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'GDH 5/24/2021 20:12:53'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'GDH 5/24/2021 20:12:53'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'GDH 5/24/2021 20:12:53'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'GDH 5/24/2021 20:12:53'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'GDH 5/24/2021 20:12:53'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddPortfolioEntryToPortfolioHierarchyIfGeneratesRepeatedAccounts stamp: 'GDH 5/24/2021 20:12:53'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'GDH 5/24/2021 20:13:33' prior: 50888796!
test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions

	| portfolio expectedPortfolioTransactions | 
	
	portfolio := Portfolio new.

	portfolio add: self account1 .
	portfolio add: self account2 .

	expectedPortfolioTransactions := OrderedCollection with: transactionn1 with: transactionn2 with: transactionn3 with: transactionn4.
	
	self assert: (portfolio transactions includesAllOf: expectedPortfolioTransactions).
	self assert: (expectedPortfolioTransactions includesAllOf: portfolio transactions).
	
	! !

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'GDH 5/24/2021 20:13:34'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'GDH 5/24/2021 20:13:34'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'GDH 5/24/2021 20:13:34'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'GDH 5/24/2021 20:13:34'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'GDH 5/24/2021 20:13:34'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'GDH 5/24/2021 20:13:34'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'GDH 5/24/2021 20:13:34'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'GDH 5/24/2021 20:13:34'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'GDH 5/24/2021 20:13:34'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'GDH 5/24/2021 20:13:34'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'GDH 5/24/2021 20:13:34'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'GDH 5/24/2021 20:13:34'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddPortfolioEntryToPortfolioHierarchyIfGeneratesRepeatedAccounts stamp: 'GDH 5/24/2021 20:13:34'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'GDH 5/24/2021 20:14:35' prior: 50888828!
test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions

	| portfolio1 portfolio2 expectedPortfolioTransactions | 
	
	portfolio1 := Portfolio new.
	
	portfolio1 add: self account1.
	portfolio1 add: self account2.
	
	portfolio2 := Portfolio new.
	portfolio2 add: self account3.
	
	portfolio1 add: portfolio2.

	expectedPortfolioTransactions := OrderedCollection with: transactionn1 with: transactionn2 with: transactionn3 with: transactionn4 with: transactionn5 with: transactionn2.
	
	self assert: (portfolio1 transactions includesAllOf: expectedPortfolioTransactions).
	self assert: (expectedPortfolioTransactions includesAllOf: portfolio1 transactions).
	
	! !

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'GDH 5/24/2021 20:14:36'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'GDH 5/24/2021 20:14:36'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'GDH 5/24/2021 20:14:36'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'GDH 5/24/2021 20:14:36'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'GDH 5/24/2021 20:14:36'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'GDH 5/24/2021 20:14:36'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'GDH 5/24/2021 20:14:36'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'GDH 5/24/2021 20:14:36'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'GDH 5/24/2021 20:14:36'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'GDH 5/24/2021 20:14:36'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'GDH 5/24/2021 20:14:36'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'GDH 5/24/2021 20:14:36'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddPortfolioEntryToPortfolioHierarchyIfGeneratesRepeatedAccounts stamp: 'GDH 5/24/2021 20:14:36'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'GDH 5/24/2021 20:14:49' prior: 50888870!
test07EmptyPortfolioShouldHaveNotRegisteredTransactions

	self deny: (Portfolio new hasRegistered: transactionn1 ).! !

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'GDH 5/24/2021 20:14:50'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'GDH 5/24/2021 20:14:50'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'GDH 5/24/2021 20:14:50'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'GDH 5/24/2021 20:14:50'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'GDH 5/24/2021 20:14:50'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'GDH 5/24/2021 20:14:50'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'GDH 5/24/2021 20:14:50'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'GDH 5/24/2021 20:14:50'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'GDH 5/24/2021 20:14:50'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'GDH 5/24/2021 20:14:50'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'GDH 5/24/2021 20:14:50'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'GDH 5/24/2021 20:14:50'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddPortfolioEntryToPortfolioHierarchyIfGeneratesRepeatedAccounts stamp: 'GDH 5/24/2021 20:14:50'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'GDH 5/24/2021 20:15:25' prior: 50888879!
test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions

	| portfolio1 account1 |
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transactionn1).
	
	portfolio1 add: account1.

	self assert: ( portfolio1 hasRegistered: transactionn1 ).
	self deny: ( portfolio1 hasRegistered: transactionn2 ).! !

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'GDH 5/24/2021 20:15:26'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'GDH 5/24/2021 20:15:26'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'GDH 5/24/2021 20:15:26'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'GDH 5/24/2021 20:15:26'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'GDH 5/24/2021 20:15:26'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'GDH 5/24/2021 20:15:26'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'GDH 5/24/2021 20:15:26'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'GDH 5/24/2021 20:15:26'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'GDH 5/24/2021 20:15:26'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'GDH 5/24/2021 20:15:26'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'GDH 5/24/2021 20:15:26'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'GDH 5/24/2021 20:15:26'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddPortfolioEntryToPortfolioHierarchyIfGeneratesRepeatedAccounts stamp: 'GDH 5/24/2021 20:15:26'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'GDH 5/24/2021 20:16:53' prior: 50888897!
test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions

	| portfolio1 portfolio2 account2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account2 := (ReceptiveAccount new register: transactionn2).
	
	portfolio1 add: self account1 .
	
	portfolio2 add: account2.
	
	portfolio1 add: portfolio2.

	self assert: ( portfolio1 hasRegistered: transactionn2 ).
	self deny: ( portfolio1 hasRegistered: transactionn3 ).! !

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'GDH 5/24/2021 20:16:56'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'GDH 5/24/2021 20:16:56'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'GDH 5/24/2021 20:16:56'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'GDH 5/24/2021 20:16:56'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'GDH 5/24/2021 20:16:56'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'GDH 5/24/2021 20:16:56'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'GDH 5/24/2021 20:16:56'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'GDH 5/24/2021 20:16:56'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'GDH 5/24/2021 20:16:56'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'GDH 5/24/2021 20:16:56'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'GDH 5/24/2021 20:16:56'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'GDH 5/24/2021 20:16:56'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddPortfolioEntryToPortfolioHierarchyIfGeneratesRepeatedAccounts stamp: 'GDH 5/24/2021 20:16:56'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'GDH 5/24/2021 20:17:51' prior: 50890904!
test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts

	| portfolio1 account1 |
	
	portfolio1 := Portfolio new.
	account1 := self account1 .
	
	portfolio1 add: self account1 .
	
	
	portfolio1 add: self account2 .
	
	self 
		should: [ portfolio1 add: account1 ] 
		raise: Error 
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio canNotAddPortfolioEntryExceptionMessage ].! !

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'GDH 5/24/2021 20:17:52'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'GDH 5/24/2021 20:18:03' prior: 50891649!
test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts

	| portfolio1 account1 |
	
	portfolio1 := Portfolio new.
	account1 := self account1 .
	
	portfolio1 add: self account1 .
	
	portfolio1 add: self account2 .
	
	self 
		should: [ portfolio1 add: account1 ] 
		raise: Error 
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio canNotAddPortfolioEntryExceptionMessage ].! !

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'GDH 5/24/2021 20:18:03'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'GDH 5/24/2021 20:18:19' prior: 50891669!
test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts

	| transaction1 transaction2 portfolio1 account1 account2 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 add: account1.
	
	account2 := (ReceptiveAccount new register: transaction2).
	
	portfolio1 add: account2.
	
	self 
		should: [ portfolio1 add: account1 ] 
		raise: Error 
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio canNotAddPortfolioEntryExceptionMessage ].! !

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'GDH 5/24/2021 20:18:20'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'GDH 5/24/2021 20:18:20'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'GDH 5/24/2021 20:18:20'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'GDH 5/24/2021 20:18:20'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'GDH 5/24/2021 20:18:20'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'GDH 5/24/2021 20:18:20'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'GDH 5/24/2021 20:18:20'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'GDH 5/24/2021 20:18:20'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'GDH 5/24/2021 20:18:20'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'GDH 5/24/2021 20:18:20'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'GDH 5/24/2021 20:18:20'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'GDH 5/24/2021 20:18:20'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddPortfolioEntryToPortfolioHierarchyIfGeneratesRepeatedAccounts stamp: 'GDH 5/24/2021 20:18:20'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'GDH 5/24/2021 20:18:32' prior: 50891689!
test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts

	| transaction1 transaction2 portfolio1 account1 account2 |
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	
	portfolio1 := Portfolio new.
	account1 := self account1 .
	
	portfolio1 add: account1.
	
	account2 := (ReceptiveAccount new register: transaction2).
	
	portfolio1 add: account2.
	
	self 
		should: [ portfolio1 add: account1 ] 
		raise: Error 
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio canNotAddPortfolioEntryExceptionMessage ].! !

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'GDH 5/24/2021 20:18:39'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'GDH 5/24/2021 20:18:39'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'GDH 5/24/2021 20:18:39'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'GDH 5/24/2021 20:18:39'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'GDH 5/24/2021 20:18:39'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'GDH 5/24/2021 20:18:39'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'GDH 5/24/2021 20:18:39'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'GDH 5/24/2021 20:18:39'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'GDH 5/24/2021 20:18:39'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'GDH 5/24/2021 20:18:39'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'GDH 5/24/2021 20:18:39'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'GDH 5/24/2021 20:18:39'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddPortfolioEntryToPortfolioHierarchyIfGeneratesRepeatedAccounts stamp: 'GDH 5/24/2021 20:18:39'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'GDH 5/24/2021 20:19:02' prior: 50891770!
test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts

	|  portfolio1 account1 |
	
	portfolio1 := Portfolio new.
	account1 := self account1 .
	
	portfolio1 add: account1.
		
	portfolio1 add: self account2 .
	
	self 
		should: [ portfolio1 add: account1 ] 
		raise: Error 
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio canNotAddPortfolioEntryExceptionMessage ].! !

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'GDH 5/24/2021 20:19:03'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'GDH 5/24/2021 20:19:03'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'GDH 5/24/2021 20:19:03'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'GDH 5/24/2021 20:19:03'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'GDH 5/24/2021 20:19:03'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'GDH 5/24/2021 20:19:03'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'GDH 5/24/2021 20:19:03'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'GDH 5/24/2021 20:19:03'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'GDH 5/24/2021 20:19:03'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'GDH 5/24/2021 20:19:03'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'GDH 5/24/2021 20:19:03'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'GDH 5/24/2021 20:19:03'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddPortfolioEntryToPortfolioHierarchyIfGeneratesRepeatedAccounts stamp: 'GDH 5/24/2021 20:19:03'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'GDH 5/24/2021 20:20:06' prior: 50890925!
test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts

	| portfolio1 portfolio2 account1 |
	
	portfolio1 := Portfolio new.
	account1 := self account1 .
	
	portfolio1 add: account1.
	
	portfolio1 add: self account2 .
	
	portfolio2 := Portfolio new.
	portfolio2 add: account1.

	self 
		should: [ portfolio1 add: portfolio2 ] 
		raise: Error 
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio canNotAddPortfolioEntryExceptionMessage ].! !

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'GDH 5/24/2021 20:20:09'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'GDH 5/24/2021 20:20:09'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'GDH 5/24/2021 20:20:09'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'GDH 5/24/2021 20:20:09'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'GDH 5/24/2021 20:20:09'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'GDH 5/24/2021 20:20:09'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'GDH 5/24/2021 20:20:09'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'GDH 5/24/2021 20:20:09'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'GDH 5/24/2021 20:20:09'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'GDH 5/24/2021 20:20:09'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'GDH 5/24/2021 20:20:09'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'GDH 5/24/2021 20:20:09'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddPortfolioEntryToPortfolioHierarchyIfGeneratesRepeatedAccounts stamp: 'GDH 5/24/2021 20:20:09'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'GDH 5/24/2021 20:20:48' prior: 50891017!
test12CanNotAddPortfolioEntryToPortfolioHierarchyIfGeneratesRepeatedAccounts

	| portfolio1 portfolio2 account1 |

	portfolio1 := Portfolio new.
	account1 := self account1 .
	
	portfolio1 add: account1.
	
	portfolio2 := Portfolio new.
	portfolio2 add: self account2 .
	
	portfolio1 add: portfolio2.

	self 
		should: [ portfolio2 add: account1 ] 
		raise: Error 
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio canNotAddPortfolioEntryExceptionMessage ].! !

!testRun: #PortfolioTest #test12CanNotAddPortfolioEntryToPortfolioHierarchyIfGeneratesRepeatedAccounts stamp: 'GDH 5/24/2021 20:20:48'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'GDH 5/24/2021 20:20:48'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'GDH 5/24/2021 20:20:48'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'GDH 5/24/2021 20:20:48'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'GDH 5/24/2021 20:20:48'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'GDH 5/24/2021 20:20:48'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'GDH 5/24/2021 20:20:48'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'GDH 5/24/2021 20:20:48'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'GDH 5/24/2021 20:20:48'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'GDH 5/24/2021 20:20:48'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'GDH 5/24/2021 20:20:48'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'GDH 5/24/2021 20:20:48'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddPortfolioEntryToPortfolioHierarchyIfGeneratesRepeatedAccounts stamp: 'GDH 5/24/2021 20:20:48'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'GDH 5/24/2021 20:21:00' prior: 50891188!
test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances

	| portfolio1 portfolio2 |

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio2 add: self account3.
	
	portfolio1 add: self account1 .
	portfolio1 add: self account2 .
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 balance = 190).
	! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'GDH 5/24/2021 20:21:40'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'transaction1 transactionn2 transactionn3 transactionn4 transactionn5'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GDH 5/24/2021 20:21:40' prior: 50891430!
test07EmptyPortfolioShouldHaveNotRegisteredTransactions

	self deny: (Portfolio new hasRegistered: transaction1 ).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GDH 5/24/2021 20:21:40' prior: 50891344!
test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions

	| portfolio1 portfolio2 expectedPortfolioTransactions | 
	
	portfolio1 := Portfolio new.
	
	portfolio1 add: self account1.
	portfolio1 add: self account2.
	
	portfolio2 := Portfolio new.
	portfolio2 add: self account3.
	
	portfolio1 add: portfolio2.

	expectedPortfolioTransactions := OrderedCollection with: transaction1 with: transactionn2 with: transactionn3 with: transactionn4 with: transactionn5 with: transactionn2.
	
	self assert: (portfolio1 transactions includesAllOf: expectedPortfolioTransactions).
	self assert: (expectedPortfolioTransactions includesAllOf: portfolio1 transactions).
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GDH 5/24/2021 20:21:40' prior: 50891090 overrides: 16927572!
setUp
	
	transaction1 := Deposit for: 100.
	transactionn2 := Withdraw for: 50.
	transactionn3 := Deposit for: 10.
	transactionn4 := Withdraw for: 20.
	transactionn5 := Deposit for: 200.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GDH 5/24/2021 20:21:40' prior: 50891496!
test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions

	| portfolio1 account1 |
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 add: account1.

	self assert: ( portfolio1 hasRegistered: transaction1 ).
	self deny: ( portfolio1 hasRegistered: transactionn2 ).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GDH 5/24/2021 20:21:40' prior: 50891264!
test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions

	| portfolio expectedPortfolioTransactions | 
	
	portfolio := Portfolio new.

	portfolio add: self account1 .
	portfolio add: self account2 .

	expectedPortfolioTransactions := OrderedCollection with: transaction1 with: transactionn2 with: transactionn3 with: transactionn4.
	
	self assert: (portfolio transactions includesAllOf: expectedPortfolioTransactions).
	self assert: (expectedPortfolioTransactions includesAllOf: portfolio transactions).
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GDH 5/24/2021 20:21:40' prior: 50891106!
account1
	
	^(ReceptiveAccount new register: transaction1) register: transactionn2 . "50"! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'GDH 5/24/2021 20:21:47'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'GDH 5/24/2021 20:21:49'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'GDH 5/24/2021 20:21:50'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'GDH 5/24/2021 20:21:50'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'GDH 5/24/2021 20:21:50'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'GDH 5/24/2021 20:21:50'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'GDH 5/24/2021 20:21:50'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'GDH 5/24/2021 20:21:50'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'GDH 5/24/2021 20:21:50'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'GDH 5/24/2021 20:21:50'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'GDH 5/24/2021 20:21:50'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'GDH 5/24/2021 20:21:50'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddPortfolioEntryToPortfolioHierarchyIfGeneratesRepeatedAccounts stamp: 'GDH 5/24/2021 20:21:50'!
PASSED!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'GDH 5/24/2021 20:21:57'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'transaction1 transaction2 transactionn3 transactionn4 transactionn5'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GDH 5/24/2021 20:21:57' prior: 50892114!
test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions

	| portfolio1 portfolio2 expectedPortfolioTransactions | 
	
	portfolio1 := Portfolio new.
	
	portfolio1 add: self account1.
	portfolio1 add: self account2.
	
	portfolio2 := Portfolio new.
	portfolio2 add: self account3.
	
	portfolio1 add: portfolio2.

	expectedPortfolioTransactions := OrderedCollection with: transaction1 with: transaction2 with: transactionn3 with: transactionn4 with: transactionn5 with: transaction2.
	
	self assert: (portfolio1 transactions includesAllOf: expectedPortfolioTransactions).
	self assert: (expectedPortfolioTransactions includesAllOf: portfolio1 transactions).
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GDH 5/24/2021 20:21:57' prior: 50892150!
test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions

	| portfolio1 account1 |
	
	portfolio1 := Portfolio new.
	account1 := (ReceptiveAccount new register: transaction1).
	
	portfolio1 add: account1.

	self assert: ( portfolio1 hasRegistered: transaction1 ).
	self deny: ( portfolio1 hasRegistered: transaction2 ).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GDH 5/24/2021 20:21:57' prior: 50892185!
account1
	
	^(ReceptiveAccount new register: transaction1) register: transaction2 . "50"! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GDH 5/24/2021 20:21:57' prior: 50892140 overrides: 16927572!
setUp
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	transactionn3 := Deposit for: 10.
	transactionn4 := Withdraw for: 20.
	transactionn5 := Deposit for: 200.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GDH 5/24/2021 20:21:57' prior: 50891203!
account3
	
	^(ReceptiveAccount new register: transactionn5 ) register: transaction2 . "150"! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GDH 5/24/2021 20:21:57' prior: 50892165!
test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions

	| portfolio expectedPortfolioTransactions | 
	
	portfolio := Portfolio new.

	portfolio add: self account1 .
	portfolio add: self account2 .

	expectedPortfolioTransactions := OrderedCollection with: transaction1 with: transaction2 with: transactionn3 with: transactionn4.
	
	self assert: (portfolio transactions includesAllOf: expectedPortfolioTransactions).
	self assert: (expectedPortfolioTransactions includesAllOf: portfolio transactions).
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GDH 5/24/2021 20:21:57' prior: 50891570!
test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions

	| portfolio1 portfolio2 account2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account2 := (ReceptiveAccount new register: transaction2).
	
	portfolio1 add: self account1 .
	
	portfolio2 add: account2.
	
	portfolio1 add: portfolio2.

	self assert: ( portfolio1 hasRegistered: transaction2 ).
	self deny: ( portfolio1 hasRegistered: transactionn3 ).! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'GDH 5/24/2021 20:22:03'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'transaction1 transaction2 transaction3 transactionn4 transactionn5'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GDH 5/24/2021 20:22:03' prior: 50892308 overrides: 16927572!
setUp
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	transaction3 := Deposit for: 10.
	transactionn4 := Withdraw for: 20.
	transactionn5 := Deposit for: 200.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GDH 5/24/2021 20:22:03' prior: 50891112!
account2
	
	^( ReceptiveAccount new register: transaction3 ) register: transactionn4 . "-10"! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GDH 5/24/2021 20:22:03' prior: 50892344!
test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions

	| portfolio1 portfolio2 account2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account2 := (ReceptiveAccount new register: transaction2).
	
	portfolio1 add: self account1 .
	
	portfolio2 add: account2.
	
	portfolio1 add: portfolio2.

	self assert: ( portfolio1 hasRegistered: transaction2 ).
	self deny: ( portfolio1 hasRegistered: transaction3 ).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GDH 5/24/2021 20:22:03' prior: 50892260!
test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions

	| portfolio1 portfolio2 expectedPortfolioTransactions | 
	
	portfolio1 := Portfolio new.
	
	portfolio1 add: self account1.
	portfolio1 add: self account2.
	
	portfolio2 := Portfolio new.
	portfolio2 add: self account3.
	
	portfolio1 add: portfolio2.

	expectedPortfolioTransactions := OrderedCollection with: transaction1 with: transaction2 with: transaction3 with: transactionn4 with: transactionn5 with: transaction2.
	
	self assert: (portfolio1 transactions includesAllOf: expectedPortfolioTransactions).
	self assert: (expectedPortfolioTransactions includesAllOf: portfolio1 transactions).
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GDH 5/24/2021 20:22:03' prior: 50892324!
test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions

	| portfolio expectedPortfolioTransactions | 
	
	portfolio := Portfolio new.

	portfolio add: self account1 .
	portfolio add: self account2 .

	expectedPortfolioTransactions := OrderedCollection with: transaction1 with: transaction2 with: transaction3 with: transactionn4.
	
	self assert: (portfolio transactions includesAllOf: expectedPortfolioTransactions).
	self assert: (expectedPortfolioTransactions includesAllOf: portfolio transactions).
	
	! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'GDH 5/24/2021 20:22:09'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'transaction1 transaction2 transaction3 transaction4 transactionn5'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GDH 5/24/2021 20:22:09' prior: 50892382!
account2
	
	^( ReceptiveAccount new register: transaction3 ) register: transaction4 . "-10"! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GDH 5/24/2021 20:22:09' prior: 50892373 overrides: 16927572!
setUp
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	transaction3 := Deposit for: 10.
	transaction4 := Withdraw for: 20.
	transactionn5 := Deposit for: 200.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GDH 5/24/2021 20:22:09' prior: 50892408!
test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions

	| portfolio1 portfolio2 expectedPortfolioTransactions | 
	
	portfolio1 := Portfolio new.
	
	portfolio1 add: self account1.
	portfolio1 add: self account2.
	
	portfolio2 := Portfolio new.
	portfolio2 add: self account3.
	
	portfolio1 add: portfolio2.

	expectedPortfolioTransactions := OrderedCollection with: transaction1 with: transaction2 with: transaction3 with: transaction4 with: transactionn5 with: transaction2.
	
	self assert: (portfolio1 transactions includesAllOf: expectedPortfolioTransactions).
	self assert: (expectedPortfolioTransactions includesAllOf: portfolio1 transactions).
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GDH 5/24/2021 20:22:09' prior: 50892434!
test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions

	| portfolio expectedPortfolioTransactions | 
	
	portfolio := Portfolio new.

	portfolio add: self account1 .
	portfolio add: self account2 .

	expectedPortfolioTransactions := OrderedCollection with: transaction1 with: transaction2 with: transaction3 with: transaction4.
	
	self assert: (portfolio transactions includesAllOf: expectedPortfolioTransactions).
	self assert: (expectedPortfolioTransactions includesAllOf: portfolio transactions).
	
	! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'GDH 5/24/2021 20:22:13'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'transaction1 transaction2 transaction3 transaction4 transaction5'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GDH 5/24/2021 20:22:13' prior: 50892471 overrides: 16927572!
setUp
	
	transaction1 := Deposit for: 100.
	transaction2 := Withdraw for: 50.
	transaction3 := Deposit for: 10.
	transaction4 := Withdraw for: 20.
	transaction5 := Deposit for: 200.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GDH 5/24/2021 20:22:14' prior: 50892480!
test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions

	| portfolio1 portfolio2 expectedPortfolioTransactions | 
	
	portfolio1 := Portfolio new.
	
	portfolio1 add: self account1.
	portfolio1 add: self account2.
	
	portfolio2 := Portfolio new.
	portfolio2 add: self account3.
	
	portfolio1 add: portfolio2.

	expectedPortfolioTransactions := OrderedCollection with: transaction1 with: transaction2 with: transaction3 with: transaction4 with: transaction5 with: transaction2.
	
	self assert: (portfolio1 transactions includesAllOf: expectedPortfolioTransactions).
	self assert: (expectedPortfolioTransactions includesAllOf: portfolio1 transactions).
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GDH 5/24/2021 20:22:14' prior: 50892317!
account3
	
	^(ReceptiveAccount new register: transaction5 ) register: transaction2 . "150"! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'GDH 5/24/2021 20:22:16'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'GDH 5/24/2021 20:22:16'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'GDH 5/24/2021 20:22:16'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'GDH 5/24/2021 20:22:16'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'GDH 5/24/2021 20:22:16'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'GDH 5/24/2021 20:22:16'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'GDH 5/24/2021 20:22:16'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'GDH 5/24/2021 20:22:16'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'GDH 5/24/2021 20:22:16'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'GDH 5/24/2021 20:22:16'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'GDH 5/24/2021 20:22:16'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddPortfolioEntryToPortfolioHierarchyIfGeneratesRepeatedAccounts stamp: 'GDH 5/24/2021 20:22:16'!
PASSED!
!Deposit methodsFor: 'initialization' stamp: 'GDH 5/24/2021 20:22:42' prior: 50889134!
initializeFor: aValue
	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'GDH 5/24/2021 20:22:58' prior: 50889139 overrides: 50889094!
value
	^ value! !

!methodRemoval: Deposit #m stamp: 'GDH 5/24/2021 20:23:05'!
m

	^value.!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'GDH 5/24/2021 20:23:15'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'GDH 5/24/2021 20:23:15'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'GDH 5/24/2021 20:23:15'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'GDH 5/24/2021 20:23:15'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'GDH 5/24/2021 20:23:15'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'GDH 5/24/2021 20:23:15'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'GDH 5/24/2021 20:23:15'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'GDH 5/24/2021 20:23:15'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'GDH 5/24/2021 20:23:15'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'GDH 5/24/2021 20:23:15'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'GDH 5/24/2021 20:23:15'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddPortfolioEntryToPortfolioHierarchyIfGeneratesRepeatedAccounts stamp: 'GDH 5/24/2021 20:23:15'!
PASSED!

----QUIT----(24 May 2021 20:23:55) CuisUniversity-4532.image priorSource: 17826261!

----STARTUP---- (25 May 2021 19:23:09) as C:\Users\matia\Downloads\windows64\windows64\CuisUniversity-4532.image!


!classRemoval: #ReceptiveAccount stamp: 'MS 5/25/2021 19:23:37'!
PortfolioEntry subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'MS 5/25/2021 19:23:37'!
PortfolioEntry subclass: #Portfolio
	instanceVariableNames: 'entries'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioEntry stamp: 'MS 5/25/2021 19:23:37'!
Object subclass: #PortfolioEntry
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'MS 5/25/2021 19:23:37'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'MS 5/25/2021 19:23:37'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'MS 5/25/2021 19:23:38'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'MS 5/25/2021 19:23:38'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'MS 5/25/2021 19:23:38'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of C:\Users\matia\Downloads\windows64\windows64\Portfolio-Ejercicio.st----!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveCeroBalance stamp: 'MS 5/25/2021 19:23:52'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioContainingOnlyAccountsShouldBeSumOfAccountBalances stamp: 'MS 5/25/2021 19:23:52'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioContainingAccountsAndPortfoliosShouldBeSumOfAccountAndPortfoliosBalances stamp: 'MS 5/25/2021 19:23:52'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioShouldHaveNoTransactions stamp: 'MS 5/25/2021 19:23:52'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfPortfolioContainingOnlyAccountsShouldBeUnionOfAccountTransactions stamp: 'MS 5/25/2021 19:23:52'!
PASSED!

!testRun: #PortfolioTest #test06TransactionsOfPortfolioContainingAccountsAndPortfoliosShouldBeUnionOfAccountAndPortfoliosTransactions stamp: 'MS 5/25/2021 19:23:52'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioShouldHaveNotRegisteredTransactions stamp: 'MS 5/25/2021 19:23:52'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredWithPortfolioContainingOnlyAccountsShouldCheckAccountsTransactions stamp: 'MS 5/25/2021 19:23:52'!
PASSED!

!testRun: #PortfolioTest #test09HasRegisteredWithPortfolioContainingAccountsAndPortfoliosShouldCheckAccountsAndPortfoliosTransactions stamp: 'MS 5/25/2021 19:23:52'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddRepeatedAccountToPortfolioContainingOnlyAccounts stamp: 'MS 5/25/2021 19:23:52'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioContainingOnlyAccountsToPortfolioContainingOnlyAccountsIfTheyShareAccounts stamp: 'MS 5/25/2021 19:23:52'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddPortfolioEntryToPortfolioHierarchyIfGeneratesRepeatedAccounts stamp: 'MS 5/25/2021 19:23:52'!
PASSED!

----QUIT----(25 May 2021 19:24:11) CuisUniversity-4532.image priorSource: 18298104!