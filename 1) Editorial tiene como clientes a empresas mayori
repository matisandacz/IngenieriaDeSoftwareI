1) Editorial tiene como clientes a empresas mayoristas, no minoristas o personas consumidoras finales.

2) de manera batch recibe pedidos. Durante el dia se reciben archivos por mail que alguien pone en un directorio.

A la noche se ejecuta un proceso que agarra esos archivos, los parsea y saca los pedidos que necesita.

Objetivo: Trabajar de manera ONLINE con una API Rest.

API = Interfaz
Rest = Funciona sobre HTTP.

Merchant Processor = Es un sistema externo que se va a utilizar cada vez que el cliente haga un pedido y lo tenga que pagar con tarjeta de credito. Ese pago debe ser autorizado por el merchant Processor.

El merchant processor tiene un ambiente de produccion y de pruebas que se utiliza dependiendo el URL.
Pero tambien cobra por prueba.

Hay requisitos para enviar datos de pago al ambiente de desarrollo del Merchant Processor. Validarlo antes.

El merchant processor no tiene un buen UP TIME. Si no se puede hacer el debito de la tarjeta, como son todos clientes conocidos, se vende igual, y se mete la transaccion en un archivo para que sea debitado a la noche.


Interfaz de entrada del sistema: REST.

Implementa varias operaciones como
createCart / addTocart, listCart, etc.

--------------------------------

control point tests:

cuando pensamos los nombres de los tests, queda mas claro que es lo que se quiere testear.

regla para nombre de los tests: sintetiza el setup + exercise + assertion. decirte que sucede despues de que hiciste algo.

"CreateCartWithNotRegisteredUser"

Eso es simplemente el exercise. Pero que es lo que sucede?

No se puede crear.

CanNotCreateCartWithNotRegisteredUser.


ValidateUserWhenIsNotRegistered.

y que es lo que pasa? Falta el exercise.
Ademas es una frase ambigua. Nuestro sistema no tiene la responsabilidad de validar usuarios, simplemente tiene que saber si se puede crear un carrito.

"Manager, Controller, validate" son muy genericas.


No es necesario saber que crear carrito con reglas sintaticas mal formadas devuelve bad request... eso es algo de lo que se encarga el http request. 

y para que lo dice en la especificacion? Porque son redundantes, ambiguas, etc.

--------------------

Como empezar a desarrollar

Approach 1) Outside In (London Way)
Approach 2) Inside Out (Chicago Way)

Interfaz Objetos Interfaz.

1) Requiere comenzar con la API que usa el mundo exterior para hablar con mis objetos. Va a requerier que cree objetos, que usen la api para comunicarse al exterior, etc...

2) comienzo con los objetos de adentro.

Approach 3) Middle Out (Buenos Aires Way).

DiseÃ±o a la Gorra.

--------------

Pensar como un arbol de ejecucion





Approach 1) 

Implementar el nodo raiz.
Se debe comunicar con todos los nodos de abajo (hijos).


El problema es que antes de tener el test funcionando, vamos a tener que implementar mucho... pues necesitamos hablar con objetos dentro de mi modelo, objetos fuera de mi modelo, etc.


Dos caras de interfaz.

Si no sabemos distribuir bien las responsabilidades, uno de los mayores problemas que vamos a tener es que vamos a tener logica de negocio en la API. 

una ventana, logica de negocio en el handler del click, etc.


Solucion 1) Crear objetos simulados o MOCK objects. -> Test fragiles.

Approach 2)

Empezar con las hojas del arbol.

Problema 2) No agregas mucho valor en cada paso que haces de TDD.


Approach 3) Empezar con los nodos del medio del arbol. No son ni tan complejis ni tan simple.

Los "objetos" del medio dependen de como interpretemos el problema y pensemos la solucion.

Iterativo Incremental. 


Desarrollar software = Modelar dominio de problema.

Modelemos el dominio de problema (Lo que esta en el medio)

Interfaz -> Modelo -> Interfaz.

Luego, hacemos las interfaces. Total las interfaces son maneras que tenemos de interactuar con ese modelo.



Como empezamos?


METAFORAS.

"Fui volando al banco"
Fui rapido al banco.

"La navidad llega en unos dias"

al usar llegar la damos la semantica
de movimiento como si se esta moviendo en el espacio.

metaforas de moverse en el espacio


		 --TESTS--
		   |||||
interfaz -> modelo -> interfaz



Metaforas nos ayudan a hacer visible lo invisible. el software es invisible. No silver Bullet.

Que pasa si pensamos en LA METAFORA de una empresa que NO tenia computadoras y tiene este problema resuelto?

Modelamos los ROLES que cumplen las personas.

Pensemos en la metafora de un SUPERMERCADO.



ANTOPOMORFISMO.
Modelo que cosas haces los seres humanos con el carrito.
No solo lo escencial.


Carrito:

6/7/5/8 tests. no mucho mas q eso

Testear el carrito
se crea vacio
cuando le pongo cosas tiene coasas
no puedo meterle libros q no son de la editorial
no puedo agregarle 1.5 o -3 de un libro cantidades correctas
listar
contenido

-------------------

Modelo de negocio Vs Tecnologia

Modelo de negocio tiene que ser agnostico a la tecnologia.

"Puedo empezar con que se logee el usuario" pero eso no tiene nada que ver con el negocio

es "compiutable" o problema "producto de la tecnologia".

Despues lo resolvemos.

Ahora conviene empezar por el MODELO DE NEGOCIO, eso es lo mas importante.








-----------

































