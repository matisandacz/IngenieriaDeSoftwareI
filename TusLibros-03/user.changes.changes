

----End fileIn of C:\Users\matia\Downloads\windows64\windows64UltimoEj\TusLibros.st----!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 6/21/2021 17:30:45'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 6/21/2021 17:30:45'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 6/21/2021 17:30:45'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 6/21/2021 17:30:45'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 6/21/2021 17:30:45'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 6/21/2021 17:30:45'!
PASSED!

TestCase subclass: #StoreTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreTest category: 'TusLibros' stamp: 'MS 6/21/2021 17:31:25'!
TestCase subclass: #StoreTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTest methodsFor: 'nil' stamp: 'MS 6/21/2021 17:36:54'!
test01CreateCartWithUserNotValidShouldRaiseError

	| store clientId password |
	
	store createCartFor: clientId using: password.! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 17:37:16' prior: 50931533!
test01CreateCartWithUserNotValidShouldRaiseError

	| store clientId password |
	
	store := self createStore.
	
	store createCartFor: clientId using: password.! !

!classDefinition: #Store category: 'TusLibros' stamp: 'MS 6/21/2021 17:37:44'!
Object subclass: #Store
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTest methodsFor: 'nil' stamp: 'MS 6/21/2021 17:37:37'!
createStore

	^Store new.! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 17:42:20' prior: 50931541!
test01CreateCartWithUserNotValidShouldRaiseError

	| store clientId password |
	
	clientId := 'Usuario Invalido'.
	password := 'Contraseña Invalida'.
	
	store := self createStore.
	
	self should: [ store createCartFor: clientId using: password ]
	 	raise:  Error - MessageNotUnderstood
		withMessageText: Store invalidCredentialsErrorMessageDescription.
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 17:43:04' prior: 50931559!
test01CreateCartWithUserNotValidShouldRaiseError

	| store clientId password |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	store := self createStore.
	
	self should: [ store createCartFor: clientId using: password ]
	 	raise:  Error - MessageNotUnderstood
		withMessageText: Store invalidCredentialsErrorMessageDescription.
	
	
	
	! !

!testRun: #StoreTest #test01CreateCartWithUserNotValidShouldRaiseError stamp: 'MS 6/21/2021 17:43:12'!
ERROR!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 17:43:36' prior: 50931574!
test01CreateCartWithUserNotValidShouldRaiseError

	| store clientId password |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	store := self createStore.
	
	self should: [ store createCartFor: clientId using: password ]
	 	raise:  Error - MessageNotUnderstood
		withMessageText: Store invalidCredentialsErrorMessageDescription.
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 17:43:42' prior: 50931592!
test01CreateCartWithUserNotValidShouldRaiseError

	| store clientId password |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	store := self createStore.
	
	self should: [ store createCartFor: clientId using: password ]
	 	raise:  Error - MessageNotUnderstood
		withMessageText: Store invalidCredentialsErrorMessageDescription.
	
	
	
	! !

!testRun: #StoreTest #test01CreateCartWithUserNotValidShouldRaiseError stamp: 'MS 6/21/2021 17:43:46'!
ERROR!
!Store class methodsFor: 'exceptions' stamp: 'MS 6/21/2021 17:43:58'!
invalidCredentialsErrorMessageDescription
	self shouldBeImplemented.! !
!Store class methodsFor: 'exceptions' stamp: 'MS 6/21/2021 17:44:05' prior: 50931624!
invalidCredentialsErrorMessageDescription
	'Credenciales Invalidas'.! !
!Store class methodsFor: 'exceptions' stamp: 'MS 6/21/2021 17:44:08' prior: 50931629!
invalidCredentialsErrorMessageDescription
	^'Credenciales Invalidas'.! !

!testRun: #StoreTest #test01CreateCartWithUserNotValidShouldRaiseError stamp: 'MS 6/21/2021 17:44:10'!
ERROR!
!Store methodsFor: 'creation' stamp: 'MS 6/21/2021 17:44:36'!
createCartFor: aString using: aString2 
	self shouldBeImplemented.! !

!classDefinition: #Store category: 'TusLibros' stamp: 'MS 6/21/2021 17:47:16'!
Object subclass: #Store
	instanceVariableNames: 'authenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'creation' stamp: 'MS 6/21/2021 17:47:14' prior: 50931642!
createCartFor: aClientId using: aPassword 

	(authenticator authenticate: aClientId with: aPassword) ifFalse: [ self error: self class invalidCredentialsErrorMessageDescription ].
	
	! !
!Store class methodsFor: 'nil' stamp: 'MS 6/21/2021 17:48:47'!
createStoreAuthenticatingWith: anAuthenticator

	^Store new initializeAuthenticatingWith: anAuthenticator.! !
!Store methodsFor: 'nil' stamp: 'MS 6/21/2021 17:49:05'!
initializeAuthenticatingWith: anAuthenticator

	authenticator := anAuthenticator.! !

!testRun: #StoreTest #test01CreateCartWithUserNotValidShouldRaiseError stamp: 'MS 6/21/2021 17:49:48'!
ERROR!

!testRun: #StoreTest #test01CreateCartWithUserNotValidShouldRaiseError stamp: 'MS 6/21/2021 17:49:48'!
ERROR!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 17:50:53' prior: 50931555!
createStore

	^Store createStoreAuthenticatingWith: self.! !
!StoreTest methodsFor: 'nil' stamp: 'MS 6/21/2021 17:52:14'!
authenticate: aClientId with: aPassword

	! !

TestCase subclass: #StoreTest
	instanceVariableNames: 'authenticateBehaviour'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreTest category: 'TusLibros' stamp: 'MS 6/21/2021 17:53:34'!
TestCase subclass: #StoreTest
	instanceVariableNames: 'authenticateBehaviour'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 17:54:34' prior: 50931607!
test01CreateCartWithUserNotValidShouldRaiseError

	| store clientId password |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	authenticateBehaviour := [ :aClientId :aClientPassword | false ].
	
	store := self createStore.
	
	self should: [ store createCartFor: clientId using: password ]
	 	raise:  Error - MessageNotUnderstood
		withMessageText: Store invalidCredentialsErrorMessageDescription.
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 17:54:56' prior: 50931685!
authenticate: aClientId with: aPassword

	^authenticateBehaviour value: aClientId value: aPassword.! !

!testRun: #StoreTest #test01CreateCartWithUserNotValidShouldRaiseError stamp: 'MS 6/21/2021 17:55:04'!
PASSED!

!testRun: #StoreTest #test01CreateCartWithUserNotValidShouldRaiseError stamp: 'MS 6/21/2021 17:55:04'!
PASSED!

!testRun: #StoreTest #test01CreateCartWithUserNotValidShouldRaiseError stamp: 'MS 6/21/2021 17:55:07'!
PASSED!

!testRun: #StoreTest #test01CreateCartWithUserNotValidShouldRaiseError stamp: 'MS 6/21/2021 17:55:07'!
PASSED!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 17:56:29'!
test02CreateCartWithValidCredentialsShouldCreateACart

	| store clientId password |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	authenticateBehaviour := [ :aClientId :aClientPassword | false ].
	
	store := self createStore.
	
	self should: [ store createCartFor: clientId using: password ]
	 	raise:  Error - MessageNotUnderstood
		withMessageText: Store invalidCredentialsErrorMessageDescription.
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 17:56:39'!
test01CreateCartWithInvalidCredentialsShouldRaiseError

	| store clientId password |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	authenticateBehaviour := [ :aClientId :aClientPassword | false ].
	
	store := self createStore.
	
	self should: [ store createCartFor: clientId using: password ]
	 	raise:  Error - MessageNotUnderstood
		withMessageText: Store invalidCredentialsErrorMessageDescription.
	
	
	
	! !

!methodRemoval: StoreTest #test01CreateCartWithUserNotValidShouldRaiseError stamp: 'MS 6/21/2021 17:56:39'!
test01CreateCartWithUserNotValidShouldRaiseError

	| store clientId password |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	authenticateBehaviour := [ :aClientId :aClientPassword | false ].
	
	store := self createStore.
	
	self should: [ store createCartFor: clientId using: password ]
	 	raise:  Error - MessageNotUnderstood
		withMessageText: Store invalidCredentialsErrorMessageDescription.
	
	
	
	!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 17:56:57' prior: 50931739!
test02CreateCartWithValidCredentialsShouldCreateACart

	| store clientId password |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := self createStore.
	
	self should: [ store createCartFor: clientId using: password ]
	 	raise:  Error - MessageNotUnderstood
		withMessageText: Store invalidCredentialsErrorMessageDescription.
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 17:59:13' prior: 50931789!
test02CreateCartWithValidCredentialsShouldCreateACart

	| store clientId password cartId |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := self createStore.
	
	cartId := store createCartFor: clientId using: password.
	
	self assert: (store listCart: cartId isEmpty).
	
	
	
	! !

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/21/2021 17:59:25'!
ERROR!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 17:59:55' prior: 50931806!
test02CreateCartWithValidCredentialsShouldCreateACart

	| store clientId password cartId |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := self createStore.
	
	cartId := store createCartFor: clientId using: password.
	
	self assert: (store listCart: cartId) isEmpty.
	
	
	
	! !

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/21/2021 17:59:59'!
ERROR!
!Store methodsFor: 'accessing' stamp: 'MS 6/21/2021 18:00:21'!
listCart: aStore 
	self shouldBeImplemented.! !
!Store methodsFor: 'accessing' stamp: 'MS 6/21/2021 18:00:46' prior: 50931843!
listCart: aCartId 
	^OrderedCollection new.! !

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/21/2021 18:00:50'!
PASSED!

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'MS 6/21/2021 18:00:50'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/21/2021 18:00:50'!
PASSED!
!Store methodsFor: 'creation' stamp: 'MS 6/21/2021 18:01:30' prior: 50931654!
createCartFor: aClientId using: aPassword 

	(authenticator authenticate: aClientId with: aPassword) ifFalse: [ self error: self class invalidCredentialsErrorMessageDescription ].
	
	^1.
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 18:04:04' prior: 50931755!
test01CreateCartWithInvalidCredentialsShouldRaiseError

	| store clientId password |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	authenticateBehaviour := [ :aClientId :aClientPassword | false ].
	
	store := self createStore.
	
	self should: [ store createCartFor: clientId using: password ]
	 	raise:  Error - MessageNotUnderstood
		withMessageText: Store invalidCredentialsErrorMessageDescription.
	
	! !
!Store methodsFor: 'accessing' stamp: 'MS 6/21/2021 18:04:54' prior: 50931847!
listCart: aCartId 

	^OrderedCollection new.! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 18:13:32'!
test03CreatingManyCartsShouldGiveDifferentCartsIds

	| store clientId password cartId1 cartId2 |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := self createStore.
	
	cartId1 := store createCartFor: clientId using: password.
	cartId2 := store createCartFor: clientId using: password.
	
	self deny: cartId1 = cartId2.
	
	
	
	! !

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'MS 6/21/2021 18:13:33'!
FAILURE!

!classDefinition: #Store category: 'TusLibros' stamp: 'MS 6/21/2021 18:16:37'!
Object subclass: #Store
	instanceVariableNames: 'authenticator nextCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'creation' stamp: 'MS 6/21/2021 18:16:33' prior: 50931862!
createCartFor: aClientId using: aPassword 

	| cartId |

	(authenticator authenticate: aClientId with: aPassword) ifFalse: [ self error: self class invalidCredentialsErrorMessageDescription ].
	
	cartId := nextCartId.
	
	nextCartId increment.
	
	^1.
	
	! !
!Store methodsFor: 'creation' stamp: 'MS 6/21/2021 18:17:31' prior: 50931918!
createCartFor: aClientId using: aPassword 

	| cartId |

	(authenticator authenticate: aClientId with: aPassword) ifFalse: [ self error: self class invalidCredentialsErrorMessageDescription ].
	
	cartId := nextCartId.
	
	nextCartId := nextCartId + 1.
	
	^cartId.
	
	! !

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'MS 6/21/2021 18:17:32'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/21/2021 18:17:32'!
ERROR!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'MS 6/21/2021 18:17:32'!
ERROR!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/21/2021 18:17:42'!
ERROR!
!Store methodsFor: 'initialization' stamp: 'MS 6/21/2021 18:18:06' prior: 50931668!
initializeAuthenticatingWith: anAuthenticator

	authenticator := anAuthenticator.
	nextCartId := 1.! !

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'MS 6/21/2021 18:18:12'!
PASSED!

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'MS 6/21/2021 18:18:26'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/21/2021 18:18:26'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'MS 6/21/2021 18:18:26'!
PASSED!
!Store methodsFor: 'creation' stamp: 'MS 6/21/2021 18:18:46' prior: 50931929!
createCartFor: aClientId using: aPassword 

	| cartId |

	(authenticator authenticate: aClientId with: aPassword) ifFalse: [ self error: self class invalidCredentialsErrorMessageDescription ].
	
	cartId := nextCartId.
	
	nextCartId increment .
	
	^cartId.
	
	! !

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'MS 6/21/2021 18:18:47'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/21/2021 18:18:47'!
ERROR!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'MS 6/21/2021 18:18:47'!
ERROR!
!Store methodsFor: 'creation' stamp: 'MS 6/21/2021 18:18:51' prior: 50931976!
createCartFor: aClientId using: aPassword 

	| cartId |

	(authenticator authenticate: aClientId with: aPassword) ifFalse: [ self error: self class invalidCredentialsErrorMessageDescription ].
	
	cartId := nextCartId.
	
	nextCartId := nextCartId + 1.
	
	^cartId.
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 18:29:59'!
test04AddBookToExistingCartShouldExpectBookInCartList

	| store clientId password cartId isbn aCart |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := self createStore.
	
	cartId := store createCartFor: clientId using: password.
	
	store add: 10 of: '123' to: aCart.
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 18:31:10' prior: 50932009!
test04AddBookToExistingCartShouldExpectBookInCartList

	| store clientId password cartId isbn aCart |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := self createStore.
	
	cartId := store createCartFor: clientId using: password.
		
	store add: 10 of: '123' to: aCart.
	
	
	
	! !

!classDefinition: #StoreTest category: 'TusLibros' stamp: 'MS 6/21/2021 18:33:21'!
TestCase subclass: #StoreTest
	instanceVariableNames: 'authenticateBehaviour testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 18:33:14' prior: 50932024!
test04AddBookToExistingCartShouldExpectBookInCartList

	| store clientId password cartId isbn aCart |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := self createStore.
	
	cartId := store createCartFor: clientId using: password.
	
	testObjectFactory defaultCatalog keys first.
		
	store add: 10 of: '123' to: aCart.
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 18:33:51' prior: 50932047!
test04AddBookToExistingCartShouldExpectBookInCartList

	| store clientId password cartId isbn aCart |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := self createStore.
	
	cartId := store createCartFor: clientId using: password.
	
	isbn := testObjectFactory defaultCatalog keys first.
		
	store add: 10 of: isbn to: aCart.
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 18:34:53' prior: 50932064!
test04AddBookToExistingCartShouldExpectBookInCartList

	| store clientId password cartId isbn aCart |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := self createStore.
	
	cartId := store createCartFor: clientId using: password.
	
	isbn := testObjectFactory defaultCatalog keys first.
	
	aCart := testObjectFactory createCart.
		
	store add: 10 of: isbn to: aCart.
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 18:35:19' prior: 50932081!
test04AddBookToExistingCartShouldExpectBookInCartList

	| store clientId password cartId isbn cart |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := self createStore.
	
	cartId := store createCartFor: clientId using: password.
	
	isbn := testObjectFactory defaultCatalog keys first.
	
	cart := testObjectFactory createCart.
		
	store add: 10 of: isbn to: cart.
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 18:35:58' prior: 50932099!
test04AddBookToExistingCartShouldExpectBookInCartList

	| store clientId password cartId isbn |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := self createStore.
	
	cartId := store createCartFor: clientId using: password.
	
	isbn := testObjectFactory defaultCatalog keys first.
			
	store add: 10 of: isbn to: cartId.
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 18:36:20' prior: 50932117!
test04AddBookToExistingCartShouldExpectBookInCartList

	| store clientId password cartId isbn |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := self createStore.
	
	cartId := store createCartFor: clientId using: password.
	
	isbn := testObjectFactory defaultCatalog keys first.
			
	store add: 1 of: isbn to: cartId.
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 18:37:23' prior: 50932134!
test04AddBookToExistingCartShouldExpectBookInCartList

	| store clientId password cartId isbn |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := self createStore.
	
	cartId := store createCartFor: clientId using: password.
	
	isbn := testObjectFactory defaultCatalog keys first.
			
	store add: 1 of: isbn to: cartId.
	
	self assert: (store listCart: cartId) includes: isbn.
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 18:38:33' prior: 50932151!
test04AddBookToExistingCartShouldExpectBookInCartList

	| store clientId password cartId isbn |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := self createStore.
	
	cartId := store createCartFor: clientId using: password.
	
	isbn := testObjectFactory defaultCatalog keys first.
			
	store add: 1 of: isbn to: cartId.
	
	self assert: (store listCart: cartId) includes: isbn
	! !

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'MS 6/21/2021 18:38:34'!
ERROR!
!StoreTest methodsFor: 'nil' stamp: 'MS 6/21/2021 18:39:10' overrides: 16927572!
setUp

	testObjectFactory := StoreTestObjectsFactory new.! !

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'MS 6/21/2021 18:39:15'!
ERROR!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'MS 6/21/2021 18:39:15'!
ERROR!
!Store methodsFor: 'adding' stamp: 'MS 6/21/2021 18:39:28'!
add: aSmallInteger of: aString to: aSmallInteger3 
	self shouldBeImplemented.! !
!Store methodsFor: 'adding' stamp: 'MS 6/21/2021 18:40:14' prior: 50932202!
add: aQuantity of: anIsbn to: aCartId 
	
	! !
!Store methodsFor: 'adding' stamp: 'MS 6/21/2021 18:41:38' prior: 50932207!
add: aQuantity of: anIsbn to: aCartId 
	
	! !
!Store methodsFor: 'adding' stamp: 'MS 6/21/2021 18:42:46' prior: 50932211!
add: aQuantity of: anIsbn to: aCartId 

	
	
	! !
!Store methodsFor: 'creation' stamp: 'MS 6/21/2021 18:43:53' prior: 50931998!
createCartFor: aClientId using: aPassword 

	| cartId |

	(authenticator authenticate: aClientId with: aPassword) ifFalse: [ self error: self class invalidCredentialsErrorMessageDescription ].
	
	cartId := nextCartId.
	
	nextCartId := nextCartId + 1.
	
	^cartId.
	
	! !
!Store methodsFor: 'adding' stamp: 'MS 6/21/2021 18:44:55' prior: 50932215!
add: aQuantity of: anIsbn to: aCartId 

	
	! !

!classDefinition: #Store category: 'TusLibros' stamp: 'MS 6/21/2021 18:46:01'!
Object subclass: #Store
	instanceVariableNames: 'authenticator nextCartId cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'adding' stamp: 'MS 6/21/2021 18:46:00' prior: 50932230!
add: aQuantity of: anIsbn to: aCartId 

	cart add: aQuantity of: anIsbn.
	! !

!classDefinition: #Store category: 'TusLibros' stamp: 'MS 6/21/2021 18:48:01'!
Object subclass: #Store
	instanceVariableNames: 'authenticator nextCartId cart catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'creation' stamp: 'MS 6/21/2021 18:48:00' prior: 50932219!
createCartFor: aClientId using: aPassword 

	| cartId |

	(authenticator authenticate: aClientId with: aPassword) ifFalse: [ self error: self class invalidCredentialsErrorMessageDescription ].
	
	cart := Cart acceptingItemsOf: catalog.
	
	cartId := nextCartId.
	
	nextCartId := nextCartId + 1.
	
	^cartId.
	
	! !
!Store methodsFor: 'initialization' stamp: 'MS 6/21/2021 18:49:10'!
initializeAuthenticatingWith: anAuthenticator acceptingItemsFrom: aCatalog.

	nextCartId := 1.
	authenticator := anAuthenticator.
	catalog := aCatalog.! !

!methodRemoval: Store #initializeAuthenticatingWith: stamp: 'MS 6/21/2021 18:49:23'!
initializeAuthenticatingWith: anAuthenticator

	authenticator := anAuthenticator.
	nextCartId := 1.!
!Store class methodsFor: 'instance creation' stamp: 'MS 6/21/2021 18:49:57'!
createStoreAuthenticatingWith: anAuthenticator acceptingItemsFrom: aCatalog

	^Store new initializeAuthenticatingWith: anAuthenticator acceptingItemsOf: aCatalog.! !
!Store class methodsFor: 'instance creation' stamp: 'MS 6/21/2021 18:50:12' prior: 50932281!
createStoreAuthenticatingWith: anAuthenticator acceptingItemsFrom: aCatalog

	^Store new initializeAuthenticatingWith: anAuthenticator acceptingItemsFrom: aCatalog.! !

!methodRemoval: Store class #createStoreAuthenticatingWith: stamp: 'MS 6/21/2021 18:50:36'!
createStoreAuthenticatingWith: anAuthenticator

	^Store new initializeAuthenticatingWith: anAuthenticator.!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 18:51:33' prior: 50931681!
createStore

	^Store createStoreAuthenticatingWith: self acceptingItemsOf: testObjectFactory defaultCatalog .! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 18:51:57' prior: 50932305!
createStore

	^Store createStoreAuthenticatingWith: self acceptingItemsFrom: testObjectFactory defaultCatalog .! !

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'MS 6/21/2021 18:52:13'!
FAILURE!
!Store methodsFor: 'accessing' stamp: 'MS 6/21/2021 18:52:51' prior: 50931887!
listCart: aCartId 

	^cart.! !

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'MS 6/21/2021 18:53:22'!
PASSED!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 19:15:39'!
test05xx

	| store clientId password cartId1 cartId2 isbn |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := self createStore.
	
	cartId1 := store createCartFor: clientId using: password.

	cartId2 := store createCartFor: clientId using: password.
		
	isbn := testObjectFactory defaultCatalog keys first.
			
	store add: 1 of: isbn to: cartId1.

	store add: 1 of: isbn to: cartId2.	
		
	self assert: (store listCart: cartId1) includes: isbn.

	self assert: (store listCart: cartId2) includes: isbn.
	! !

!testRun: #StoreTest #test05xx stamp: 'MS 6/21/2021 19:15:50'!
PASSED!

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'MS 6/21/2021 19:15:50'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/21/2021 19:15:50'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'MS 6/21/2021 19:15:50'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'MS 6/21/2021 19:15:50'!
PASSED!

!testRun: #StoreTest #test05xx stamp: 'MS 6/21/2021 19:15:50'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'MS 6/21/2021 19:17:47' prior: 50931472!
defaultCatalog
	
	^ Dictionary new
		at: self itemSellByTheStore put: self itemSellByTheStorePrice;
		yourself ! !

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'MS 6/21/2021 19:19:36'!
PASSED!
!Store methodsFor: 'accessing' stamp: 'MS 6/21/2021 19:24:32' prior: 50932322!
listCart: aCartId 

	| dictionary |
	
	dictionary := Dictionary new.

	catalog keys do: [ :isbn | dictionary add: isbn->(cart occurrencesOf: isbn) ].

	^dictionary.! !
!Store methodsFor: 'accessing' stamp: 'MS 6/21/2021 19:25:19' prior: 50932381!
listCart: aCartId 

	| cartItems |
	
	cartItems := Dictionary new.

	catalog keys do: [ :isbn | cartItems add: isbn->(cart occurrencesOf: isbn) ].

	^cartItems.! !

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/21/2021 19:26:06'!
FAILURE!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/21/2021 19:26:06'!
FAILURE!
!Store methodsFor: 'accessing' stamp: 'MS 6/21/2021 19:28:04' prior: 50932389!
listCart: aCartId 

	| cartItems |
	
	cartItems := Dictionary new.

	catalog keys do: [ :isbn | (cart occurrencesOf: isbn) positive ifTrue: [ cartItems add: isbn->(cart occurrencesOf: isbn) ] ].

	^cartItems.! !

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/21/2021 19:28:13'!
FAILURE!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/21/2021 19:28:13'!
FAILURE!

store listCart: cartId!
!Store methodsFor: 'accessing' stamp: 'MS 6/21/2021 19:29:40' prior: 50932404!
listCart: aCartId 

	^cart items.! !
!Cart methodsFor: 'nil' stamp: 'MS 6/21/2021 19:29:58'!
items

	^items.! !

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/21/2021 19:30:40'!
PASSED!

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'MS 6/21/2021 19:30:42'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/21/2021 19:30:42'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'MS 6/21/2021 19:30:42'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'MS 6/21/2021 19:30:42'!
PASSED!

!testRun: #StoreTest #test05xx stamp: 'MS 6/21/2021 19:30:42'!
PASSED!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 19:36:07' prior: 50932330!
test05xx

	| store clientId password cartId1 cartId2 isbn |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := Store createStoreAuthenticatingWith: self acceptingItemsFrom: testObjectFactory bigCatalog.
	
	cartId1 := store createCartFor: clientId using: password.

	cartId2 := store createCartFor: clientId using: password.
		
	isbn := testObjectFactory defaultCatalog keys first.
			
	store add: 1 of: isbn to: cartId1.

	store add: 1 of: isbn to: cartId2.	
		
	self assert: (store listCart: cartId1) includes: isbn.

	self assert: (store listCart: cartId2) includes: isbn.
	! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'MS 6/21/2021 19:37:20'!
bigCatalog
	
	^ Dictionary new
		add: 'libro1'->1;
		add: 'libro2' -> 2;
		yourself ! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 19:38:45' prior: 50932449!
test05xx

	| store clientId password cartId1 cartId2 isbn1 isbn2 |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := Store createStoreAuthenticatingWith: self acceptingItemsFrom: testObjectFactory bigCatalog.
	
	cartId1 := store createCartFor: clientId using: password.

	cartId2 := store createCartFor: clientId using: password.
		
	isbn1 := testObjectFactory bigCatalog keys first.

	isbn2 := testObjectFactory bigCatalog keys second.
			
	store add: 1 of: isbn1 to: cartId1.

	store add: 1 of: isbn2 to: cartId2.	
		
	self assert: (store listCart: cartId1) includes: isbn1.

	self assert: (store listCart: cartId2) includes: isbn2.
	! !

!testRun: #StoreTest #test05xx stamp: 'MS 6/21/2021 19:38:47'!
PASSED!

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'MS 6/21/2021 19:38:47'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/21/2021 19:38:47'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'MS 6/21/2021 19:38:47'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'MS 6/21/2021 19:38:47'!
PASSED!

!testRun: #StoreTest #test05xx stamp: 'MS 6/21/2021 19:38:47'!
PASSED!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 19:40:02' prior: 50932479!
test05xx

	| store clientId password cartId1 cartId2 isbn1 isbn2 |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := Store createStoreAuthenticatingWith: self acceptingItemsFrom: testObjectFactory bigCatalog.
	
	cartId1 := store createCartFor: clientId using: password.

	cartId2 := store createCartFor: clientId using: password.
		
	isbn1 := testObjectFactory bigCatalog keys first.

	isbn2 := testObjectFactory bigCatalog keys second.
			
	store add: 1 of: isbn1 to: cartId1.

	store add: 1 of: isbn2 to: cartId2.	
		
	self assert: (store listCart: cartId1) includes: isbn1.
	self deny: ((store listCart: cartId1) includes: isbn2).

	self assert: (store listCart: cartId2) includes: isbn2.
	self deny: ((store listCart: cartId2) includes: isbn1).
	! !

!testRun: #StoreTest #test05xx stamp: 'MS 6/21/2021 19:40:03'!
FAILURE!

!classDefinition: #Store category: 'TusLibros' stamp: 'MS 6/21/2021 19:41:59'!
Object subclass: #Store
	instanceVariableNames: 'authenticator nextCartId cart catalog cartsById'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'initialization' stamp: 'MS 6/21/2021 19:41:58' prior: 50932267!
initializeAuthenticatingWith: anAuthenticator acceptingItemsFrom: aCatalog.

	nextCartId := 1.
	authenticator := anAuthenticator.
	catalog := aCatalog.
	cartsById := Dictionary new.! !
!Store methodsFor: 'creation' stamp: 'MS 6/21/2021 19:43:04' prior: 50932255!
createCartFor: aClientId using: aPassword 

	| cartId |

	(authenticator authenticate: aClientId with: aPassword) ifFalse: [ self error: self class invalidCredentialsErrorMessageDescription ].
	
	cartId := nextCartId.
	
	nextCartId := nextCartId + 1.
	
	cart := Cart acceptingItemsOf: catalog.
	
	^cartId.
	
	! !
!Store methodsFor: 'creation' stamp: 'MS 6/21/2021 19:44:00' prior: 50932573!
createCartFor: aClientId using: aPassword 

	| cartId |

	(authenticator authenticate: aClientId with: aPassword) ifFalse: [ self error: self class invalidCredentialsErrorMessageDescription ].
	
	cartId := nextCartId.
	
	nextCartId := nextCartId + 1.
	
	cartsById add: cartId -> (Cart acceptingItemsOf: catalog).
	
	^cartId.
	
	! !
!Store methodsFor: 'adding' stamp: 'MS 6/21/2021 19:46:40' prior: 50932242!
add: aQuantity of: anIsbn to: aCartId 

	| cart1 |
	
	cart1 := cartsById at: aCartId ifAbsent: [].
	
	cart1 add: aQuantity of: anIsbn.
	! !
!Store methodsFor: 'accessing' stamp: 'MS 6/21/2021 19:48:14' prior: 50932422!
listCart: aCartId 

	| cart1 |
	
	cart1 := cartsById at: aCartId ifAbsent: [].

	^cart1 items.! !

!classDefinition: #Store category: 'TusLibros' stamp: 'MS 6/21/2021 19:48:24'!
Object subclass: #Store
	instanceVariableNames: 'authenticator nextCartId catalog cartsById'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'adding' stamp: 'MS 6/21/2021 19:48:38' prior: 50932599!
add: aQuantity of: anIsbn to: aCartId 

	| cart |
	
	cart := cartsById at: aCartId ifAbsent: [].
	
	cart add: aQuantity of: anIsbn.
	! !
!Store methodsFor: 'accessing' stamp: 'MS 6/21/2021 19:48:46' prior: 50932606!
listCart: aCartId 

	| cart |
	
	cart := cartsById at: aCartId ifAbsent: [].

	^cart items.! !

!testRun: #StoreTest #test05xx stamp: 'MS 6/21/2021 19:49:11'!
PASSED!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 19:53:31'!
test05AddBookToManyCartsShouldExpectBookInCartsLists

	| store clientId password cartId1 cartId2 isbn1 isbn2 |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := Store createStoreAuthenticatingWith: self acceptingItemsFrom: testObjectFactory bigCatalog.
	
	cartId1 := store createCartFor: clientId using: password.

	cartId2 := store createCartFor: clientId using: password.
		
	isbn1 := testObjectFactory bigCatalog keys first.

	isbn2 := testObjectFactory bigCatalog keys second.
			
	store add: 1 of: isbn1 to: cartId1.

	store add: 1 of: isbn2 to: cartId2.	
		
	self assert: (store listCart: cartId1) includes: isbn1.
	self deny: ((store listCart: cartId1) includes: isbn2).

	self assert: (store listCart: cartId2) includes: isbn2.
	self deny: ((store listCart: cartId2) includes: isbn1).
	! !

!methodRemoval: StoreTest #test05xx stamp: 'MS 6/21/2021 19:53:31'!
test05xx

	| store clientId password cartId1 cartId2 isbn1 isbn2 |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := Store createStoreAuthenticatingWith: self acceptingItemsFrom: testObjectFactory bigCatalog.
	
	cartId1 := store createCartFor: clientId using: password.

	cartId2 := store createCartFor: clientId using: password.
		
	isbn1 := testObjectFactory bigCatalog keys first.

	isbn2 := testObjectFactory bigCatalog keys second.
			
	store add: 1 of: isbn1 to: cartId1.

	store add: 1 of: isbn2 to: cartId2.	
		
	self assert: (store listCart: cartId1) includes: isbn1.
	self deny: ((store listCart: cartId1) includes: isbn2).

	self assert: (store listCart: cartId2) includes: isbn2.
	self deny: ((store listCart: cartId2) includes: isbn1).
	!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 19:53:58'!
test05AddBookToCartsShouldExpectCartListsToBeDifferent

	| store clientId password cartId1 cartId2 isbn1 isbn2 |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := Store createStoreAuthenticatingWith: self acceptingItemsFrom: testObjectFactory bigCatalog.
	
	cartId1 := store createCartFor: clientId using: password.

	cartId2 := store createCartFor: clientId using: password.
		
	isbn1 := testObjectFactory bigCatalog keys first.

	isbn2 := testObjectFactory bigCatalog keys second.
			
	store add: 1 of: isbn1 to: cartId1.

	store add: 1 of: isbn2 to: cartId2.	
		
	self assert: (store listCart: cartId1) includes: isbn1.
	self deny: ((store listCart: cartId1) includes: isbn2).

	self assert: (store listCart: cartId2) includes: isbn2.
	self deny: ((store listCart: cartId2) includes: isbn1).
	! !

!methodRemoval: StoreTest #test05AddBookToManyCartsShouldExpectBookInCartsLists stamp: 'MS 6/21/2021 19:53:58'!
test05AddBookToManyCartsShouldExpectBookInCartsLists

	| store clientId password cartId1 cartId2 isbn1 isbn2 |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := Store createStoreAuthenticatingWith: self acceptingItemsFrom: testObjectFactory bigCatalog.
	
	cartId1 := store createCartFor: clientId using: password.

	cartId2 := store createCartFor: clientId using: password.
		
	isbn1 := testObjectFactory bigCatalog keys first.

	isbn2 := testObjectFactory bigCatalog keys second.
			
	store add: 1 of: isbn1 to: cartId1.

	store add: 1 of: isbn2 to: cartId2.	
		
	self assert: (store listCart: cartId1) includes: isbn1.
	self deny: ((store listCart: cartId1) includes: isbn2).

	self assert: (store listCart: cartId2) includes: isbn2.
	self deny: ((store listCart: cartId2) includes: isbn1).
	!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 19:54:12'!
test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent

	| store clientId password cartId1 cartId2 isbn1 isbn2 |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := Store createStoreAuthenticatingWith: self acceptingItemsFrom: testObjectFactory bigCatalog.
	
	cartId1 := store createCartFor: clientId using: password.

	cartId2 := store createCartFor: clientId using: password.
		
	isbn1 := testObjectFactory bigCatalog keys first.

	isbn2 := testObjectFactory bigCatalog keys second.
			
	store add: 1 of: isbn1 to: cartId1.

	store add: 1 of: isbn2 to: cartId2.	
		
	self assert: (store listCart: cartId1) includes: isbn1.
	self deny: ((store listCart: cartId1) includes: isbn2).

	self assert: (store listCart: cartId2) includes: isbn2.
	self deny: ((store listCart: cartId2) includes: isbn1).
	! !

!methodRemoval: StoreTest #test05AddBookToCartsShouldExpectCartListsToBeDifferent stamp: 'MS 6/21/2021 19:54:13'!
test05AddBookToCartsShouldExpectCartListsToBeDifferent

	| store clientId password cartId1 cartId2 isbn1 isbn2 |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := Store createStoreAuthenticatingWith: self acceptingItemsFrom: testObjectFactory bigCatalog.
	
	cartId1 := store createCartFor: clientId using: password.

	cartId2 := store createCartFor: clientId using: password.
		
	isbn1 := testObjectFactory bigCatalog keys first.

	isbn2 := testObjectFactory bigCatalog keys second.
			
	store add: 1 of: isbn1 to: cartId1.

	store add: 1 of: isbn2 to: cartId2.	
		
	self assert: (store listCart: cartId1) includes: isbn1.
	self deny: ((store listCart: cartId1) includes: isbn2).

	self assert: (store listCart: cartId2) includes: isbn2.
	self deny: ((store listCart: cartId2) includes: isbn1).
	!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 20:03:12'!
test06AddingBookUsingInvalidCartIdShouldRaiseAnError

	| store clientId password isbn |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := Store createStoreAuthenticatingWith: self acceptingItemsFrom: testObjectFactory bigCatalog.
		
	isbn := testObjectFactory bigCatalog keys first.
			
	self should: [ store add: 1 of: isbn to: 10 ] 
	 	raise: Error - MessageNotUnderstood 
		withMessageText: Store invalidCardIdErrorMessageDescription.! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 20:03:31' prior: 50932819!
test06AddingBookUsingInvalidCartIdShouldRaiseAnError

	| store isbn |
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := Store createStoreAuthenticatingWith: self acceptingItemsFrom: testObjectFactory bigCatalog.
		
	isbn := testObjectFactory bigCatalog keys first.
			
	self should: [ store add: 1 of: isbn to: 10 ] 
	 	raise: Error - MessageNotUnderstood 
		withMessageText: Store invalidCardIdErrorMessageDescription.! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 20:03:52' prior: 50932839!
test06AddingBookUsingInvalidCartIdShouldRaiseAnError

	| store isbn |
	
	store := Store createStoreAuthenticatingWith: self acceptingItemsFrom: testObjectFactory bigCatalog.
		
	isbn := testObjectFactory bigCatalog keys first.
			
	self should: [ store add: 1 of: isbn to: 10 ] 
	 	raise: Error - MessageNotUnderstood 
		withMessageText: Store invalidCardIdErrorMessageDescription.! !

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/21/2021 20:04:09'!
ERROR!
!Store class methodsFor: 'exceptions' stamp: 'MS 6/21/2021 20:04:18'!
invalidCardIdErrorMessageDescription
	self shouldBeImplemented.! !
!Store class methodsFor: 'exceptions' stamp: 'MS 6/21/2021 20:04:40' prior: 50932875!
invalidCardIdErrorMessageDescription
	^'Invalid Cart Id'! !

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/21/2021 20:04:42'!
ERROR!
!Store class methodsFor: 'exceptions' stamp: 'MS 6/21/2021 20:05:00'!
invalidCartIdErrorMessageDescription
	^'Invalid Cart Id'! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 20:05:00' prior: 50932857!
test06AddingBookUsingInvalidCartIdShouldRaiseAnError

	| store isbn |
	
	store := Store createStoreAuthenticatingWith: self acceptingItemsFrom: testObjectFactory bigCatalog.
		
	isbn := testObjectFactory bigCatalog keys first.
			
	self should: [ store add: 1 of: isbn to: 10 ] 
	 	raise: Error - MessageNotUnderstood 
		withMessageText: Store invalidCartIdErrorMessageDescription.! !

!methodRemoval: Store class #invalidCardIdErrorMessageDescription stamp: 'MS 6/21/2021 20:05:00'!
invalidCardIdErrorMessageDescription
	^'Invalid Cart Id'!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/21/2021 20:05:08'!
ERROR!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/21/2021 20:05:08'!
ERROR!
!Store methodsFor: 'adding' stamp: 'MS 6/21/2021 20:05:51' prior: 50932620!
add: aQuantity of: anIsbn to: aCartId 

	| cart |
	
	cart := cartsById at: aCartId ifAbsent: [self error: self class invalidCartIdErrorMessageDescription ].
	
	cart add: aQuantity of: anIsbn.
	! !

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/21/2021 20:05:52'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/21/2021 20:05:54'!
PASSED!

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'MS 6/21/2021 20:05:54'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/21/2021 20:05:54'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'MS 6/21/2021 20:05:54'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'MS 6/21/2021 20:05:54'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'MS 6/21/2021 20:05:54'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/21/2021 20:05:54'!
PASSED!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 20:06:45'!
test07ListingCartUsingInvalidCartIdShouldRaiseAnError

	| store |
	
	store := Store createStoreAuthenticatingWith: self acceptingItemsFrom: testObjectFactory bigCatalog.
		
	self should: [ store listCart: 10 ] 
	 	raise: Error - MessageNotUnderstood 
		withMessageText: Store invalidCartIdErrorMessageDescription.! !

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/21/2021 20:06:47'!
ERROR!
!Store methodsFor: 'accessing' stamp: 'MS 6/21/2021 20:07:12' prior: 50932627!
listCart: aCartId 

	| cart |
	
	cart := cartsById at: aCartId ifAbsent: [ self error: self class invalidCartIdErrorMessageDescription ].

	^cart items.! !

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/21/2021 20:07:13'!
PASSED!

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'MS 6/21/2021 20:07:13'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/21/2021 20:07:13'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'MS 6/21/2021 20:07:13'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'MS 6/21/2021 20:07:13'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'MS 6/21/2021 20:07:13'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/21/2021 20:07:13'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/21/2021 20:07:13'!
PASSED!
!Store methodsFor: 'accessing' stamp: 'MS 6/21/2021 20:08:36'!
cartFor: aCartId 

	^cartsById at: aCartId ifAbsent: [ self error: self class invalidCartIdErrorMessageDescription ].
! !
!Store methodsFor: 'accessing' stamp: 'MS 6/21/2021 20:09:39' prior: 50932974!
listCart: aCartId 

	^(self cartFor: aCartId) items.! !
!Store methodsFor: 'adding' stamp: 'MS 6/21/2021 20:10:12' prior: 50932920!
add: aQuantity of: anIsbn to: aCartId 

	| cart |
	
	cart := self cartFor: aCartId.
	
	cart add: aQuantity of: anIsbn.
	! !

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'MS 6/21/2021 20:10:17'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/21/2021 20:10:17'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'MS 6/21/2021 20:10:17'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'MS 6/21/2021 20:10:17'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'MS 6/21/2021 20:10:17'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/21/2021 20:10:17'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/21/2021 20:10:17'!
PASSED!
!Store methodsFor: 'creation' stamp: 'MS 6/21/2021 20:11:11'!
assertAuthenticationFor: aClientId using: aPassword 

	(authenticator authenticate: aClientId with: aPassword) ifFalse: [ self error: self class invalidCredentialsErrorMessageDescription ].
	
	! !
!Store methodsFor: 'creation' stamp: 'MS 6/21/2021 20:11:59' prior: 50932586!
createCartFor: aClientId using: aPassword 

	| cartId |

	self assertAuthenticationFor: aClientId using: aPassword.
	
	cartId := nextCartId.
	
	nextCartId := nextCartId + 1.
	
	cartsById add: cartId -> (Cart acceptingItemsOf: catalog).
	
	^cartId.
	
	! !
!StoreTestObjectsFactory methodsFor: 'nil' stamp: 'MS 6/21/2021 20:13:17'!
createStoreWithDefaultCatalog

	^Store createStoreAuthenticatingWith: self acceptingItemsFrom: self defaultCatalog .! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 20:13:42'!
createStoreWithBigCatalog

	^Store createStoreAuthenticatingWith: self acceptingItemsFrom: self bigCatalog .! !

!methodRemoval: StoreTestObjectsFactory #createStoreWithBigCatalog stamp: 'MS 6/21/2021 20:13:57'!
createStoreWithBigCatalog

	^Store createStoreAuthenticatingWith: self acceptingItemsFrom: self bigCatalog .!

!methodRemoval: StoreTestObjectsFactory #createStoreWithDefaultCatalog stamp: 'MS 6/21/2021 20:14:07'!
createStoreWithDefaultCatalog

	^Store createStoreAuthenticatingWith: self acceptingItemsFrom: self defaultCatalog .!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 20:14:40'!
createStoreWithDefaultCatalog

	^Store createStoreAuthenticatingWith: self acceptingItemsFrom: testObjectFactory defaultCatalog .! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 20:14:40' prior: 50931825!
test02CreateCartWithValidCredentialsShouldCreateACart

	| store clientId password cartId |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := self createStoreWithDefaultCatalog.
	
	cartId := store createCartFor: clientId using: password.
	
	self assert: (store listCart: cartId) isEmpty.
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 20:14:40' prior: 50931871!
test01CreateCartWithInvalidCredentialsShouldRaiseError

	| store clientId password |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	authenticateBehaviour := [ :aClientId :aClientPassword | false ].
	
	store := self createStoreWithDefaultCatalog.
	
	self should: [ store createCartFor: clientId using: password ]
	 	raise:  Error - MessageNotUnderstood
		withMessageText: Store invalidCredentialsErrorMessageDescription.
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 20:14:40' prior: 50932169!
test04AddBookToExistingCartShouldExpectBookInCartList

	| store clientId password cartId isbn |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := self createStoreWithDefaultCatalog.
	
	cartId := store createCartFor: clientId using: password.
	
	isbn := testObjectFactory defaultCatalog keys first.
			
	store add: 1 of: isbn to: cartId.
	
	self assert: (store listCart: cartId) includes: isbn
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 20:14:40' prior: 50931891!
test03CreatingManyCartsShouldGiveDifferentCartsIds

	| store clientId password cartId1 cartId2 |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := self createStoreWithDefaultCatalog.
	
	cartId1 := store createCartFor: clientId using: password.
	cartId2 := store createCartFor: clientId using: password.
	
	self deny: cartId1 = cartId2.
	
	
	
	! !

!methodRemoval: StoreTest #createStore stamp: 'MS 6/21/2021 20:14:40'!
createStore

	^Store createStoreAuthenticatingWith: self acceptingItemsFrom: testObjectFactory defaultCatalog .!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 20:15:07'!
createStoreWithBigCatalog

	^Store createStoreAuthenticatingWith: self acceptingItemsFrom: testObjectFactory bigCatalog .! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 20:15:39' prior: 50932756!
test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent

	| store clientId password cartId1 cartId2 isbn1 isbn2 |
	
	clientId := 'randomId123'.
	password := 'randomPassword123'.
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := self createStoreWithBigCatalog.
	
	cartId1 := store createCartFor: clientId using: password.

	cartId2 := store createCartFor: clientId using: password.
		
	isbn1 := testObjectFactory bigCatalog keys first.

	isbn2 := testObjectFactory bigCatalog keys second.
			
	store add: 1 of: isbn1 to: cartId1.

	store add: 1 of: isbn2 to: cartId2.	
		
	self assert: (store listCart: cartId1) includes: isbn1.
	self deny: ((store listCart: cartId1) includes: isbn2).

	self assert: (store listCart: cartId2) includes: isbn2.
	self deny: ((store listCart: cartId2) includes: isbn1).
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 20:15:47' prior: 50932893!
test06AddingBookUsingInvalidCartIdShouldRaiseAnError

	| store isbn |
	
	store := self createStoreWithBigCatalog.
		
	isbn := testObjectFactory bigCatalog keys first.
			
	self should: [ store add: 1 of: isbn to: 10 ] 
	 	raise: Error - MessageNotUnderstood 
		withMessageText: Store invalidCartIdErrorMessageDescription.! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 20:15:53' prior: 50933221!
test06AddingBookUsingInvalidCartIdShouldRaiseAnError

	| store isbn |
	
	store := self createStoreWithDefaultCatalog.
		
	isbn := testObjectFactory bigCatalog keys first.
			
	self should: [ store add: 1 of: isbn to: 10 ] 
	 	raise: Error - MessageNotUnderstood 
		withMessageText: Store invalidCartIdErrorMessageDescription.! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 20:16:05' prior: 50933235!
test06AddingBookUsingInvalidCartIdShouldRaiseAnError

	| store isbn |
	
	store := self createStoreWithDefaultCatalog.
		
	isbn := testObjectFactory defaultCatalog keys first.
			
	self should: [ store add: 1 of: isbn to: 10 ] 
	 	raise: Error - MessageNotUnderstood 
		withMessageText: Store invalidCartIdErrorMessageDescription.! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 20:16:17' prior: 50932958!
test07ListingCartUsingInvalidCartIdShouldRaiseAnError

	| store |
	
	store := self createStoreWithDefaultCatalog.
		
	self should: [ store listCart: 10 ] 
	 	raise: Error - MessageNotUnderstood 
		withMessageText: Store invalidCartIdErrorMessageDescription.! !

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'MS 6/21/2021 20:16:19'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/21/2021 20:16:19'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'MS 6/21/2021 20:16:19'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'MS 6/21/2021 20:16:19'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'MS 6/21/2021 20:16:19'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/21/2021 20:16:19'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/21/2021 20:16:19'!
PASSED!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 20:28:49'!
test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError
	
	| store |
	
	store := self createStoreWithDefaultCatalog.
		
	self should: [ store listCart: 10 ] 
	 	raise: Error - MessageNotUnderstood 
		withMessageText: Store invalidCartIdErrorMessageDescription.! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 20:30:02' prior: 50933300!
test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError
	
	| store cartId |
	
	store := self createStoreWithDefaultCatalog.
	
	cartId := store createCartFor: 'validUserId' using: 'validPassword'.
		
	self should: [ store listCart: 10 ] 
	 	raise: Error - MessageNotUnderstood 
		withMessageText: Store invalidCartIdErrorMessageDescription.! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 20:31:05' prior: 50933312!
test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError
	
	| store cartId isbn |
	
	store := self createStoreWithDefaultCatalog.
	
	cartId := store createCartFor: 'validUserId' using: 'validPassword'.
	
	store add: 1 of: isbn to: cartId.
		
	self should: [ store listCart: 10 ] 
	 	raise: Error - MessageNotUnderstood 
		withMessageText: Store invalidCartIdErrorMessageDescription.! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 20:36:39' prior: 50933327!
test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError
	
	| store cartId isbn cardNumber cardExpiration cardName |
	
	store := self createStoreWithDefaultCatalog.
	
	cartId := store createCartFor: 'validUserId' using: 'validPassword'.
	
	isbn := testObjectFactory defaultCatalog keys first.
	
	store add: 1 of: isbn to: cartId.
	
	cardNumber := 123. 
	
	cardExpiration := GregorianMonthOfYear yearNumber: 1998 monthNumber: 10.
	
	cardName := 'matias'.
		
	self should: [ store checkOut: cartId forCco: cardName withCcn: cardNumber expiringOn: cardExpiration ] 
	 	raise: Error - MessageNotUnderstood 
		withMessageText: Store invalidCartIdErrorMessageDescription.! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 20:37:47' prior: 50933343!
test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError
	
	| store cartId isbn cardNumber cardExpiration cardName |
	
	store := self createStoreWithDefaultCatalog.
	
	cartId := store createCartFor: 'validUserId' using: 'validPassword'.
	
	isbn := testObjectFactory defaultCatalog keys first.
	
	store add: 1 of: isbn to: cartId.
	
	cardNumber := 123. 
	
	
	cardExpiration := GregorianMonthOfYear yearNumber: 1998 monthNumber: 10.
	
	cardName := 'matias'.
		
	self should: [ store checkOut: cartId forCco: cardName withCcn: cardNumber expiringOn: cardExpiration ] 
	 	raise: Error - MessageNotUnderstood 
		withMessageText: Store invalidCartIdErrorMessageDescription.! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'MS 6/21/2021 20:40:04'!
nextYear
	
	^Month month: today monthIndex year: today yearNumber + 1.! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 20:41:37' prior: 50933368!
test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError
	
	| store cartId isbn cardNumber cardExpiration cardName |
	
	store := self createStoreWithDefaultCatalog.
	
	cartId := store createCartFor: 'validUserId' using: 'validPassword'.
	
	isbn := testObjectFactory defaultCatalog keys first.
	
	store add: 1 of: isbn to: cartId.
	
	cardNumber := 123. 
	
	cardExpiration := testObjectFactory nextYear.
	
	cardName := 'matias'.
		
	self should: [ store checkOut: cartId forCco: cardName withCcn: cardNumber expiringOn: cardExpiration ] 
	 	raise: Error - MessageNotUnderstood 
		withMessageText: Store invalidCartIdErrorMessageDescription.! !

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/21/2021 20:41:47'!
ERROR!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 20:42:17' prior: 50933398!
test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError
	
	| store cartId isbn cardNumber cardExpiration cardName |
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := self createStoreWithDefaultCatalog.
	
	cartId := store createCartFor: 'validUserId' using: 'validPassword'.
	
	isbn := testObjectFactory defaultCatalog keys first.
	
	store add: 1 of: isbn to: cartId.
	
	cardNumber := 123. 
	
	cardExpiration := testObjectFactory nextYear.
	
	cardName := 'matias'.
		
	self should: [ store checkOut: cartId forCco: cardName withCcn: cardNumber expiringOn: cardExpiration ] 
	 	raise: Error - MessageNotUnderstood 
		withMessageText: Store invalidCartIdErrorMessageDescription.! !

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/21/2021 20:42:22'!
ERROR!
!Store methodsFor: 'checkout' stamp: 'MS 6/21/2021 20:42:39'!
checkOut: aSmallInteger forCco: aString withCcn: aSmallInteger3 expiringOn: aMonth 
	self shouldBeImplemented.! !
!Store methodsFor: 'checkout' stamp: 'MS 6/21/2021 20:44:36' prior: 50933455!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear ! !
!Store methodsFor: 'checkout' stamp: 'MS 6/21/2021 20:46:06' prior: 50933461!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 

	"1) crear la tarjeta de credito ( y verificar que falle la longitud del numero)"! !

----SNAPSHOT----(21 June 2021 20:46:38) CuisUniversity-4532.image priorSource: 19175909!
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/21/2021 20:58:52'!
expiringOn: aMonth withCcn: aCreditCardNumber  
	
	^self new initializeExpiringOn: aMonth! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 20:58:52' prior: 50931479!
notExpiredCreditCard
	
	^CreditCard expiringOn: (Month month: today monthIndex year: today yearNumber + 1) withCcn: creditCardNumber! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 20:58:52' prior: 50931486!
expiredCreditCard
	
	^CreditCard expiringOn: (Month month: today monthIndex year: today yearNumber - 1) withCcn: creditCardNumber! !

!methodRemoval: CreditCard class #expiringOn: stamp: 'MS 6/21/2021 20:58:52'!
expiringOn: aMonth 
	
	^self new initializeExpiringOn: aMonth!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'MS 6/21/2021 20:59:29' prior: 50933495!
expiredCreditCard
	
	^CreditCard expiringOn: (Month month: today monthIndex year: today yearNumber - 1) withCcn: self validCreditCardNumber! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'MS 6/21/2021 20:59:36' prior: 50933487!
notExpiredCreditCard
	
	^CreditCard expiringOn: (Month month: today monthIndex year: today yearNumber + 1) withCcn: self validCreditCardNumber! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'MS 6/21/2021 20:59:53'!
validCreditCardNumber

	^1111222233334444! !

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'MS 6/21/2021 21:00:06'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/21/2021 21:00:06'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'MS 6/21/2021 21:00:06'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'MS 6/21/2021 21:00:06'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'MS 6/21/2021 21:00:06'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/21/2021 21:00:06'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/21/2021 21:00:06'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/21/2021 21:00:06'!
FAILURE!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/21/2021 21:00:06'!
FAILURE!

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'MS 6/21/2021 21:00:12'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/21/2021 21:00:12'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'MS 6/21/2021 21:00:12'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'MS 6/21/2021 21:00:12'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'MS 6/21/2021 21:00:12'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/21/2021 21:00:12'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/21/2021 21:00:12'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/21/2021 21:00:12'!
FAILURE!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/21/2021 21:00:12'!
FAILURE!

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'MS 6/21/2021 21:00:13'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/21/2021 21:00:13'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'MS 6/21/2021 21:00:13'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'MS 6/21/2021 21:00:13'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'MS 6/21/2021 21:00:13'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/21/2021 21:00:13'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/21/2021 21:00:13'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/21/2021 21:00:13'!
FAILURE!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/21/2021 21:00:13'!
FAILURE!

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'MS 6/21/2021 21:00:13'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/21/2021 21:00:13'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'MS 6/21/2021 21:00:13'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'MS 6/21/2021 21:00:13'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'MS 6/21/2021 21:00:13'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/21/2021 21:00:13'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/21/2021 21:00:13'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/21/2021 21:00:13'!
FAILURE!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/21/2021 21:00:13'!
FAILURE!

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'MS 6/21/2021 21:00:13'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/21/2021 21:00:13'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'MS 6/21/2021 21:00:13'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'MS 6/21/2021 21:00:13'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'MS 6/21/2021 21:00:13'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/21/2021 21:00:13'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/21/2021 21:00:13'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/21/2021 21:00:13'!
FAILURE!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/21/2021 21:00:13'!
FAILURE!

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'MS 6/21/2021 21:00:55'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/21/2021 21:00:55'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'MS 6/21/2021 21:00:55'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'MS 6/21/2021 21:00:55'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'MS 6/21/2021 21:00:55'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/21/2021 21:00:55'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/21/2021 21:00:55'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/21/2021 21:00:55'!
FAILURE!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/21/2021 21:00:55'!
FAILURE!
!CreditCard methodsFor: 'initialization' stamp: 'MS 6/21/2021 21:01:46'!
initializeExpiringOn: aMonth withCcn: aCreditCardNumber  
	
	expiration := aMonth ! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 21:01:46' prior: 50933480!
expiringOn: aMonth withCcn: aCreditCardNumber  
	
	^self new initializeExpiringOn: aMonth withCcn: creditCardNumber! !

!methodRemoval: CreditCard #initializeExpiringOn: stamp: 'MS 6/21/2021 21:01:46'!
initializeExpiringOn: aMonth 
	
	expiration := aMonth !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'MS 6/21/2021 21:02:11'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'MS 6/21/2021 21:02:10' prior: 50933732!
initializeExpiringOn: aMonth withCcn: aCreditCardNumber  
	
	expiration := aMonth.
	number := aCreditCardNumber.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/21/2021 21:02:23' prior: 50933738!
expiringOn: aMonth withCcn: aCreditCardNumber  
	
	^self new initializeExpiringOn: aMonth withCcn: aCreditCardNumber.! !

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'MS 6/21/2021 21:02:27'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/21/2021 21:02:27'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'MS 6/21/2021 21:02:27'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'MS 6/21/2021 21:02:27'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'MS 6/21/2021 21:02:27'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/21/2021 21:02:27'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/21/2021 21:02:27'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/21/2021 21:02:27'!
FAILURE!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/21/2021 21:02:27'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/21/2021 21:03:21' prior: 50933763!
expiringOn: aMonth withCcn: aCreditCardNumber  
	
	(aCreditCardNumber numberOfDigitsInBase: 10) = 16 ifFalse: [self error: self class invalidNumberLengthErrorDescription].
	
	^self new initializeExpiringOn: aMonth withCcn: aCreditCardNumber.! !

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'MS 6/21/2021 21:03:28'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/21/2021 21:03:28'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'MS 6/21/2021 21:03:28'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'MS 6/21/2021 21:03:28'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'MS 6/21/2021 21:03:28'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/21/2021 21:03:28'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/21/2021 21:03:28'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/21/2021 21:03:28'!
FAILURE!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/21/2021 21:03:28'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/21/2021 21:04:38' prior: 50933805!
expiringOn: aMonth withCcn: aCreditCardNumber  
	
	(aCreditCardNumber numberOfDigitsInBase: 10) = 16 ifFalse: [self error: self class invalidCartIdErrorMessageDescription].
	
	^self new initializeExpiringOn: aMonth withCcn: aCreditCardNumber.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/21/2021 21:04:47' prior: 50933850!
expiringOn: aMonth withCcn: aCreditCardNumber  
	
	(aCreditCardNumber numberOfDigitsInBase: 10) = 16 ifFalse: [self error: self invalidCartIdErrorMessageDescription].
	
	^self new initializeExpiringOn: aMonth withCcn: aCreditCardNumber.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/21/2021 21:05:13'!
invalidCartIdErrorMessageDescription

	^'Invalid Credit Card length'.! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 21:06:24' prior: 50933426!
test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError
	
	| store cartId isbn cardNumber cardExpiration cardName |
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := self createStoreWithDefaultCatalog.
	
	cartId := store createCartFor: 'validUserId' using: 'validPassword'.
	
	isbn := testObjectFactory defaultCatalog keys first.
	
	store add: 1 of: isbn to: cartId.
	
	cardNumber := 123. 
	
	cardExpiration := testObjectFactory nextYear.
	
	cardName := 'matias'.
		
	self should: [ store checkOut: cartId forCco: cardName withCcn: cardNumber expiringOn: cardExpiration ] 
	 	raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard invalidCartIdErrorMessageDescription .! !
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/21/2021 21:06:40'!
invalidCardLengthErrorMessageDescription

	^'Invalid Credit Card length'.! !

!methodRemoval: CreditCard class #invalidCartIdErrorMessageDescription stamp: 'MS 6/21/2021 21:06:49'!
invalidCartIdErrorMessageDescription

	^'Invalid Credit Card length'.!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/21/2021 21:07:27' prior: 50933878!
test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError
	
	| store cartId isbn cardNumber cardExpiration cardName |
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := self createStoreWithDefaultCatalog.
	
	cartId := store createCartFor: 'validUserId' using: 'validPassword'.
	
	isbn := testObjectFactory defaultCatalog keys first.
	
	store add: 1 of: isbn to: cartId.
	
	cardNumber := 123. 
	
	cardExpiration := testObjectFactory nextYear.
	
	cardName := 'matias'.
		
	self should: [ store checkOut: cartId forCco: cardName withCcn: cardNumber expiringOn: cardExpiration ] 
	 	raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard invalidCardLengthErrorMessageDescription .! !

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/21/2021 21:07:29'!
FAILURE!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/21/2021 21:08:06'!
FAILURE!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/21/2021 21:08:06'!
FAILURE!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/21/2021 21:08:29'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/21/2021 21:09:11' prior: 50933861!
expiringOn: aMonth withCcn: aCreditCardNumber  
	
	(aCreditCardNumber numberOfDigitsInBase: 10) = 16 ifFalse: [self error: self invalidCardLengthErrorMessageDescription ].
	
	^self new initializeExpiringOn: aMonth withCcn: aCreditCardNumber.! !

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/21/2021 21:09:18'!
FAILURE!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/21/2021 21:09:18'!
FAILURE!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/21/2021 21:11:33'!
FAILURE!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/21/2021 21:11:33'!
FAILURE!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/21/2021 21:11:43'!
FAILURE!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/21/2021 21:11:43'!
FAILURE!
!Store methodsFor: 'checkout' stamp: 'MS 6/21/2021 21:12:46' prior: 50933468!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 


	"1) crear la tarjeta de credito ( y verificar que falle la longitud del numero)"! !
!Store methodsFor: 'checkout' stamp: 'MS 6/21/2021 21:13:02' prior: 50933994!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 

	CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber.

	"1) crear la tarjeta de credito ( y verificar que falle la longitud del numero)"! !

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'MS 6/21/2021 21:13:03'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/21/2021 21:13:03'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'MS 6/21/2021 21:13:03'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'MS 6/21/2021 21:13:03'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'MS 6/21/2021 21:13:03'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/21/2021 21:13:03'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/21/2021 21:13:03'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/21/2021 21:13:03'!
PASSED!

----QUIT----(21 June 2021 21:18:16) CuisUniversity-4532.image priorSource: 19258441!

----STARTUP---- (21 June 2021 21:20:26) as C:\Users\matia\Downloads\windows64\windows64UltimoEj\CuisUniversity-4532.image!


----QUIT----(21 June 2021 21:20:35) CuisUniversity-4532.image priorSource: 19276607!

----STARTUP---- (21 June 2021 21:20:37) as C:\Users\matia\Downloads\windows64\windows64UltimoEj\CuisUniversity-4532.image!


----QUIT----(21 June 2021 21:20:49) CuisUniversity-4532.image priorSource: 19276818!

----STARTUP---- (23 June 2021 11:02:45) as C:\Users\matia\Downloads\windows64\windows64UltimoEj\CuisUniversity-4532.image!


!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/23/2021 11:02:49'!
PASSED!

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'MS 6/23/2021 11:02:52'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/23/2021 11:02:52'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'MS 6/23/2021 11:02:52'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'MS 6/23/2021 11:02:52'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'MS 6/23/2021 11:02:53'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/23/2021 11:02:53'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/23/2021 11:02:53'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/23/2021 11:02:53'!
PASSED!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/23/2021 11:03:15'!
test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError
	
	| store cartId isbn cardNumber cardExpiration cardName |
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := self createStoreWithDefaultCatalog.
	
	cartId := store createCartFor: 'validUserId' using: 'validPassword'.
	
	isbn := testObjectFactory defaultCatalog keys first.
	
	store add: 1 of: isbn to: cartId.
	
	cardNumber := 123. 
	
	cardExpiration := testObjectFactory nextYear.
	
	cardName := 'matias'.
		
	self should: [ store checkOut: cartId forCco: cardName withCcn: cardNumber expiringOn: cardExpiration ] 
	 	raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard invalidCardLengthErrorMessageDescription .! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/23/2021 11:07:25' prior: 50934099!
test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError
	
	| store cartId isbn cardNumber cardExpiration cardName |
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := self createStoreWithDefaultCatalog.
	
	cartId := store createCartFor: 'validUserId' using: 'validPassword'.
	
	isbn := testObjectFactory defaultCatalog keys first.
	
	store add: 1 of: isbn to: cartId.
	
	cardNumber := 1111222233334444. 
	
	cardExpiration := testObjectFactory nextYear.
	
	cardName := '   '.
		
	self should: [ store checkOut: cartId forCco: cardName withCcn: cardNumber expiringOn: cardExpiration ] 
	 	raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard invalidCardNameErrorMessageDescription .! !

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/23/2021 11:07:31'!
ERROR!
!CreditCard class methodsFor: 'exceptions' stamp: 'MS 6/23/2021 11:08:05'!
invalidCardNameErrorMessageDescription
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'exceptions' stamp: 'MS 6/23/2021 11:08:15' prior: 50934155!
invalidCardNameErrorMessageDescription
	^'Invalid card Name'! !

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/23/2021 11:08:17'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/23/2021 11:09:09' prior: 50933958!
expiringOn: aMonth withCcn: aCreditCardNumber  
	
	(aCreditCardNumber numberOfDigitsInBase: 10) = 16 ifFalse: [self error: self invalidCardLengthErrorMessageDescription ].
	
	^self new initializeExpiringOn: aMonth withCcn: aCreditCardNumber.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/23/2021 11:10:06'!
expiringOn: aMonth withCcn: aCreditCardNumber withCco: aCreditCardName   
	
	(aCreditCardNumber numberOfDigitsInBase: 10) = 16 ifFalse: [self error: self invalidCardLengthErrorMessageDescription ].
	
	^self new initializeExpiringOn: aMonth withCcn: aCreditCardNumber.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'MS 6/23/2021 11:10:06' prior: 50933507!
expiredCreditCard
	
	^CreditCard expiringOn: (Month month: today monthIndex year: today yearNumber - 1) withCcn: self validCreditCardNumber withCco: 'Matias'! !
!Store methodsFor: 'as yet unclassified' stamp: 'MS 6/23/2021 11:10:06' prior: 50934003!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 

	CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: 'Matias'.

	"1) crear la tarjeta de credito ( y verificar que falle la longitud del numero)"! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'MS 6/23/2021 11:10:06' prior: 50933515!
notExpiredCreditCard
	
	^CreditCard expiringOn: (Month month: today monthIndex year: today yearNumber + 1) withCcn: self validCreditCardNumber withCco: 'Matias'! !

!methodRemoval: CreditCard class #expiringOn:withCcn: stamp: 'MS 6/23/2021 11:10:06'!
expiringOn: aMonth withCcn: aCreditCardNumber  
	
	(aCreditCardNumber numberOfDigitsInBase: 10) = 16 ifFalse: [self error: self invalidCardLengthErrorMessageDescription ].
	
	^self new initializeExpiringOn: aMonth withCcn: aCreditCardNumber.!
!Store methodsFor: 'checkout' stamp: 'MS 6/23/2021 11:11:29' prior: 50934200!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 

	CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.

	"1) crear la tarjeta de credito ( y verificar que falle la longitud del numero)"! !
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/23/2021 11:14:20' prior: 50934180!
expiringOn: aMonth withCcn: aCreditCardNumber withCco: aCreditCardName   
	
	(aCreditCardNumber numberOfDigitsInBase: 10) = 16 ifFalse: [ self error: self invalidCardLengthErrorMessageDescription ].
	
	aCreditCardName isEmpty ifTrue: [ self error: self invalidCardNameErrorMessageDescription ].
	
	^self new initializeExpiringOn: aMonth withCcn: aCreditCardNumber.! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/23/2021 11:14:39' prior: 50934125!
test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError
	
	| store cartId isbn cardNumber cardExpiration cardName |
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := self createStoreWithDefaultCatalog.
	
	cartId := store createCartFor: 'validUserId' using: 'validPassword'.
	
	isbn := testObjectFactory defaultCatalog keys first.
	
	store add: 1 of: isbn to: cartId.
	
	cardNumber := 1111222233334444. 
	
	cardExpiration := testObjectFactory nextYear.
	
	cardName := ''.
		
	self should: [ store checkOut: cartId forCco: cardName withCcn: cardNumber expiringOn: cardExpiration ] 
	 	raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard invalidCardNameErrorMessageDescription .! !

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/23/2021 11:14:40'!
PASSED!

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'MS 6/23/2021 11:14:40'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/23/2021 11:14:40'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'MS 6/23/2021 11:14:40'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'MS 6/23/2021 11:14:40'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'MS 6/23/2021 11:14:40'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/23/2021 11:14:40'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/23/2021 11:14:40'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/23/2021 11:14:40'!
PASSED!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/23/2021 11:14:40'!
PASSED!
!CreditCard methodsFor: 'initialization' stamp: 'MS 6/23/2021 11:15:47'!
initializeExpiringOn: aMonth withCcn: aCreditCardNumber withCco: aCreditCardName   
	
	expiration := aMonth.
	number := aCreditCardNumber.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'MS 6/23/2021 11:15:47' prior: 50934244!
expiringOn: aMonth withCcn: aCreditCardNumber withCco: aCreditCardName   
	
	(aCreditCardNumber numberOfDigitsInBase: 10) = 16 ifFalse: [ self error: self invalidCardLengthErrorMessageDescription ].
	
	aCreditCardName isEmpty ifTrue: [ self error: self invalidCardNameErrorMessageDescription ].
	
	^self new initializeExpiringOn: aMonth withCcn: aCreditCardNumber withCco: 'matias'.! !

!methodRemoval: CreditCard #initializeExpiringOn:withCcn: stamp: 'MS 6/23/2021 11:15:47'!
initializeExpiringOn: aMonth withCcn: aCreditCardNumber  
	
	expiration := aMonth.
	number := aCreditCardNumber.!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'MS 6/23/2021 11:16:01'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration number name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'MS 6/23/2021 11:16:00' prior: 50934322!
initializeExpiringOn: aMonth withCcn: aCreditCardNumber withCco: aCreditCardName   
	
	expiration := aMonth.
	number := aCreditCardNumber.
	name := aCreditCardName.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/23/2021 11:16:12' prior: 50934330!
expiringOn: aMonth withCcn: aCreditCardNumber withCco: aCreditCardName   
	
	(aCreditCardNumber numberOfDigitsInBase: 10) = 16 ifFalse: [ self error: self invalidCardLengthErrorMessageDescription ].
	
	aCreditCardName isEmpty ifTrue: [ self error: self invalidCardNameErrorMessageDescription ].
	
	^self new initializeExpiringOn: aMonth withCcn: aCreditCardNumber withCco: aCreditCardName.! !

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'MS 6/23/2021 11:16:14'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/23/2021 11:16:14'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'MS 6/23/2021 11:16:14'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'MS 6/23/2021 11:16:15'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'MS 6/23/2021 11:16:15'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/23/2021 11:16:15'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/23/2021 11:16:15'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/23/2021 11:16:15'!
PASSED!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/23/2021 11:16:15'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/23/2021 11:17:07'!
assertCardNumberLengthEquals16: aCreditCardNumber

	(aCreditCardNumber numberOfDigitsInBase: 10) = 16 ifFalse: [ self error: self invalidCardLengthErrorMessageDescription ].
	! !
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/23/2021 11:17:38' prior: 50934368!
expiringOn: aMonth withCcn: aCreditCardNumber withCco: aCreditCardName   
	
	self assertCardNumberLengthEquals16: aCreditCardNumber.
	
	aCreditCardName isEmpty ifTrue: [ self error: self invalidCardNameErrorMessageDescription ].
	
	^self new initializeExpiringOn: aMonth withCcn: aCreditCardNumber withCco: aCreditCardName.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/23/2021 11:17:54'!
assertNameIsNotEmpty: aCreditCardName
	
	aCreditCardName isEmpty ifTrue: [ self error: self invalidCardNameErrorMessageDescription ].
	! !
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/23/2021 11:18:12' prior: 50934426!
expiringOn: aMonth withCcn: aCreditCardNumber withCco: aCreditCardName   
	
	self assertCardNumberLengthEquals16: aCreditCardNumber.
	
	aCreditCardName isEmpty ifTrue: [ self error: self invalidCardNameErrorMessageDescription ].
	
	^self new initializeExpiringOn: aMonth withCcn: aCreditCardNumber withCco: aCreditCardName.! !
!CreditCard class methodsFor: 'assertions' stamp: 'MS 6/23/2021 11:18:22'!
assertCardNameIsNotEmpty: aCreditCardName
	
	aCreditCardName isEmpty ifTrue: [ self error: self invalidCardNameErrorMessageDescription ].
	! !

!methodRemoval: CreditCard class #assertNameIsNotEmpty: stamp: 'MS 6/23/2021 11:18:22'!
assertNameIsNotEmpty: aCreditCardName
	
	aCreditCardName isEmpty ifTrue: [ self error: self invalidCardNameErrorMessageDescription ].
	!
!CreditCard class methodsFor: 'instance creation' stamp: 'MS 6/23/2021 11:18:37' prior: 50934447!
expiringOn: aMonth withCcn: aCreditCardNumber withCco: aCreditCardName   
	
	self assertCardNumberLengthEquals16: aCreditCardNumber.
	
	self assertCardNameIsNotEmpty: aCreditCardName.
	
	^self new initializeExpiringOn: aMonth withCcn: aCreditCardNumber withCco: aCreditCardName.! !

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'MS 6/23/2021 11:18:39'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/23/2021 11:18:39'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'MS 6/23/2021 11:18:39'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'MS 6/23/2021 11:18:39'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'MS 6/23/2021 11:18:39'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/23/2021 11:18:39'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/23/2021 11:18:39'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/23/2021 11:18:39'!
PASSED!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/23/2021 11:18:39'!
PASSED!
!Store methodsFor: 'checkout' stamp: 'MS 6/23/2021 11:19:35' prior: 50934231!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 

	"1) Crear la tarjeta de credito ( y verificar que falle la longitud del numero)
	2) 
	"

	CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.

	! !
!Store methodsFor: 'checkout' stamp: 'MS 6/23/2021 11:21:27' prior: 50934521!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 

	"1) Crear la tarjeta de credito ( y verificar que falle la longitud del numero)
	2) Que pasa si el id no existe?
	"

	CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.

	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/23/2021 11:21:52'!
test10CheckingOutWithNonExistentIdShouldRaiseAnError
	
	| store cartId isbn cardNumber cardExpiration cardName |
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := self createStoreWithDefaultCatalog.
	
	cartId := store createCartFor: 'validUserId' using: 'validPassword'.
	
	isbn := testObjectFactory defaultCatalog keys first.
	
	store add: 1 of: isbn to: cartId.
	
	cardNumber := 1111222233334444. 
	
	cardExpiration := testObjectFactory nextYear.
	
	cardName := ''.
		
	self should: [ store checkOut: cartId forCco: cardName withCcn: cardNumber expiringOn: cardExpiration ] 
	 	raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard invalidCardNameErrorMessageDescription .! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/23/2021 11:24:47' prior: 50934548!
test10CheckingOutWithNonExistentIdShouldRaiseAnError
	
	| store cardNumber cardExpiration cardName |
	
	"authenticateBehaviour := [ :aClientId :aClientPassword | true ]."
	
	store := self createStoreWithDefaultCatalog.
	
	"cartId := store createCartFor: 'validUserId' using: 'validPassword'.
	
	isbn := testObjectFactory defaultCatalog keys first.
	
	store add: 1 of: isbn to: cartId.
	"
	
	cardNumber := 1111222233334444. 
	
	cardExpiration := testObjectFactory nextYear.
	
	cardName := 'Matias'.
		
	self should: [ store checkOut: 5 forCco: cardName withCcn: cardNumber expiringOn: cardExpiration ] 
	 	raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard invalidCardNameErrorMessageDescription .! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/23/2021 11:25:23' prior: 50934574!
test10CheckingOutWithNonExistentIdShouldRaiseAnError
	
	| store cardNumber cardExpiration cardName |
	
	"authenticateBehaviour := [ :aClientId :aClientPassword | true ]."
	
	store := self createStoreWithDefaultCatalog.
	
	"cartId := store createCartFor: 'validUserId' using: 'validPassword'.
	
	isbn := testObjectFactory defaultCatalog keys first.
	
	store add: 1 of: isbn to: cartId.
	"
	
	cardNumber := 1111222233334444. 
	
	cardExpiration := testObjectFactory nextYear.
	
	cardName := 'Matias'.
		
	self should: [ store checkOut: 5 forCco: cardName withCcn: cardNumber expiringOn: cardExpiration ] 
	 	raise: Error - MessageNotUnderstood 
		withMessageText: Store nonExistantIdError .! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/23/2021 11:26:03' prior: 50934600!
test10CheckingOutWithNonExistentIdShouldRaiseAnError
	
	| store cardNumber cardExpiration cardName |
	
	"authenticateBehaviour := [ :aClientId :aClientPassword | true ]."
	
	store := self createStoreWithDefaultCatalog.
	
	"cartId := store createCartFor: 'validUserId' using: 'validPassword'.
	
	isbn := testObjectFactory defaultCatalog keys first.
	
	store add: 1 of: isbn to: cartId.
	"
	
	cardNumber := 1111222233334444. 
	
	cardExpiration := testObjectFactory nextYear.
	
	cardName := 'Matias'.
		
	self should: [ store checkOut: 5 forCco: cardName withCcn: cardNumber expiringOn: cardExpiration ] 
	 	raise: Error - MessageNotUnderstood 
		withMessageText: Store invalidCartIdErrorMessageDescription.! !

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'MS 6/23/2021 11:26:12'!
FAILURE!
!Store methodsFor: 'checkout' stamp: 'MS 6/23/2021 11:26:34' prior: 50934534!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 

	"1) Crear la tarjeta de credito ( y verificar que falle la longitud del numero)
	2) Que pasa si el id no existe?
	"

	CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.
	
	

	! !
!Store methodsFor: 'checkout' stamp: 'MS 6/23/2021 11:26:40' prior: 50934654!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 

	"1) Crear la tarjeta de credito ( y verificar que falle la longitud del numero)
	2) Que pasa si el id no existe?
	"

	CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.
	
		

	! !
!Store methodsFor: 'checkout' stamp: 'MS 6/23/2021 11:26:43' prior: 50934668!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 

	"1) Crear la tarjeta de credito ( y verificar que falle la longitud del numero)
	2) Que pasa si el id no existe?
	"
	

	CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.
	
		

	! !
!Store methodsFor: 'checkout' stamp: 'MS 6/23/2021 11:31:14' prior: 50934682!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 

	"2) Crear la tarjeta de credito ( y verificar que falle la longitud del numero)
	1) Que pasa si el id no existe?
	"
	nextCartId <= aCartId ifTrue: [ self error: self class invalidCartIdErrorMessageDescription ].

	CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.
	
		

	! !

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'MS 6/23/2021 11:31:19'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/23/2021 11:31:19'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'MS 6/23/2021 11:31:19'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'MS 6/23/2021 11:31:19'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'MS 6/23/2021 11:31:19'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/23/2021 11:31:19'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/23/2021 11:31:19'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/23/2021 11:31:19'!
PASSED!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/23/2021 11:31:19'!
PASSED!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'MS 6/23/2021 11:31:19'!
PASSED!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/23/2021 11:31:32' prior: 50934625!
test10CheckingOutWithNonExistentIdShouldRaiseAnError
	
	| store cardNumber cardExpiration cardName |
		
	store := self createStoreWithDefaultCatalog.
	
	cardNumber := 1111222233334444. 
	
	cardExpiration := testObjectFactory nextYear.
	
	cardName := 'Matias'.
		
	self should: [ store checkOut: 5 forCco: cardName withCcn: cardNumber expiringOn: cardExpiration ] 
	 	raise: Error - MessageNotUnderstood 
		withMessageText: Store invalidCartIdErrorMessageDescription.! !
!Store methodsFor: 'checkout' stamp: 'MS 6/23/2021 11:32:48' prior: 50934696!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 

	"1) Crear la tarjeta de credito ( y verificar que falle la longitud del numero)
	2) Que pasa si el id no existe?
	3) que pasa si el id existe?
	"
	nextCartId <= aCartId ifTrue: [ self error: self class invalidCartIdErrorMessageDescription ].

	CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.
	
		

	! !
!Store methodsFor: 'checkout' stamp: 'MS 6/23/2021 11:33:14' prior: 50934769!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 

	"1) Crear la tarjeta de credito ( y verificar que falle la longitud del numero / nombre vacio )
	2) Que pasa si el id no existe?
	3) que pasa si el id existe?
	"
	nextCartId <= aCartId ifTrue: [ self error: self class invalidCartIdErrorMessageDescription ].

	CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.
	
		

	! !
!Store methodsFor: 'checkout' stamp: 'MS 6/23/2021 11:33:17' prior: 50934787!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 

	"1) Crear la tarjeta de credito ( y verificar que falle la longitud del numero / nombre vacio )
	2) Que pasa si el id no existe?
	3) que pasa si el id existe?
	"
	nextCartId <= aCartId ifTrue: [ self error: self class invalidCartIdErrorMessageDescription ].

	CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.
	
			

	! !
!Store methodsFor: 'checkout' stamp: 'MS 6/23/2021 11:34:16' prior: 50934806!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 

	| cart |
	"1) Crear la tarjeta de credito ( y verificar que falle la longitud del numero / nombre vacio )
	2) Que pasa si el id no existe?
	3) que pasa si el id existe?
	"
	cart := self cartFor: aCartId.

	CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.
	
			

	! !
!Store methodsFor: 'checkout' stamp: 'MS 6/23/2021 11:34:29' prior: 50934825!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 

	| cart |
	
	"1) Crear la tarjeta de credito ( y verificar que falle la longitud del numero / nombre vacio )
	2) Que pasa si el id no existe?
	3) que pasa si el id existe?
	"
	cart := self cartFor: aCartId.

	CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.
	
			

	! !

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'MS 6/23/2021 11:34:33'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/23/2021 11:34:33'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'MS 6/23/2021 11:34:33'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'MS 6/23/2021 11:34:33'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'MS 6/23/2021 11:34:33'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/23/2021 11:34:33'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/23/2021 11:34:33'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/23/2021 11:34:33'!
PASSED!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/23/2021 11:34:33'!
PASSED!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'MS 6/23/2021 11:34:33'!
PASSED!
!Store methodsFor: 'checkout' stamp: 'MS 6/23/2021 12:05:53' prior: 50934842!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 

	| cart |
	
	"1) Crear la tarjeta de credito ( y verificar que falle la longitud del numero / nombre vacio )
	2) Que pasa si el id no existe?
	3) que pasa si el id existe?
	"
	cart := self cartFor: aCartId.

	CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.	
	
			

	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/23/2021 12:07:26'!
test11ListPurchasesAfterCheckOutShould
	
	| store cardNumber cardExpiration cardName |
		
	store := self createStoreWithDefaultCatalog.
	
	cardNumber := 1111222233334444. 
	
	cardExpiration := testObjectFactory nextYear.
	
	cardName := 'Matias'.
		
	self should: [ store checkOut: 5 forCco: cardName withCcn: cardNumber expiringOn: cardExpiration ] 
	 	raise: Error - MessageNotUnderstood 
		withMessageText: Store invalidCartIdErrorMessageDescription.! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/23/2021 12:07:46'!
test11ListsPurchasesAfterCheckOut
	
	| store cardNumber cardExpiration cardName |
		
	store := self createStoreWithDefaultCatalog.
	
	cardNumber := 1111222233334444. 
	
	cardExpiration := testObjectFactory nextYear.
	
	cardName := 'Matias'.
		
	self should: [ store checkOut: 5 forCco: cardName withCcn: cardNumber expiringOn: cardExpiration ] 
	 	raise: Error - MessageNotUnderstood 
		withMessageText: Store invalidCartIdErrorMessageDescription.! !

!methodRemoval: StoreTest #test11ListPurchasesAfterCheckOutShould stamp: 'MS 6/23/2021 12:07:46'!
test11ListPurchasesAfterCheckOutShould
	
	| store cardNumber cardExpiration cardName |
		
	store := self createStoreWithDefaultCatalog.
	
	cardNumber := 1111222233334444. 
	
	cardExpiration := testObjectFactory nextYear.
	
	cardName := 'Matias'.
		
	self should: [ store checkOut: 5 forCco: cardName withCcn: cardNumber expiringOn: cardExpiration ] 
	 	raise: Error - MessageNotUnderstood 
		withMessageText: Store invalidCartIdErrorMessageDescription.!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/23/2021 12:08:31' prior: 50934930!
test11ListsPurchasesAfterCheckOut
	
	| store cardNumber cardExpiration cardName |
		
	store := self createStoreWithDefaultCatalog.
	
	cardNumber := 1111222233334444. 
	
	cardExpiration := testObjectFactory nextYear.
	
	cardName := 'Matias'.
		
	self should: [ store checkOut: 5 forCco: cardName withCcn: cardNumber expiringOn: cardExpiration ] 
	 	raise: Error - MessageNotUnderstood 
		withMessageText: Store invalidCartIdErrorMessageDescription.! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/23/2021 12:10:12' prior: 50934965!
test11ListsPurchasesAfterCheckOut
	
	| store cartId isbn cardNumber cardExpiration cardName |
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := self createStoreWithDefaultCatalog.
	
	cartId := store createCartFor: 'validUserId' using: 'validPassword'.
	
	isbn := testObjectFactory defaultCatalog keys first.
	
	store add: 1 of: isbn to: cartId.
	
	cardNumber := 1111222233334444. 
	
	cardExpiration := testObjectFactory nextYear.
	
	cardName := 'Matias'.
		
	store checkOut: cartId forCco: cardName withCcn: cardNumber expiringOn: cardExpiration.
	
	store listPurchases: 'validUserId' using: 'validPassword'.
	 	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/23/2021 12:11:30' prior: 50934982!
test11ListsPurchasesAfterCheckOut
	
	| store cartId isbn cardNumber cardExpiration cardName |
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := self createStoreWithDefaultCatalog.
	
	cartId := store createCartFor: 'validUserId' using: 'validPassword'.
	
	isbn := testObjectFactory defaultCatalog keys first.
	
	store add: 1 of: isbn to: cartId.
	
	cardNumber := 1111222233334444. 
	
	cardExpiration := testObjectFactory nextYear.
	
	cardName := 'Matias'.
		
	store checkOut: cartId forCco: cardName withCcn: cardNumber expiringOn: cardExpiration.
	
	self assert: (store listPurchases: 'validUserId' using: 'validPassword') includes: isbn.
	
	
	 	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/23/2021 12:12:00' prior: 50935006!
test11ListsPurchasesAfterCheckOut
	
	| store cartId isbn cardNumber cardExpiration cardName validUsername validPassword |
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := self createStoreWithDefaultCatalog.
	
	cartId := store createCartFor: 'validUserId' using: 'validPassword'.
	
	isbn := testObjectFactory defaultCatalog keys first.
	
	store add: 1 of: isbn to: cartId.
	
	cardNumber := 1111222233334444. 
	
	cardExpiration := testObjectFactory nextYear.
	
	cardName := 'Matias'.
		
	store checkOut: cartId forCco: cardName withCcn: cardNumber expiringOn: cardExpiration.
	
	self assert: (store listPurchases: 'validUserId' using: 'validPassword') includes: isbn.
	
	
	 	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/23/2021 12:12:36' prior: 50935031!
test11ListsPurchasesAfterCheckOut
	
	| store cartId isbn cardNumber cardExpiration cardName validUsername validPassword |
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := self createStoreWithDefaultCatalog.
	
	validUsername := 'validUserId'.
	
	validPassword := 'validPassword'.
	
	cartId := store createCartFor: validUsername using: validPassword .
	
	isbn := testObjectFactory defaultCatalog keys first.
	
	store add: 1 of: isbn to: cartId.
	
	cardNumber := 1111222233334444. 
	
	cardExpiration := testObjectFactory nextYear.
	
	cardName := 'Matias'.
		
	store checkOut: cartId forCco: cardName withCcn: cardNumber expiringOn: cardExpiration.
	
	self assert: (store listPurchases: 'validUserId' using: 'validPassword') includes: isbn.
	
	
	 	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/23/2021 12:12:49' prior: 50935057!
test11ListsPurchasesAfterCheckOut
	
	| store cartId isbn cardNumber cardExpiration cardName validUsername validPassword |
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := self createStoreWithDefaultCatalog.
	
	validUsername := 'validUserId'.
	
	validPassword := 'validPassword'.
	
	cartId := store createCartFor: validUsername using: validPassword .
	
	isbn := testObjectFactory defaultCatalog keys first.
	
	store add: 1 of: isbn to: cartId.
	
	cardNumber := 1111222233334444. 
	
	cardExpiration := testObjectFactory nextYear.
	
	cardName := 'Matias'.
		
	store checkOut: cartId forCco: cardName withCcn: cardNumber expiringOn: cardExpiration.
	
	self assert: (store listPurchases: validUsername using: validPassword ) includes: isbn.
	
	
	 	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'MS 6/23/2021 12:13:18' prior: 50935085!
test11ListsPurchasesAfterCheckOut
	
	| store cartId isbn cardNumber cardExpiration cardName validUserId validPassword |
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	store := self createStoreWithDefaultCatalog.
	
	validUserId := 'validUserId'.
	
	validPassword := 'validPassword'.
	
	cartId := store createCartFor: validUserId using: validPassword .
	
	isbn := testObjectFactory defaultCatalog keys first.
	
	store add: 1 of: isbn to: cartId.
	
	cardNumber := 1111222233334444. 
	
	cardExpiration := testObjectFactory nextYear.
	
	cardName := 'Matias'.
		
	store checkOut: cartId forCco: cardName withCcn: cardNumber expiringOn: cardExpiration.
	
	self assert: (store listPurchases: validUserId using: validPassword ) includes: isbn.
	
	
	 	! !

!testRun: #StoreTest #test11ListsPurchasesAfterCheckOut stamp: 'MS 6/23/2021 12:13:20'!
ERROR!

----QUIT----(23 June 2021 12:13:49) CuisUniversity-4532.image priorSource: 19277029!

----STARTUP---- (23 June 2021 12:14:20) as C:\Users\matia\Downloads\windows64\windows64UltimoEj\CuisUniversity-4532.image!

!Store methodsFor: 'checkout' stamp: 'MS 6/23/2021 12:17:02' prior: 50934896!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 

	| cart |
	
	"1) Crear la tarjeta de credito ( y verificar que falle la longitud del numero / nombre vacio )
	2) Que pasa si el id no existe?
	3) que pasa si el id existe? -> se hace el checkout.
	-> se crea el cashier
	-> se le manda el mensaje checkout
	-> se tienen que agregar ISBNXCANTIDAD vendidos a algun arreglo correspondiente a este cartId.
	-> listPurchases debe devolver eso.
	"
	cart := self cartFor: aCartId.

	CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.	
	
			

	! !
!Store methodsFor: 'checkout' stamp: 'MS 6/23/2021 12:17:21' prior: 50935150!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 

	
	
	"1) Crear la tarjeta de credito ( y verificar que falle la longitud del numero / nombre vacio )
	2) Que pasa si el id no existe?
	3) que pasa si el id existe? -> se hace el checkout.
	-> se crea el cashier
	-> se le manda el mensaje checkout
	-> se tienen que agregar ISBNXCANTIDAD vendidos a algun arreglo correspondiente a este cartId.
	-> listPurchases debe devolver eso.
	"
	self cartFor: aCartId.

	CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.	
	
			

	! !
!Store methodsFor: 'checkout' stamp: 'MS 6/23/2021 12:17:24' prior: 50935174!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 

		
	"1) Crear la tarjeta de credito ( y verificar que falle la longitud del numero / nombre vacio )
	2) Que pasa si el id no existe?
	3) que pasa si el id existe? -> se hace el checkout.
	-> se crea el cashier
	-> se le manda el mensaje checkout
	-> se tienen que agregar ISBNXCANTIDAD vendidos a algun arreglo correspondiente a este cartId.
	-> listPurchases debe devolver eso.
	"
	self cartFor: aCartId.

	CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.	
	
			

	! !
!Store methodsFor: 'checkout' stamp: 'MS 6/23/2021 12:42:06' prior: 50935197!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 
	
	| cart creditCard cashier salesBook total |
		
	"1) Crear la tarjeta de credito ( y verificar que falle la longitud del numero / nombre vacio )
	2) Que pasa si el id no existe?
	3) que pasa si el id existe? -> se hace el checkout.
	-> se crea el cashier
	-> se le manda el mensaje checkout
	-> se tienen que agregar ISBNXCANTIDAD vendidos a algun arreglo correspondiente a este cartId.
	-> listPurchases debe devolver eso.
	"
	cart := self cartFor: aCartId.

	creditCard := CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.	
	
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: CashierTest new
		on: StoreTestObjectsFactory new today
		registeringOn: salesBook.
		
	total := cashier checkOut.
	
	
			

	! !
!Store methodsFor: 'checkout' stamp: 'MS 6/23/2021 12:42:38' prior: 50935220!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 
	
	| cart creditCard cashier salesBook total |
		
	"1) Crear la tarjeta de credito ( y verificar que falle la longitud del numero / nombre vacio ). ok
	2) Que pasa si el id no existe?. ok
	3) que pasa si el id existe? -> se hace el checkout.
	-> se crea el cashier. ok
	-> se le manda el mensaje checkout. ok
	-> se tienen que agregar ISBNXCANTIDAD vendidos a algun arreglo correspondiente a este cartId.
	-> listPurchases debe devolver eso.
	"
	cart := self cartFor: aCartId.

	creditCard := CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.	
	
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: CashierTest new
		on: StoreTestObjectsFactory new today
		registeringOn: salesBook.
		
	total := cashier checkOut.
	
	
			

	! !
!Store methodsFor: 'checkout' stamp: 'MS 6/23/2021 12:42:49' prior: 50935253!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 
	
	| cart creditCard cashier salesBook |
		
	"1) Crear la tarjeta de credito ( y verificar que falle la longitud del numero / nombre vacio ). ok
	2) Que pasa si el id no existe?. ok
	3) que pasa si el id existe? -> se hace el checkout.
	-> se crea el cashier. ok
	-> se le manda el mensaje checkout. ok
	-> se tienen que agregar ISBNXCANTIDAD vendidos a algun arreglo correspondiente a este cartId.
	-> listPurchases debe devolver eso.
	"
	cart := self cartFor: aCartId.

	creditCard := CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.	
	
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: CashierTest new
		on: StoreTestObjectsFactory new today
		registeringOn: salesBook.
		
	cashier checkOut.
	
	
			

	! !
!Store methodsFor: 'checkout' stamp: 'MS 6/23/2021 12:44:29' prior: 50935286!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 
	
	| cart creditCard cashier salesBook |
		
	"1) Crear la tarjeta de credito ( y verificar que falle la longitud del numero / nombre vacio ). ok
	2) Que pasa si el id no existe?. ok
	3) que pasa si el id existe? -> se hace el checkout.
	-> se crea el cashier. ok
	-> se le manda el mensaje checkout. ok
	-> se tienen que agregar ISBNXCANTIDAD vendidos a algun arreglo correspondiente a este cartId.
	-> listPurchases debe devolver eso.
	"
	cart := self cartFor: aCartId.

	creditCard := CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.	
	
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: CashierTest new
		on: StoreTestObjectsFactory new today
		registeringOn: salesBook.
		
	cashier checkOut.
	
	^self listCart: aCartId.
			

	! !

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'MS 6/23/2021 12:44:33'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/23/2021 12:44:33'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'MS 6/23/2021 12:44:33'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'MS 6/23/2021 12:44:33'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'MS 6/23/2021 12:44:33'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/23/2021 12:44:33'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/23/2021 12:44:33'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/23/2021 12:44:33'!
PASSED!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/23/2021 12:44:33'!
PASSED!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'MS 6/23/2021 12:44:33'!
PASSED!

!testRun: #StoreTest #test11ListsPurchasesAfterCheckOut stamp: 'MS 6/23/2021 12:44:33'!
ERROR!

!testRun: #StoreTest #test11ListsPurchasesAfterCheckOut stamp: 'MS 6/23/2021 12:44:33'!
ERROR!

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'MS 6/23/2021 12:47:04'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'MS 6/23/2021 12:47:04'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'MS 6/23/2021 12:47:04'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'MS 6/23/2021 12:47:04'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'MS 6/23/2021 12:47:04'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/23/2021 12:47:04'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'MS 6/23/2021 12:47:04'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'MS 6/23/2021 12:47:04'!
PASSED!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'MS 6/23/2021 12:47:04'!
PASSED!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'MS 6/23/2021 12:47:04'!
PASSED!

!testRun: #StoreTest #test11ListsPurchasesAfterCheckOut stamp: 'MS 6/23/2021 12:47:04'!
ERROR!

!testRun: #StoreTest #test11ListsPurchasesAfterCheckOut stamp: 'MS 6/23/2021 12:47:04'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 6/23/2021 12:48:08'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 6/23/2021 12:48:19'!
PASSED!

----QUIT----(23 June 2021 13:02:10) CuisUniversity-4532.image priorSource: 19311745!

----STARTUP---- (23 June 2021 15:17:33) as C:\Users\matia\Downloads\windows64\windows64UltimoEj\CuisUniversity-4532.image!


----QUIT----(23 June 2021 15:17:54) CuisUniversity-4532.image priorSource: 19321434!

!classRemoval: #StoreTestObjectsFactory stamp: 'GDH 6/23/2021 17:04:08'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Store stamp: 'GDH 6/23/2021 17:04:09'!
Object subclass: #Store
	instanceVariableNames: 'authenticator nextCartId catalog cartsById'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Sale stamp: 'GDH 6/23/2021 17:04:09'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'GDH 6/23/2021 17:04:09'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'GDH 6/23/2021 17:04:09'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'GDH 6/23/2021 17:04:09'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StoreTest stamp: 'GDH 6/23/2021 17:04:10'!
TestCase subclass: #StoreTest
	instanceVariableNames: 'authenticateBehaviour testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'GDH 6/23/2021 17:04:10'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'GDH 6/23/2021 17:04:10'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\Gabriel\Downloads\TusLibros (2).st----!

!classDefinition: #Store category: 'TusLibros' stamp: 'GDH 6/23/2021 17:36:55'!
Object subclass: #Store
	instanceVariableNames: 'authenticator nextCartId catalog cartsById merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'checkout' stamp: 'GDH 6/23/2021 17:36:54' prior: 50939650!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 
	
	| cart creditCard cashier salesBook |
		
	"1) Crear la tarjeta de credito ( y verificar que falle la longitud del numero / nombre vacio ). ok
	2) Que pasa si el id no existe?. ok
	3) que pasa si el id existe? -> se hace el checkout.
	-> se crea el cashier. ok
	-> se le manda el mensaje checkout. ok
	-> se tienen que agregar ISBNXCANTIDAD vendidos a algun arreglo correspondiente a este cartId.
	-> listPurchases debe devolver eso.
	"
	cart := self cartFor: aCartId.

	creditCard := CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.	
	
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: StoreTestObjectsFactory new today
		registeringOn: salesBook.
		
	cashier checkOut.
	
	^self listCart: aCartId.
			

	! !
!Store methodsFor: 'initialization' stamp: 'GDH 6/23/2021 17:57:44'!
initializeAuthenticatingWith: anAuthenticator processingThrough: processingThrough acceptingItemsFrom: aCatalog.

	nextCartId := 1.
	authenticator := anAuthenticator.
	catalog := aCatalog.
	cartsById := Dictionary new.! !
!Store class methodsFor: 'as yet unclassified' stamp: 'GDH 6/23/2021 17:57:44' prior: 50939700!
createStoreAuthenticatingWith: anAuthenticator acceptingItemsFrom: aCatalog

	^Store new initializeAuthenticatingWith: anAuthenticator processingThrough: self acceptingItemsFrom: aCatalog.! !

!methodRemoval: Store #initializeAuthenticatingWith:acceptingItemsFrom: stamp: 'GDH 6/23/2021 17:57:44'!
initializeAuthenticatingWith: anAuthenticator acceptingItemsFrom: aCatalog.

	nextCartId := 1.
	authenticator := anAuthenticator.
	catalog := aCatalog.
	cartsById := Dictionary new.!
!Store methodsFor: 'initialization' stamp: 'GDH 6/23/2021 17:58:32' prior: 50939830!
initializeAuthenticatingWith: anAuthenticator processingThrough: aMerchantProcessor acceptingItemsFrom: aCatalog.

	nextCartId := 1.
	authenticator := anAuthenticator.
	merchantProcessor := aMerchantProcessor.
	catalog := aCatalog.
	cartsById := Dictionary new.! !
!Store class methodsFor: 'instance creation' stamp: 'GDH 6/23/2021 17:59:08'!
createStoreAuthenticatingWith: anAuthenticator processingThrough: aMerchantProcessor acceptingItemsFrom: aCatalog

	^Store new initializeAuthenticatingWith: anAuthenticator processingThrough: self acceptingItemsFrom: aCatalog.! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/23/2021 17:59:08' prior: 50939073!
createStoreWithBigCatalog

	^Store createStoreAuthenticatingWith: self processingThrough: self acceptingItemsFrom: testObjectFactory bigCatalog .! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/23/2021 17:59:08' prior: 50939080!
createStoreWithDefaultCatalog

	^Store createStoreAuthenticatingWith: self processingThrough: self acceptingItemsFrom: testObjectFactory defaultCatalog .! !

!methodRemoval: Store class #createStoreAuthenticatingWith:acceptingItemsFrom: stamp: 'GDH 6/23/2021 17:59:08'!
createStoreAuthenticatingWith: anAuthenticator acceptingItemsFrom: aCatalog

	^Store new initializeAuthenticatingWith: anAuthenticator processingThrough: self acceptingItemsFrom: aCatalog.!
!Store class methodsFor: 'instance creation' stamp: 'GDH 6/23/2021 17:59:22' prior: 50939869!
createStoreAuthenticatingWith: anAuthenticator processingThrough: aMerchantProcessor acceptingItemsFrom: aCatalog

	^Store new initializeAuthenticatingWith: anAuthenticator processingThrough: aMerchantProcessor acceptingItemsFrom: aCatalog.! !

!classDefinition: #StoreTest category: 'TusLibros' stamp: 'GDH 6/23/2021 17:59:46'!
TestCase subclass: #StoreTest
	instanceVariableNames: 'authenticateBehaviour testObjectFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/23/2021 17:59:45'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard ! !

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/23/2021 18:04:37'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/23/2021 18:04:39'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/23/2021 18:04:41'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/23/2021 18:04:41'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/23/2021 18:04:41'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/23/2021 18:05:03'!
PASSED!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/23/2021 18:05:05'!
PASSED!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'GDH 6/23/2021 18:05:06'!
PASSED!
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 18:05:40' prior: 50939283!
test11ListsPurchasesAfterCheckOut
	
	| store cartId isbn cardNumber cardExpiration cardName validUserId validPassword |
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	store := self createStoreWithDefaultCatalog.
	
	validUserId := 'validUserId'.
	
	validPassword := 'validPassword'.
	
	cartId := store createCartFor: validUserId using: validPassword .
	
	isbn := testObjectFactory defaultCatalog keys first.
	
	store add: 1 of: isbn to: cartId.
	
	cardNumber := 1111222233334444. 
	
	cardExpiration := testObjectFactory nextYear.
	
	cardName := 'Matias'.
		
	store checkOut: cartId forCco: cardName withCcn: cardNumber expiringOn: cardExpiration.
	
	self assert: (store listPurchases: validUserId using: validPassword ) includes: isbn.
	
	
	 	! !

!testRun: #StoreTest #test11ListsPurchasesAfterCheckOut stamp: 'GDH 6/23/2021 18:05:42'!
ERROR!

!methodRemoval: StoreTest #test11ListsPurchasesAfterCheckOut stamp: 'GDH 6/23/2021 18:28:57'!
test11ListsPurchasesAfterCheckOut
	
	| store cartId isbn cardNumber cardExpiration cardName validUserId validPassword |
	
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	store := self createStoreWithDefaultCatalog.
	
	validUserId := 'validUserId'.
	
	validPassword := 'validPassword'.
	
	cartId := store createCartFor: validUserId using: validPassword .
	
	isbn := testObjectFactory defaultCatalog keys first.
	
	store add: 1 of: isbn to: cartId.
	
	cardNumber := 1111222233334444. 
	
	cardExpiration := testObjectFactory nextYear.
	
	cardName := 'Matias'.
		
	store checkOut: cartId forCco: cardName withCcn: cardNumber expiringOn: cardExpiration.
	
	self assert: (store listPurchases: validUserId using: validPassword ) includes: isbn.
	
	
	 	!
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 18:29:35'!
test11CheckingOutWithSuccesfullyShouldReturnATransactionId
	
	| store cardNumber cardExpiration cardName |
		
	store := self createStoreWithDefaultCatalog.
	
	cardNumber := 1111222233334444. 
	
	cardExpiration := testObjectFactory nextYear.
	
	cardName := 'Matias'.
		
	self should: [ store checkOut: 5 forCco: cardName withCcn: cardNumber expiringOn: cardExpiration ] 
	 	raise: Error - MessageNotUnderstood 
		withMessageText: Store invalidCartIdErrorMessageDescription.! !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 18:35:38' prior: 50940024!
test11CheckingOutWithSuccesfullyShouldReturnATransactionId
	
	| store cardNumber cardExpiration cardName transactionId |
		
	store := self createStoreWithDefaultCatalog.
	
	cardNumber := 1111222233334444. 
	
	cardExpiration := testObjectFactory nextYear.
	
	cardName := 'Matias'.
	
	transactionId = store checkOut: 5 forCco: cardName withCcn: cardNumber expiringOn: cardExpiration
		
	! !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 18:36:22'!
test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId
	
	| store cardNumber cardExpiration cardName transactionId |
		
	store := self createStoreWithDefaultCatalog.
	
	cardNumber := 1111222233334444. 
	
	cardExpiration := testObjectFactory nextYear.
	
	cardName := 'Matias'.
	
	transactionId = store checkOut: 5 forCco: cardName withCcn: cardNumber expiringOn: cardExpiration
		
	! !

!methodRemoval: StoreTest #test11CheckingOutWithSuccesfullyShouldReturnATransactionId stamp: 'GDH 6/23/2021 18:36:22'!
test11CheckingOutWithSuccesfullyShouldReturnATransactionId
	
	| store cardNumber cardExpiration cardName transactionId |
		
	store := self createStoreWithDefaultCatalog.
	
	cardNumber := 1111222233334444. 
	
	cardExpiration := testObjectFactory nextYear.
	
	cardName := 'Matias'.
	
	transactionId = store checkOut: 5 forCco: cardName withCcn: cardNumber expiringOn: cardExpiration
		
	!
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 18:39:14' prior: 50940057!
test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId
	
	| store transactionId1 cartId1 isbn transactionId2 cartId2 |
		
	store := self createStoreWithDefaultCatalog.
	
	cartId1 := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	store add: 1 of: isbn to: cartId1.
				
	transactionId1 := store checkOut: 5 
					  forCco: 'Matias' 
					  withCcn: 1111222233334444 
					  expiringOn: testObjectFactory nextYear
		
	! !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 18:40:57' prior: 50940088!
test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId
	
	| store transactionId1 cartId1 isbn transactionId2 cartId2 |
		
	store := self createStoreWithDefaultCatalog.
	
	cartId1 := store createCartFor: 'validUserId' using: 'validPassword' .
	cartId2 := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	store add: 1 of: isbn to: cartId1.
	store add: 1 of: isbn to: cartId2.
				
	transactionId1 := store checkOut: cartId1 
					  forCco: 'Matias' 
					  withCcn: 1111222233334444 
					  expiringOn: testObjectFactory nextYear.
	
	transactionId2 := store checkOut: cartId2 
					  forCco: 'Matias' 
					  withCcn: 1111222233334444 
					  expiringOn: testObjectFactory nextYear.
					
	self deny: transactionId1 = transactionId2.
					
		
	! !

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/23/2021 18:40:58'!
ERROR!
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 18:41:18' prior: 50940107!
test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId
	
	| store transactionId1 cartId1 isbn transactionId2 cartId2 |
		
	store := self createStoreWithDefaultCatalog.
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	cartId1 := store createCartFor: 'validUserId' using: 'validPassword' .
	cartId2 := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	store add: 1 of: isbn to: cartId1.
	store add: 1 of: isbn to: cartId2.
				
	transactionId1 := store checkOut: cartId1 
					  forCco: 'Matias' 
					  withCcn: 1111222233334444 
					  expiringOn: testObjectFactory nextYear.
	
	transactionId2 := store checkOut: cartId2 
					  forCco: 'Matias' 
					  withCcn: 1111222233334444 
					  expiringOn: testObjectFactory nextYear.
					
	self deny: transactionId1 = transactionId2.
					
		
	! !

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/23/2021 18:41:19'!
FAILURE!

!classDefinition: #Store category: 'TusLibros' stamp: 'GDH 6/23/2021 18:48:50'!
Object subclass: #Store
	instanceVariableNames: 'authenticator nextCartId catalog cartsById merchantProcessor xxx'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'checkout' stamp: 'GDH 6/23/2021 18:48:49' prior: 50939797!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 
	
	| cart creditCard cashier salesBook |
		
	"1) Crear la tarjeta de credito ( y verificar que falle la longitud del numero / nombre vacio ). ok
	2) Que pasa si el id no existe?. ok
	3) que pasa si el id existe? -> se hace el checkout.
	-> se crea el cashier. ok
	-> se le manda el mensaje checkout. ok
	-> se tienen que agregar ISBNXCANTIDAD vendidos a algun arreglo correspondiente a este cartId.
	-> listPurchases debe devolver eso.
	"
	cart := self cartFor: aCartId.

	creditCard := CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.	
	
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: xxx today
		registeringOn: salesBook.
		
	cashier checkOut.
	
	^self listCart: aCartId.
			

	! !

!classDefinition: #Store category: 'TusLibros' stamp: 'GDH 6/23/2021 18:51:21'!
Object subclass: #Store
	instanceVariableNames: 'authenticator nextCartId catalog cartsById merchantProcessor xxx dateAndTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'checkout' stamp: 'GDH 6/23/2021 18:51:19' prior: 50940185!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 
	
	| cart creditCard cashier salesBook |
		
	"1) Crear la tarjeta de credito ( y verificar que falle la longitud del numero / nombre vacio ). ok
	2) Que pasa si el id no existe?. ok
	3) que pasa si el id existe? -> se hace el checkout.
	-> se crea el cashier. ok
	-> se le manda el mensaje checkout. ok
	-> se tienen que agregar ISBNXCANTIDAD vendidos a algun arreglo correspondiente a este cartId.
	-> listPurchases debe devolver eso.
	"
	cart := self cartFor: aCartId.

	creditCard := CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.	
	
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: dateAndTime today
		registeringOn: salesBook.
		
	cashier checkOut.
	
	^self listCart: aCartId.
			

	! !

Object subclass: #Store
	instanceVariableNames: 'authenticator nextCartId catalog cartsById merchantProcessor dateAndTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Store category: 'TusLibros' stamp: 'GDH 6/23/2021 18:51:25'!
Object subclass: #Store
	instanceVariableNames: 'authenticator nextCartId catalog cartsById merchantProcessor dateAndTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'initialization' stamp: 'GDH 6/23/2021 18:53:37'!
initializeAuthenticatingWith: anAuthenticator processingThrough: aMerchantProcessor acceptingItemsFrom: aCatalog on: aDateAndTime .

	nextCartId := 1.
	authenticator := anAuthenticator.
	merchantProcessor := aMerchantProcessor.
	catalog := aCatalog.
	cartsById := Dictionary new.! !
!Store class methodsFor: 'as yet unclassified' stamp: 'GDH 6/23/2021 18:53:37' prior: 50939906!
createStoreAuthenticatingWith: anAuthenticator processingThrough: aMerchantProcessor acceptingItemsFrom: aCatalog

	^Store new initializeAuthenticatingWith: anAuthenticator processingThrough: aMerchantProcessor acceptingItemsFrom: aCatalog on: self.! !

!methodRemoval: Store #initializeAuthenticatingWith:processingThrough:acceptingItemsFrom: stamp: 'GDH 6/23/2021 18:53:37'!
initializeAuthenticatingWith: anAuthenticator processingThrough: aMerchantProcessor acceptingItemsFrom: aCatalog.

	nextCartId := 1.
	authenticator := anAuthenticator.
	merchantProcessor := aMerchantProcessor.
	catalog := aCatalog.
	cartsById := Dictionary new.!
!Store methodsFor: 'initialization' stamp: 'GDH 6/23/2021 18:53:59' prior: 50940273!
initializeAuthenticatingWith: anAuthenticator processingThrough: aMerchantProcessor acceptingItemsFrom: aCatalog on: aDateAndTime .

	nextCartId := 1.
	authenticator := anAuthenticator.
	merchantProcessor := aMerchantProcessor.
	catalog := aCatalog.
	cartsById := Dictionary new.
	dateAndTime := aDateAndTime.! !
!Store class methodsFor: 'instance creation' stamp: 'GDH 6/23/2021 18:54:44'!
createStoreAuthenticatingWith: anAuthenticator processingThrough: aMerchantProcessor acceptingItemsFrom: aCatalog on: aDateAndTime 

	^Store new initializeAuthenticatingWith: anAuthenticator processingThrough: aMerchantProcessor acceptingItemsFrom: aCatalog on: self.! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/23/2021 18:54:44' prior: 50939880!
createStoreWithBigCatalog

	^Store createStoreAuthenticatingWith: self processingThrough: self acceptingItemsFrom: testObjectFactory bigCatalog on: testObjectFactory today .! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/23/2021 18:54:44' prior: 50939888!
createStoreWithDefaultCatalog

	^Store createStoreAuthenticatingWith: self processingThrough: self acceptingItemsFrom: testObjectFactory defaultCatalog on: testObjectFactory today .! !

!methodRemoval: Store class #createStoreAuthenticatingWith:processingThrough:acceptingItemsFrom: stamp: 'GDH 6/23/2021 18:54:44'!
createStoreAuthenticatingWith: anAuthenticator processingThrough: aMerchantProcessor acceptingItemsFrom: aCatalog

	^Store new initializeAuthenticatingWith: anAuthenticator processingThrough: aMerchantProcessor acceptingItemsFrom: aCatalog on: self.!
!Store class methodsFor: 'instance creation' stamp: 'GDH 6/23/2021 18:55:00' prior: 50940321!
createStoreAuthenticatingWith: anAuthenticator processingThrough: aMerchantProcessor acceptingItemsFrom: aCatalog on: aDateAndTime 

	^Store new initializeAuthenticatingWith: anAuthenticator processingThrough: aMerchantProcessor acceptingItemsFrom: aCatalog on: aDateAndTime.! !
!Store methodsFor: 'checkout' stamp: 'GDH 6/23/2021 18:55:16' prior: 50940226!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 
	
	| cart creditCard cashier salesBook |
		
	"1) Crear la tarjeta de credito ( y verificar que falle la longitud del numero / nombre vacio ). ok
	2) Que pasa si el id no existe?. ok
	3) que pasa si el id existe? -> se hace el checkout.
	-> se crea el cashier. ok
	-> se le manda el mensaje checkout. ok
	-> se tienen que agregar ISBNXCANTIDAD vendidos a algun arreglo correspondiente a este cartId.
	-> listPurchases debe devolver eso.
	"
	cart := self cartFor: aCartId.

	creditCard := CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.	
	
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: dateAndTime now
		registeringOn: salesBook.
		
	cashier checkOut.
	
	^self listCart: aCartId.
			

	! !

!classDefinition: #Store category: 'TusLibros' stamp: 'GDH 6/23/2021 18:56:53'!
Object subclass: #Store
	instanceVariableNames: 'authenticator nextCartId catalog cartsById merchantProcessor dateAndTime nextTransactionId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'checkout' stamp: 'GDH 6/23/2021 18:56:52' prior: 50940375!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 
	
	| cart creditCard cashier salesBook |
		
	"1) Crear la tarjeta de credito ( y verificar que falle la longitud del numero / nombre vacio ). ok
	2) Que pasa si el id no existe?. ok
	3) que pasa si el id existe? -> se hace el checkout.
	-> se crea el cashier. ok
	-> se le manda el mensaje checkout. ok
	-> se tienen que agregar ISBNXCANTIDAD vendidos a algun arreglo correspondiente a este cartId.
	-> listPurchases debe devolver eso.
	"
	cart := self cartFor: aCartId.

	creditCard := CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.	
	
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: dateAndTime now
		registeringOn: salesBook.
		
	cashier checkOut.
	
	^nextTransactionId.
			

	! !
!Store methodsFor: 'checkout' stamp: 'GDH 6/23/2021 18:58:13' prior: 50940417!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 
	
	| cart creditCard cashier salesBook transactionId |
		
	"1) Crear la tarjeta de credito ( y verificar que falle la longitud del numero / nombre vacio ). ok
	2) Que pasa si el id no existe?. ok
	3) que pasa si el id existe? -> se hace el checkout.
	-> se crea el cashier. ok
	-> se le manda el mensaje checkout. ok
	-> se tienen que agregar ISBNXCANTIDAD vendidos a algun arreglo correspondiente a este cartId.
	-> listPurchases debe devolver eso.
	"
	cart := self cartFor: aCartId.

	creditCard := CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.	
	
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: dateAndTime now
		registeringOn: salesBook.
		
	cashier checkOut.
	
	transactionId := nextTransactionId .
	nextTransactionId := nextTransactionId + 1.
	
	^transactionId.
			

	! !
!Store methodsFor: 'checkout' stamp: 'GDH 6/23/2021 18:58:26' prior: 50940450!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 
	
	| cart creditCard cashier salesBook transactionId |
		
	"1) Crear la tarjeta de credito ( y verificar que falle la longitud del numero / nombre vacio ). ok
	2) Que pasa si el id no existe?. ok
	3) que pasa si el id existe? -> se hace el checkout.
	-> se crea el cashier. ok
	-> se le manda el mensaje checkout. ok
	-> se tienen que agregar ISBNXCANTIDAD vendidos a algun arreglo correspondiente a este cartId.
	-> listPurchases debe devolver eso.
	"
	cart := self cartFor: aCartId.

	creditCard := CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.	
	
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: dateAndTime now
		registeringOn: salesBook.
		
	cashier checkOut.
	
	transactionId := nextTransactionId .
	nextTransactionId := nextTransactionId + 1 .
	
	^transactionId.
			

	! !

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'GDH 6/23/2021 18:58:32'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/23/2021 18:58:32'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'GDH 6/23/2021 18:58:32'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'GDH 6/23/2021 18:58:32'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'GDH 6/23/2021 18:58:32'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/23/2021 18:58:32'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/23/2021 18:58:32'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/23/2021 18:58:32'!
PASSED!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/23/2021 18:58:32'!
PASSED!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'GDH 6/23/2021 18:58:32'!
PASSED!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/23/2021 18:58:32'!
ERROR!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/23/2021 18:58:32'!
ERROR!

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'GDH 6/23/2021 18:59:02'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/23/2021 18:59:02'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'GDH 6/23/2021 18:59:02'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'GDH 6/23/2021 18:59:02'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'GDH 6/23/2021 18:59:02'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/23/2021 18:59:02'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/23/2021 18:59:02'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/23/2021 18:59:02'!
PASSED!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/23/2021 18:59:02'!
PASSED!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'GDH 6/23/2021 18:59:02'!
PASSED!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/23/2021 18:59:02'!
ERROR!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/23/2021 18:59:02'!
ERROR!
!Store class methodsFor: 'instance creation' stamp: 'GDH 6/23/2021 19:05:37'!
openStoreOn: anAuthenticator authenticatingWith: aMerchantProcessor processingThrough: aCatalog acceptingItemsFrom: aDateAndTime 

	^Store new initializeAuthenticatingWith: anAuthenticator processingThrough: aMerchantProcessor acceptingItemsFrom: aCatalog on: aDateAndTime.! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/23/2021 19:05:37' prior: 50940333!
createStoreWithBigCatalog

	^Store openStoreOn: self authenticatingWith: self processingThrough: testObjectFactory bigCatalog acceptingItemsFrom: testObjectFactory today .! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GDH 6/23/2021 19:05:37' prior: 50940342!
createStoreWithDefaultCatalog

	^Store openStoreOn: self authenticatingWith: self processingThrough: testObjectFactory defaultCatalog acceptingItemsFrom: testObjectFactory today .! !

!methodRemoval: Store class #createStoreAuthenticatingWith:processingThrough:acceptingItemsFrom:on: stamp: 'GDH 6/23/2021 19:05:37'!
createStoreAuthenticatingWith: anAuthenticator processingThrough: aMerchantProcessor acceptingItemsFrom: aCatalog on: aDateAndTime 

	^Store new initializeAuthenticatingWith: anAuthenticator processingThrough: aMerchantProcessor acceptingItemsFrom: aCatalog on: aDateAndTime.!
!Store class methodsFor: 'instance creation' stamp: 'GDH 6/23/2021 19:06:01' prior: 50940613!
openStoreOn: aDateAndTime authenticatingWith: anAuthenticator processingThrough: aMerchantProcessor acceptingItemsFrom:  aCatalog

	^Store new initializeAuthenticatingWith: anAuthenticator processingThrough: aMerchantProcessor acceptingItemsFrom: aCatalog on: aDateAndTime.! !
!StoreTest methodsFor: 'creation' stamp: 'GDH 6/23/2021 19:06:48' prior: 50940625!
createStoreWithBigCatalog

	^Store openStoreOn: testObjectFactory today authenticatingWith: self processingThrough: self acceptingItemsFrom: testObjectFactory bigCatalog .! !
!StoreTest methodsFor: 'creation' stamp: 'GDH 6/23/2021 19:07:10' prior: 50940634!
createStoreWithDefaultCatalog

	^Store openStoreOn: testObjectFactory today authenticatingWith: self processingThrough: self acceptingItemsFrom: testObjectFactory defaultCatalog .! !
!StoreTest methodsFor: 'creation' stamp: 'GDH 6/23/2021 19:07:21' prior: 50940677!
createStoreWithDefaultCatalog

	^Store openStoreOn: testObjectFactory today 
			authenticatingWith: self 
			processingThrough: self 
			acceptingItemsFrom: testObjectFactory defaultCatalog .! !
!StoreTest methodsFor: 'creation' stamp: 'GDH 6/23/2021 19:07:30' prior: 50940668!
createStoreWithBigCatalog

	^Store openStoreOn: testObjectFactory today 
			authenticatingWith: self 
			processingThrough: self 
			acceptingItemsFrom: testObjectFactory bigCatalog .! !

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'GDH 6/23/2021 19:08:04'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/23/2021 19:08:04'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'GDH 6/23/2021 19:08:04'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'GDH 6/23/2021 19:08:04'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'GDH 6/23/2021 19:08:04'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/23/2021 19:08:04'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/23/2021 19:08:04'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/23/2021 19:08:04'!
PASSED!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/23/2021 19:08:04'!
PASSED!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'GDH 6/23/2021 19:08:04'!
PASSED!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/23/2021 19:08:04'!
ERROR!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/23/2021 19:08:04'!
ERROR!
!Store methodsFor: 'checkout' stamp: 'GDH 6/23/2021 19:08:14' prior: 50940486!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 
	
	| cart creditCard cashier salesBook transactionId |
		
	"1) Crear la tarjeta de credito ( y verificar que falle la longitud del numero / nombre vacio ). ok
	2) Que pasa si el id no existe?. ok
	3) que pasa si el id existe? -> se hace el checkout.
	-> se crea el cashier. ok
	-> se le manda el mensaje checkout. ok
	-> se tienen que agregar ISBNXCANTIDAD vendidos a algun arreglo correspondiente a este cartId.
	-> listPurchases debe devolver eso.
	"
	cart := self cartFor: aCartId.

	creditCard := CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.	
	
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: dateAndTime
		registeringOn: salesBook.
		
	cashier checkOut.
	
	transactionId := nextTransactionId .
	nextTransactionId := nextTransactionId + 1 .
	
	^transactionId.
			

	! !

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'GDH 6/23/2021 19:08:27'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/23/2021 19:08:27'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'GDH 6/23/2021 19:08:27'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'GDH 6/23/2021 19:08:27'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'GDH 6/23/2021 19:08:27'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/23/2021 19:08:27'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/23/2021 19:08:27'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/23/2021 19:08:27'!
PASSED!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/23/2021 19:08:27'!
PASSED!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'GDH 6/23/2021 19:08:27'!
PASSED!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/23/2021 19:08:27'!
ERROR!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/23/2021 19:08:27'!
ERROR!
!Store methodsFor: 'initialization' stamp: 'GDH 6/23/2021 19:09:17' prior: 50940308!
initializeAuthenticatingWith: anAuthenticator processingThrough: aMerchantProcessor acceptingItemsFrom: aCatalog on: aDateAndTime .

	nextCartId := 1.
	nextTransactionId := 1.
	cartsById := Dictionary new.
	
	authenticator := anAuthenticator.
	merchantProcessor := aMerchantProcessor.
	catalog := aCatalog.
	dateAndTime := aDateAndTime.! !

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'GDH 6/23/2021 19:09:22'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/23/2021 19:09:22'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'GDH 6/23/2021 19:09:22'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'GDH 6/23/2021 19:09:22'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'GDH 6/23/2021 19:09:22'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/23/2021 19:09:22'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/23/2021 19:09:22'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/23/2021 19:09:22'!
PASSED!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/23/2021 19:09:22'!
PASSED!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'GDH 6/23/2021 19:09:22'!
PASSED!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/23/2021 19:09:22'!
PASSED!
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 19:15:35'!
test12CheckingOutAndListingPurchasesShouldReturnListOfSales
	
	| store transactionId1 cartId1 isbn transactionId2 cartId2 |
		
	store := self createStoreWithDefaultCatalog.
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	cartId1 := store createCartFor: 'validUserId' using: 'validPassword' .
	cartId2 := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	store add: 1 of: isbn to: cartId1.
	store add: 1 of: isbn to: cartId2.
				
	transactionId1 := store checkOut: cartId1 
					  forCco: 'Matias' 
					  withCcn: 1111222233334444 
					  expiringOn: testObjectFactory nextYear.
	
	transactionId2 := store checkOut: cartId2 
					  forCco: 'Matias' 
					  withCcn: 1111222233334444 
					  expiringOn: testObjectFactory nextYear.
					
	self deny: transactionId1 = transactionId2.
					
		
	! !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 19:40:33' prior: 50940887!
test12CheckingOutAndListingPurchasesShouldReturnListOfSales
	
	| store transactionId cartId isbn |
		
	store := self createStoreWithDefaultCatalog.
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	cartId := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	store add: 1 of: isbn to: cartId.
				
	transactionId := store checkOut: cartId 
					  forCco: 'Matias' 
					  withCcn: 1111222233334444 
					  expiringOn: testObjectFactory nextYear.
					
		
	! !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 19:40:56' prior: 50940919!
test12CheckingOutAndListingPurchasesShouldReturnListOfSales
	
	| store cartId isbn |
		
	store := self createStoreWithDefaultCatalog.
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	cartId := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	store add: 1 of: isbn to: cartId.
				
	store checkOut: cartId 
			forCco: 'Matias' 
			withCcn: 1111222233334444 
			expiringOn: testObjectFactory nextYear.
					
		
	! !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 19:49:29' prior: 50940941!
test12CheckingOutAndListingPurchasesShouldReturnListOfSales
	
	| store cartId isbn clientId clientPassword|
		
	store := self createStoreWithDefaultCatalog.
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	
	clientId := 'validUserId'.
	clientPassword := 'validPassword'.
	cartId := store createCartFor: clientId using: clientPassword .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	store add: 1 of: isbn to: cartId.
				
	store checkOut: cartId 
			forCco: 'Matias' 
			withCcn: 1111222233334444 
			expiringOn: testObjectFactory nextYear.
	
	store purchasesListOf: clientId using: clientPassword.
	! !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 19:49:37' prior: 50940961!
test12CheckingOutAndListingPurchasesShouldReturnListOfSales
	
	| store cartId isbn clientId clientPassword|
		
	store := self createStoreWithDefaultCatalog.
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	clientId := 'validUserId'.
	clientPassword := 'validPassword'.
	cartId := store createCartFor: clientId using: clientPassword .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	store add: 1 of: isbn to: cartId.
				
	store checkOut: cartId 
			forCco: 'Matias' 
			withCcn: 1111222233334444 
			expiringOn: testObjectFactory nextYear.
	
	store purchasesListOf: clientId using: clientPassword.
	! !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 19:51:44' prior: 50940985!
test12CheckingOutAndListingPurchasesShouldReturnListOfSales
	
	| store cartId isbn clientId clientPassword expectedSales clientSales |
	
	"expectedSales := OrderedCollection with: Sale of: ''."
		
	store := self createStoreWithDefaultCatalog.
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	clientId := 'validUserId'.
	clientPassword := 'validPassword'.
	cartId := store createCartFor: clientId using: clientPassword .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	store add: 1 of: isbn to: cartId.
				
	store checkOut: cartId 
			forCco: 'Matias' 
			withCcn: 1111222233334444 
			expiringOn: testObjectFactory nextYear.
	
	clientSales := store purchasesListOf: clientId using: clientPassword.
	
	self assert: clientSales = expectedSales .! !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 19:58:47' prior: 50941009!
test12CheckingOutAndListingPurchasesShouldReturnListOfSales
	
	| store cartId isbn clientId clientPassword expectedSales clientSales |
	
	expectedSales := OrderedCollection with: (Sale of: '').
		
	store := self createStoreWithDefaultCatalog.
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	clientId := 'validUserId'.
	clientPassword := 'validPassword'.
	cartId := store createCartFor: clientId using: clientPassword .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	store add: 1 of: isbn to: cartId.
				
	store checkOut: cartId 
			forCco: 'Matias' 
			withCcn: 1111222233334444 
			expiringOn: testObjectFactory nextYear.
	
	clientSales := store purchasesListOf: clientId using: clientPassword.
	
	self assert: clientSales = expectedSales .! !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 20:01:30' prior: 50941038!
test12CheckingOutAndListingPurchasesShouldReturnListOfSales
	
	| store cartId isbn clientId clientPassword expectedSales clientSales |
			
	store := self createStoreWithDefaultCatalog.
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	clientId := 'validUserId'.
	clientPassword := 'validPassword'.
	cartId := store createCartFor: clientId using: clientPassword .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	store add: 1 of: isbn to: cartId.
	
	expectedSales := OrderedCollection with: ( store listCart: cartId ).
				
	store checkOut: cartId 
			forCco: 'Matias' 
			withCcn: 1111222233334444 
			expiringOn: testObjectFactory nextYear.
	
	clientSales := store purchasesListOf: clientId using: clientPassword.
	
	self assert: clientSales = expectedSales .! !

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/23/2021 20:04:23'!
ERROR!
!Store methodsFor: 'accessing' stamp: 'GDH 6/23/2021 20:04:56'!
purchasesListOf: aString using: aString2 
	self shouldBeImplemented.! !

!classDefinition: #Store category: 'TusLibros' stamp: 'GDH 6/23/2021 20:17:36'!
Object subclass: #Store
	instanceVariableNames: 'authenticator nextCartId catalog cartsById merchantProcessor dateAndTime nextTransactionId salesByClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'accessing' stamp: 'GDH 6/23/2021 20:17:29' prior: 50941100!
purchasesListOf: aClientId using: aClientPassword
	
	^salesByClient at: aClientId ifAbsent: [  ]! !

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/23/2021 20:17:43'!
ERROR!
!Store methodsFor: 'initialization' stamp: 'GDH 6/23/2021 20:18:05' prior: 50940832!
initializeAuthenticatingWith: anAuthenticator processingThrough: aMerchantProcessor acceptingItemsFrom: aCatalog on: aDateAndTime .

	nextCartId := 1.
	nextTransactionId := 1.
	cartsById := Dictionary new.
	salesByClient := Dictionary new.
	
	authenticator := anAuthenticator.
	merchantProcessor := aMerchantProcessor.
	catalog := aCatalog.
	dateAndTime := aDateAndTime.! !

Object subclass: #Store
	instanceVariableNames: 'authenticator nextCartId catalog cartsById merchantProcessor dateAndTime nextTransactionId sales'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Store category: 'TusLibros' stamp: 'GDH 6/23/2021 20:23:38'!
Object subclass: #Store
	instanceVariableNames: 'authenticator nextCartId catalog cartsById merchantProcessor dateAndTime nextTransactionId sales'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'accessing' stamp: 'GDH 6/23/2021 20:23:51' prior: 50941115!
purchasesListOf: aClientId using: aClientPassword
	
	^sales! !
!Store methodsFor: 'checkout' stamp: 'GDH 6/23/2021 20:24:13' prior: 50940750!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 
	
	| cart creditCard cashier salesBook transactionId |
		
	"1) Crear la tarjeta de credito ( y verificar que falle la longitud del numero / nombre vacio ). ok
	2) Que pasa si el id no existe?. ok
	3) que pasa si el id existe? -> se hace el checkout.
	-> se crea el cashier. ok
	-> se le manda el mensaje checkout. ok
	-> se tienen que agregar ISBNXCANTIDAD vendidos a algun arreglo correspondiente a este cartId.
	-> listPurchases debe devolver eso.
	"
	cart := self cartFor: aCartId.

	creditCard := CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.	
	 
	cashier := Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: dateAndTime
		registeringOn: sales.
		
	cashier checkOut.
	
	transactionId := nextTransactionId .
	nextTransactionId := nextTransactionId + 1 .
	
	^transactionId.
			

	! !
!Store methodsFor: 'checkout' stamp: 'GDH 6/23/2021 20:24:18' prior: 50941161!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 
	
	| cart creditCard cashier transactionId |
		
	"1) Crear la tarjeta de credito ( y verificar que falle la longitud del numero / nombre vacio ). ok
	2) Que pasa si el id no existe?. ok
	3) que pasa si el id existe? -> se hace el checkout.
	-> se crea el cashier. ok
	-> se le manda el mensaje checkout. ok
	-> se tienen que agregar ISBNXCANTIDAD vendidos a algun arreglo correspondiente a este cartId.
	-> listPurchases debe devolver eso.
	"
	cart := self cartFor: aCartId.

	creditCard := CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.	
	 
	cashier := Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: dateAndTime
		registeringOn: sales.
		
	cashier checkOut.
	
	transactionId := nextTransactionId .
	nextTransactionId := nextTransactionId + 1 .
	
	^transactionId.
			

	! !
!Store methodsFor: 'initialization' stamp: 'GDH 6/23/2021 20:24:25' prior: 50941125!
initializeAuthenticatingWith: anAuthenticator processingThrough: aMerchantProcessor acceptingItemsFrom: aCatalog on: aDateAndTime .

	nextCartId := 1.
	nextTransactionId := 1.
	cartsById := Dictionary new.
	sales := Dictionary new.
	
	authenticator := anAuthenticator.
	merchantProcessor := aMerchantProcessor.
	catalog := aCatalog.
	dateAndTime := aDateAndTime.! !
!Store methodsFor: 'initialization' stamp: 'GDH 6/23/2021 20:24:28' prior: 50941229!
initializeAuthenticatingWith: anAuthenticator processingThrough: aMerchantProcessor acceptingItemsFrom: aCatalog on: aDateAndTime .

	nextCartId := 1.
	nextTransactionId := 1.
	cartsById := Dictionary new.
	sales := OrderedCollection new.
	
	authenticator := anAuthenticator.
	merchantProcessor := aMerchantProcessor.
	catalog := aCatalog.
	dateAndTime := aDateAndTime.! !
!Cashier methodsFor: 'checkout - private' stamp: 'GDH 6/23/2021 20:25:26' prior: 50939411!
createSale

	^ Sale of: cart items costing: total
! !
!Sale class methodsFor: 'instance creation' stamp: 'GDH 6/23/2021 20:26:26'!
of: anItemsCollection costing: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal andItems: anItemsCollection ! !

!methodRemoval: Sale class #of: stamp: 'GDH 6/23/2021 20:26:34'!
of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal !
!Sale class methodsFor: 'instance creation' stamp: 'GDH 6/23/2021 20:27:49' prior: 50941264!
of: aCart costing: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal andCart: aCart ! !
!Cashier methodsFor: 'checkout - private' stamp: 'GDH 6/23/2021 20:28:06' prior: 50941259!
createSale

	^ Sale of: cart costing: total
! !

!classDefinition: #Sale category: 'TusLibros' stamp: 'GDH 6/23/2021 20:35:35'!
Object subclass: #Sale
	instanceVariableNames: 'total cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'GDH 6/23/2021 20:35:34'!
initializeTotal: aTotal andCart: aCart

	total := aTotal.
	cart := aCart.! !

!methodRemoval: Sale #initializeTotal: stamp: 'GDH 6/23/2021 20:35:37'!
initializeTotal: aTotal

	total := aTotal !
!Sale methodsFor: 'items' stamp: 'GDH 6/23/2021 20:35:52'!
items
	
	^cart items ! !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 20:39:11' prior: 50941067!
test12CheckingOutAndListingPurchasesShouldReturnListOfSales
	
	| store cartId isbn clientId clientPassword expectedSales clientSales |
			
	store := self createStoreWithDefaultCatalog.
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	clientId := 'validUserId'.
	clientPassword := 'validPassword'.
	cartId := store createCartFor: clientId using: clientPassword .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	store add: 1 of: isbn to: cartId.
	
	expectedSales := OrderedCollection with: ( store listCart: cartId ) -> 10.
				
	store checkOut: cartId 
			forCco: 'Matias' 
			withCcn: 1111222233334444 
			expiringOn: testObjectFactory nextYear.
	
	clientSales := store purchasesListOf: clientId using: clientPassword.
	
	self assert: clientSales = expectedSales .! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'GDH 6/23/2021 20:39:34' prior: 50939734!
bigCatalog
	
	^ Dictionary new
		add: 'libro1'->1;
		add: 'libro2'->2;
		yourself ! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'GDH 6/23/2021 20:40:15'!
secondItemSellByTheStorePrice
	
	^20! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'GDH 6/23/2021 20:40:26' prior: 50941337!
bigCatalog
	
	^ Dictionary new
		add: 'libro1'->1;
		add: 'libro2'->2;
		yourself ! !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 20:40:52' prior: 50941307!
test12CheckingOutAndListingPurchasesShouldReturnListOfSales
	
	| store cartId isbn clientId clientPassword expectedSales clientSales |
			
	store := self createStoreWithDefaultCatalog.
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	clientId := 'validUserId'.
	clientPassword := 'validPassword'.
	cartId := store createCartFor: clientId using: clientPassword .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	store add: 1 of: isbn to: cartId.
	
	expectedSales := OrderedCollection with: ( store listCart: cartId ) -> testObjectFactory itemSellByTheStorePrice .
				
	store checkOut: cartId 
			forCco: 'Matias' 
			withCcn: 1111222233334444 
			expiringOn: testObjectFactory nextYear.
	
	clientSales := store purchasesListOf: clientId using: clientPassword.
	
	self assert: clientSales = expectedSales .! !
!Store methodsFor: 'accessing' stamp: 'GDH 6/23/2021 20:43:39' prior: 50941156!
purchasesListOf: aClientId using: aClientPassword
	
	^sales! !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 20:43:50' prior: 50941354!
test12CheckingOutAndListingPurchasesShouldReturnListOfSales
	
	| store cartId isbn clientId clientPassword expectedSales clientSales |
			
	store := self createStoreWithDefaultCatalog.
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	clientId := 'validUserId'.
	clientPassword := 'validPassword'.
	cartId := store createCartFor: clientId using: clientPassword .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	store add: 1 of: isbn to: cartId.
	
	expectedSales := OrderedCollection with: ( store listCart: cartId ).
				
	store checkOut: cartId 
			forCco: 'Matias' 
			withCcn: 1111222233334444 
			expiringOn: testObjectFactory nextYear.
	
	clientSales := store purchasesListOf: clientId using: clientPassword.
	
	self assert: clientSales = expectedSales .! !

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/23/2021 20:43:52'!
FAILURE!

store purchasesListOf: clientId using: clientPassword!
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 20:46:43' prior: 50941390!
test12CheckingOutAndListingPurchasesShouldReturnListOfSales
	
	| store cartId isbn clientId clientPassword expectedSales clientSales |
			
	store := self createStoreWithDefaultCatalog.
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	clientId := 'validUserId'.
	clientPassword := 'validPassword'.
	cartId := store createCartFor: clientId using: clientPassword .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	store add: 1 of: isbn to: cartId.
	
	expectedSales := OrderedCollection with: ( store listCart: cartId ) -> testObjectFactory itemSellByTheStore .
				
	store checkOut: cartId 
			forCco: 'Matias' 
			withCcn: 1111222233334444 
			expiringOn: testObjectFactory nextYear.
	
	clientSales := store purchasesListOf: clientId using: clientPassword.
	
	self assert: clientSales = expectedSales .! !
!Store methodsFor: 'accessing' stamp: 'GDH 6/23/2021 20:48:05' prior: 50941385!
purchasesListOf: aClientId using: aClientPassword
	
	^(sales collect: [ :aSale | aSale items ]) -> (sales collect: [ :aSale | aSale total ] sum)! !

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'GDH 6/23/2021 20:48:06'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/23/2021 20:48:06'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'GDH 6/23/2021 20:48:06'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'GDH 6/23/2021 20:48:06'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'GDH 6/23/2021 20:48:06'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/23/2021 20:48:06'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/23/2021 20:48:06'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/23/2021 20:48:06'!
PASSED!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/23/2021 20:48:06'!
PASSED!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'GDH 6/23/2021 20:48:06'!
PASSED!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/23/2021 20:48:06'!
PASSED!

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/23/2021 20:48:06'!
ERROR!

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/23/2021 20:48:06'!
ERROR!
!Store methodsFor: 'accessing' stamp: 'GDH 6/23/2021 20:48:15' prior: 50941456!
purchasesListOf: aClientId using: aClientPassword
	
	^(sales collect: [ :aSale | aSale items ]) -> ((sales collect: [ :aSale | aSale total ]) sum)! !

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'GDH 6/23/2021 20:48:18'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/23/2021 20:48:18'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'GDH 6/23/2021 20:48:18'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'GDH 6/23/2021 20:48:18'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'GDH 6/23/2021 20:48:18'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/23/2021 20:48:18'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/23/2021 20:48:18'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/23/2021 20:48:18'!
PASSED!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/23/2021 20:48:18'!
PASSED!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'GDH 6/23/2021 20:48:18'!
PASSED!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/23/2021 20:48:18'!
PASSED!

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/23/2021 20:48:18'!
FAILURE!

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/23/2021 20:48:18'!
FAILURE!

OrderedCollection with: ( store listCart: cartId ) -> testObjectFactory itemSellByTheStore!
!Store methodsFor: 'accessing' stamp: 'GDH 6/23/2021 20:50:35' prior: 50941513!
purchasesListOf: aClientId using: aClientPassword
	
	^( ( sales collect: [ :aSale | aSale items ] ) flatten ) -> ( ( sales collect: [ :aSale | aSale total ] ) sum )! !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 20:50:51' prior: 50941425!
test12CheckingOutAndListingPurchasesShouldReturnListOfSales
	
	| store cartId isbn clientId clientPassword expectedSales clientSales |
			
	store := self createStoreWithDefaultCatalog.
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	clientId := 'validUserId'.
	clientPassword := 'validPassword'.
	cartId := store createCartFor: clientId using: clientPassword .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	store add: 1 of: isbn to: cartId.
	
	expectedSales := store listCart: cartId -> testObjectFactory itemSellByTheStore .
				
	store checkOut: cartId 
			forCco: 'Matias' 
			withCcn: 1111222233334444 
			expiringOn: testObjectFactory nextYear.
	
	clientSales := store purchasesListOf: clientId using: clientPassword.
	
	self assert: clientSales = expectedSales .! !

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/23/2021 20:50:52'!
ERROR!
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 20:51:20' prior: 50941581!
test12CheckingOutAndListingPurchasesShouldReturnListOfSales
	
	| store cartId isbn clientId clientPassword expectedSales clientSales |
			
	store := self createStoreWithDefaultCatalog.
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	clientId := 'validUserId'.
	clientPassword := 'validPassword'.
	cartId := store createCartFor: clientId using: clientPassword .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	store add: 1 of: isbn to: cartId.
	
	expectedSales := (store listCart: cartId) -> testObjectFactory itemSellByTheStore .
				
	store checkOut: cartId 
			forCco: 'Matias' 
			withCcn: 1111222233334444 
			expiringOn: testObjectFactory nextYear.
	
	clientSales := store purchasesListOf: clientId using: clientPassword.
	
	self assert: clientSales = expectedSales .! !

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/23/2021 20:51:21'!
FAILURE!

(store listCart: cartId) -> testObjectFactory itemSellByTheStore!
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 20:51:36' prior: 50941615!
test12CheckingOutAndListingPurchasesShouldReturnListOfSales
	
	| store cartId isbn clientId clientPassword expectedSales clientSales |
			
	store := self createStoreWithDefaultCatalog.
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	clientId := 'validUserId'.
	clientPassword := 'validPassword'.
	cartId := store createCartFor: clientId using: clientPassword .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	store add: 1 of: isbn to: cartId.
	
	expectedSales := (store listCart: cartId) -> testObjectFactory itemSellByTheStorePrice .
				
	store checkOut: cartId 
			forCco: 'Matias' 
			withCcn: 1111222233334444 
			expiringOn: testObjectFactory nextYear.
	
	clientSales := store purchasesListOf: clientId using: clientPassword.
	
	self assert: clientSales = expectedSales .! !

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/23/2021 20:51:40'!
PASSED!

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'GDH 6/23/2021 20:51:40'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/23/2021 20:51:40'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'GDH 6/23/2021 20:51:40'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'GDH 6/23/2021 20:51:40'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'GDH 6/23/2021 20:51:40'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/23/2021 20:51:40'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/23/2021 20:51:40'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/23/2021 20:51:40'!
PASSED!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/23/2021 20:51:40'!
PASSED!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'GDH 6/23/2021 20:51:40'!
PASSED!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/23/2021 20:51:40'!
PASSED!

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/23/2021 20:51:40'!
PASSED!
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 20:56:37'!
test13ListingPurchasesWithInvalidCredentialsShouldRaiseAnError
	
	| store cartId |
			
	store := self createStoreWithDefaultCatalog.
	authenticateBehaviour := [ :aClientId :aClientPassword | false ].
	
	self should: [ store purchasesListOf: 'validClientId' using: 'invalidPassword']
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store invalidCredentialsErrorMessageDescription ! !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 20:56:50' prior: 50941730!
test13ListingPurchasesWithInvalidCredentialsShouldRaiseAnError
	
	| store |
			
	store := self createStoreWithDefaultCatalog.
	authenticateBehaviour := [ :aClientId :aClientPassword | false ].
	
	self should: [ store purchasesListOf: 'validClientId' using: 'invalidPassword']
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store invalidCredentialsErrorMessageDescription ! !

!testRun: #StoreTest #test13ListingPurchasesWithInvalidCredentialsShouldRaiseAnError stamp: 'GDH 6/23/2021 20:56:54'!
FAILURE!
!Store methodsFor: 'accessing' stamp: 'GDH 6/23/2021 20:57:17' prior: 50941573!
purchasesListOf: aClientId using: aClientPassword

	self assertAuthenticationFor: aClientId using: aClientId 
	
	^( ( sales collect: [ :aSale | aSale items ] ) flatten ) -> ( ( sales collect: [ :aSale | aSale total ] ) sum )! !

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'GDH 6/23/2021 20:57:20'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/23/2021 20:57:20'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'GDH 6/23/2021 20:57:20'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'GDH 6/23/2021 20:57:20'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'GDH 6/23/2021 20:57:20'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/23/2021 20:57:20'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/23/2021 20:57:20'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/23/2021 20:57:20'!
PASSED!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/23/2021 20:57:20'!
PASSED!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'GDH 6/23/2021 20:57:20'!
PASSED!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/23/2021 20:57:20'!
PASSED!

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/23/2021 20:57:20'!
ERROR!

!testRun: #StoreTest #test13ListingPurchasesWithInvalidCredentialsShouldRaiseAnError stamp: 'GDH 6/23/2021 20:57:20'!
ERROR!
!Store methodsFor: 'accessing' stamp: 'GDH 6/23/2021 20:57:37' prior: 50941764!
purchasesListOf: aClientId using: aClientPassword

	self assertAuthenticationFor: aClientId using: aClientId
	
	^( ( sales collect: [ :aSale | aSale items ] ) flatten ) -> ( ( sales collect: [ :aSale | aSale total ] ) sum )! !

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/23/2021 20:57:49'!
ERROR!
!Store methodsFor: 'accessing' stamp: 'GDH 6/23/2021 20:57:58' prior: 50941824!
purchasesListOf: aClientId using: aClientPassword

	self assertAuthenticationFor: aClientId using: aClientId.
	
	^( ( sales collect: [ :aSale | aSale items ] ) flatten ) -> ( ( sales collect: [ :aSale | aSale total ] ) sum )! !

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/23/2021 20:58:00'!
PASSED!

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'GDH 6/23/2021 20:58:00'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/23/2021 20:58:00'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'GDH 6/23/2021 20:58:00'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'GDH 6/23/2021 20:58:00'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'GDH 6/23/2021 20:58:00'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/23/2021 20:58:00'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/23/2021 20:58:00'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/23/2021 20:58:00'!
PASSED!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/23/2021 20:58:00'!
PASSED!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'GDH 6/23/2021 20:58:00'!
PASSED!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/23/2021 20:58:00'!
PASSED!

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/23/2021 20:58:00'!
PASSED!

!testRun: #StoreTest #test13ListingPurchasesWithInvalidCredentialsShouldRaiseAnError stamp: 'GDH 6/23/2021 20:58:00'!
PASSED!
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 20:59:28'!
test13ListingPurchasesOfClientWithoutPurchasesShouldRaiseAnError
	
	| store |
			
	store := self createStoreWithDefaultCatalog.
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	self should: [ store purchasesListOf: 'validClientId' using: 'validPassword']
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store userWithoutPurchasesErrorMessageDescription ! !
!Store class methodsFor: 'exceptions' stamp: 'GDH 6/23/2021 20:59:50'!
clientWithoutPurchasesErrorMessageDescription
	^'Client has no purchases in the store'! !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 21:00:08'!
test14ListingPurchasesOfClientWithoutPurchasesShouldRaiseAnError
	
	| store |
			
	store := self createStoreWithDefaultCatalog.
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	self should: [ store purchasesListOf: 'validClientId' using: 'validPassword']
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store userWithoutPurchasesErrorMessageDescription ! !

!methodRemoval: StoreTest #test13ListingPurchasesOfClientWithoutPurchasesShouldRaiseAnError stamp: 'GDH 6/23/2021 21:00:08'!
test13ListingPurchasesOfClientWithoutPurchasesShouldRaiseAnError
	
	| store |
			
	store := self createStoreWithDefaultCatalog.
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	self should: [ store purchasesListOf: 'validClientId' using: 'validPassword']
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store userWithoutPurchasesErrorMessageDescription !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 21:00:15' prior: 50941921!
test14ListingPurchasesOfClientWithoutPurchasesShouldRaiseAnError
	
	| store |
			
	store := self createStoreWithDefaultCatalog.
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	self should: [ store purchasesListOf: 'validClientId' using: 'validPassword']
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store clientWithoutPurchasesErrorMessageDescription ! !

!testRun: #StoreTest #test14ListingPurchasesOfClientWithoutPurchasesShouldRaiseAnError stamp: 'GDH 6/23/2021 21:00:29'!
FAILURE!
!Store methodsFor: 'accessing' stamp: 'GDH 6/23/2021 21:01:15' prior: 50941838!
purchasesListOf: aClientId using: aClientPassword

	self assertAuthenticationFor: aClientId using: aClientId.
	
	sales ifEmpty: [ self error: self class clientWithoutPurchasesErrorMessageDescription ].
	
	^( ( sales collect: [ :aSale | aSale items ] ) flatten ) -> ( ( sales collect: [ :aSale | aSale total ] ) sum )! !

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'GDH 6/23/2021 21:01:17'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/23/2021 21:01:17'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'GDH 6/23/2021 21:01:17'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'GDH 6/23/2021 21:01:17'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'GDH 6/23/2021 21:01:17'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/23/2021 21:01:17'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/23/2021 21:01:17'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/23/2021 21:01:17'!
PASSED!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/23/2021 21:01:17'!
PASSED!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'GDH 6/23/2021 21:01:17'!
PASSED!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/23/2021 21:01:17'!
PASSED!

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/23/2021 21:01:17'!
PASSED!

!testRun: #StoreTest #test13ListingPurchasesWithInvalidCredentialsShouldRaiseAnError stamp: 'GDH 6/23/2021 21:01:17'!
PASSED!

!testRun: #StoreTest #test14ListingPurchasesOfClientWithoutPurchasesShouldRaiseAnError stamp: 'GDH 6/23/2021 21:01:17'!
PASSED!
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 21:01:46'!
test15ListingPurchasesOfDifferentClientsShouldReturnDifferentListsOfSales
	
	| store |
			
	store := self createStoreWithDefaultCatalog.
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	
	self should: [ store purchasesListOf: 'validClientId' using: 'validPassword']
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store clientWithoutPurchasesErrorMessageDescription ! !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 21:03:49' prior: 50942037!
test15ListingPurchasesOfDifferentClientsShouldReturnDifferentListsOfSales
	
	| store transactionId1 cartId1 isbn transactionId2 cartId2 |
		
	store := self createStoreWithDefaultCatalog.
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	cartId1 := store createCartFor: 'validUserId' using: 'validPassword' .
	cartId2 := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	store add: 1 of: isbn to: cartId1.
	store add: 2 of: isbn to: cartId2.
				
	store checkOut: cartId1 
			forCco: 'Matias' 
			withCcn: 1111222233334444 
			expiringOn: testObjectFactory nextYear.
	
	store checkOut: cartId2 
			forCco: 'Matias' 
			withCcn: 1111222233334444 
			expiringOn: testObjectFactory nextYear.! !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 21:03:56' prior: 50942052!
test15ListingPurchasesOfDifferentClientsShouldReturnDifferentListsOfSales
	
	| store cartId1 isbn cartId2 |
		
	store := self createStoreWithDefaultCatalog.
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	cartId1 := store createCartFor: 'validUserId' using: 'validPassword' .
	cartId2 := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	store add: 1 of: isbn to: cartId1.
	store add: 2 of: isbn to: cartId2.
				
	store checkOut: cartId1 
			forCco: 'Matias' 
			withCcn: 1111222233334444 
			expiringOn: testObjectFactory nextYear.
	
	store checkOut: cartId2 
			forCco: 'Matias' 
			withCcn: 1111222233334444 
			expiringOn: testObjectFactory nextYear.! !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 21:04:15' prior: 50942081!
test15ListingPurchasesOfDifferentClientsShouldReturnDifferentListsOfSales
	
	| store cartId1 cartId2 isbn |
		
	store := self createStoreWithDefaultCatalog.
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	cartId1 := store createCartFor: 'validUserId' using: 'validPassword' .
	cartId2 := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	store add: 1 of: isbn to: cartId1.
	store add: 2 of: isbn to: cartId2.
				
	store checkOut: cartId1 
			forCco: 'Matias' 
			withCcn: 1111222233334444 
			expiringOn: testObjectFactory nextYear.
	
	store checkOut: cartId2 
			forCco: 'Matias' 
			withCcn: 1111222233334444 
			expiringOn: testObjectFactory nextYear.
			
	! !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 21:05:08' prior: 50942109!
test15ListingPurchasesOfDifferentClientsShouldReturnDifferentListsOfSales
	
	| store cartId1 cartId2 client1Sales client2Sales isbn |
		
	store := self createStoreWithDefaultCatalog.
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	cartId1 := store createCartFor: 'validUserId1' using: 'validPassword1' .
	cartId2 := store createCartFor: 'validUserId2' using: 'validPassword2' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	store add: 1 of: isbn to: cartId1.
	store add: 2 of: isbn to: cartId2.
				
	store checkOut: cartId1 
			forCco: 'Matias' 
			withCcn: 1111222233334444 
			expiringOn: testObjectFactory nextYear.
	
	store checkOut: cartId2 
			forCco: 'Matias' 
			withCcn: 1111222233334444 
			expiringOn: testObjectFactory nextYear.
			
	! !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 21:42:10' prior: 50942137!
test15ListingPurchasesOfDifferentClientsShouldReturnDifferentListsOfSales
	
	| store cartId1 cartId2 client1Sales client2Sales client1 client2 client1Password client2Password isbn |
		
	store := self createStoreWithDefaultCatalog.
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	client1 := 'validUserId1'.
	client2 := 'validUserId2'.
	client1Password :=  'validPassword1'.
	client2Password :=  'validPassword2'.
		
	cartId1 := store createCartFor: client1 using: client1Password .
	cartId2 := store createCartFor: client2 using: client2Password .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	store add: 1 of: isbn to: cartId1.
	store add: 2 of: isbn to: cartId2.
				
	store checkOut: cartId1 
			forCco: 'Matias' 
			withCcn: 1111222233334444 
			expiringOn: testObjectFactory nextYear.
	
	store checkOut: cartId2 
			forCco: 'Matias' 
			withCcn: 1111222233334444 
			expiringOn: testObjectFactory nextYear.
			
	client1Sales := store purchasesListOf: client1 using: client1Password .
	client2Sales := store purchasesListOf: client2 using: client2Password .	
	
	self deny: client1Sales = client2Sales .
	! !

!testRun: #StoreTest #test15ListingPurchasesOfDifferentClientsShouldReturnDifferentListsOfSales stamp: 'GDH 6/23/2021 21:42:11'!
FAILURE!

!classDefinition: #Store category: 'TusLibros' stamp: 'GDH 6/23/2021 21:47:59'!
Object subclass: #Store
	instanceVariableNames: 'authenticator nextCartId catalog cartsById merchantProcessor dateAndTime nextTransactionId sales cartsOfClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'initialization' stamp: 'GDH 6/23/2021 21:47:59' prior: 50941244!
initializeAuthenticatingWith: anAuthenticator processingThrough: aMerchantProcessor acceptingItemsFrom: aCatalog on: aDateAndTime .

	nextCartId := 1.
	nextTransactionId := 1.
	cartsById := Dictionary new.
	cartsOfClient := Dictionary new.
	
	authenticator := anAuthenticator.
	merchantProcessor := aMerchantProcessor.
	catalog := aCatalog.
	dateAndTime := aDateAndTime.! !
!Store methodsFor: 'creation' stamp: 'GDH 6/23/2021 21:52:58' prior: 50939605!
createCartFor: aClientId using: aPassword 

	| cartId clientCarts |

	self assertAuthenticationFor: aClientId using: aPassword.
	
	cartId := nextCartId.
	
	nextCartId := nextCartId + 1.
	
	cartsById add: cartId -> (Cart acceptingItemsOf: catalog).
	
	clientCarts := cartsOfClient at: aClientId ifAbsent: [ clientCarts := OrderedCollection new. cartsOfClient at: aClientId put: clientCarts ].
	clientCarts add: cartId.
	cartsOfClient 
	
	^cartId.
	
	! !
!Store methodsFor: 'creation' stamp: 'GDH 6/23/2021 21:53:46' prior: 50942236!
createCartFor: aClientId using: aPassword 

	| cartId clientCarts |

	self assertAuthenticationFor: aClientId using: aPassword.
	
	cartId := nextCartId.
	
	nextCartId := nextCartId + 1.
	
	cartsById add: cartId -> (Cart acceptingItemsOf: catalog).
	
	clientCarts := cartsOfClient at: aClientId ifAbsent: [ clientCarts := OrderedCollection new. cartsOfClient at: aClientId put: clientCarts ].
	clientCarts add: cartId.
	
	^cartId.
	
	! !
!Store methodsFor: 'creation' stamp: 'GDH 6/23/2021 21:55:01' prior: 50942253!
createCartFor: aClientId using: aPassword 

	| cartId clientCarts |

	self assertAuthenticationFor: aClientId using: aPassword.
	
	cartId := nextCartId.
	
	nextCartId := nextCartId + 1.
	
	cartsById add: cartId -> (Cart acceptingItemsOf: catalog).
	
	clientCarts := cartsOfClient at: aClientId ifAbsent: [ cartsOfClient at: aClientId put:  OrderedCollection new. clientCarts := cartsOfClient at: aClientId ].
	clientCarts add: cartId.
	
	^cartId.
	
	! !

!classDefinition: #Store category: 'TusLibros' stamp: 'GDH 6/23/2021 22:12:55'!
Object subclass: #Store
	instanceVariableNames: 'authenticator nextCartId catalog cartsById merchantProcessor dateAndTime nextTransactionId sales cartsOfClient clientByCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Store category: 'TusLibros' stamp: 'GDH 6/23/2021 22:12:56'!
Object subclass: #Store
	instanceVariableNames: 'authenticator nextCartId catalog cartsById merchantProcessor dateAndTime nextTransactionId sales cartsOfClient clientByCartId salesByClientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'initialization' stamp: 'GDH 6/23/2021 22:12:54' prior: 50942221!
initializeAuthenticatingWith: anAuthenticator processingThrough: aMerchantProcessor acceptingItemsFrom: aCatalog on: aDateAndTime .

	nextCartId := 1.
	nextTransactionId := 1.
	cartsById := Dictionary new.
	clientByCartId := Dictionary new.
	salesByClientId := Dictionary new.
	
	authenticator := anAuthenticator.
	merchantProcessor := aMerchantProcessor.
	catalog := aCatalog.
	dateAndTime := aDateAndTime.! !

Object subclass: #Store
	instanceVariableNames: 'authenticator nextCartId catalog cartsById merchantProcessor dateAndTime nextTransactionId sales clientByCartId salesByClientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Store category: 'TusLibros' stamp: 'GDH 6/23/2021 22:13:03'!
Object subclass: #Store
	instanceVariableNames: 'authenticator nextCartId catalog cartsById merchantProcessor dateAndTime nextTransactionId sales clientByCartId salesByClientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'creation' stamp: 'GDH 6/23/2021 22:14:07' prior: 50942270!
createCartFor: aClientId using: aPassword 

	| cartId clientCarts |

	self assertAuthenticationFor: aClientId using: aPassword.
	
	cartId := nextCartId.
	
	nextCartId := nextCartId + 1.
	
	cartsById add: cartId -> (Cart acceptingItemsOf: catalog).
	
	clientByCartId at: cartId put: aClientId .
	
	^cartId.
	
	! !
!Store methodsFor: 'creation' stamp: 'GDH 6/23/2021 22:14:14' prior: 50942342!
createCartFor: aClientId using: aPassword 

	| cartId |

	self assertAuthenticationFor: aClientId using: aPassword.
	
	cartId := nextCartId.
	
	nextCartId := nextCartId + 1.
	
	cartsById add: cartId -> (Cart acceptingItemsOf: catalog).
	
	clientByCartId at: cartId put: aClientId .
	
	^cartId.
	
	! !
!Store methodsFor: 'checkout' stamp: 'GDH 6/23/2021 22:15:55' prior: 50941195!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 
	
	| cart creditCard cashier transactionId clientId |
		
	"1) Crear la tarjeta de credito ( y verificar que falle la longitud del numero / nombre vacio ). ok
	2) Que pasa si el id no existe?. ok
	3) que pasa si el id existe? -> se hace el checkout.
	-> se crea el cashier. ok
	-> se le manda el mensaje checkout. ok
	-> se tienen que agregar ISBNXCANTIDAD vendidos a algun arreglo correspondiente a este cartId.
	-> listPurchases debe devolver eso.
	"
	cart := self cartFor: aCartId.

	creditCard := CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.	
	 
	clientId := clientByCartId at: aCartId .
	
	cashier := Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: dateAndTime
		registeringOn: sales.
		
	cashier checkOut.
	
	transactionId := nextTransactionId .
	nextTransactionId := nextTransactionId + 1 .
	
	^transactionId.
			

	! !
!Store methodsFor: 'checkout' stamp: 'GDH 6/23/2021 22:21:42' prior: 50942367!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 
	
	| cart creditCard cashier transactionId clientId salesOfClient |
		
	"1) Crear la tarjeta de credito ( y verificar que falle la longitud del numero / nombre vacio ). ok
	2) Que pasa si el id no existe?. ok
	3) que pasa si el id existe? -> se hace el checkout.
	-> se crea el cashier. ok
	-> se le manda el mensaje checkout. ok
	-> se tienen que agregar ISBNXCANTIDAD vendidos a algun arreglo correspondiente a este cartId.
	-> listPurchases debe devolver eso.
	"
	cart := self cartFor: aCartId.

	creditCard := CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.	
	 
	clientId := clientByCartId at: aCartId .
	salesOfClient := salesByClientId at: clientId ifAbsent: [ salesByClientId at: clientId put: OrderedCollection new. salesOfClient := salesByClientId at: clientId ]. 
	
	cashier := Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: dateAndTime
		registeringOn: salesOfClient.
		
	cashier checkOut.
	
	transactionId := nextTransactionId .
	nextTransactionId := nextTransactionId + 1 .
	
	^transactionId.
			

	! !

Object subclass: #Store
	instanceVariableNames: 'authenticator nextCartId catalog cartsById merchantProcessor dateAndTime nextTransactionId clientByCartId salesByClientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Store category: 'TusLibros' stamp: 'GDH 6/23/2021 22:22:40'!
Object subclass: #Store
	instanceVariableNames: 'authenticator nextCartId catalog cartsById merchantProcessor dateAndTime nextTransactionId clientByCartId salesByClientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'accessing' stamp: 'GDH 6/23/2021 22:23:36' prior: 50941971!
purchasesListOf: aClientId using: aClientPassword

	| sales |

	self assertAuthenticationFor: aClientId using: aClientId.
	
	sales := salesByClientId at: aClientId .
	
	sales ifEmpty: [ self error: self class clientWithoutPurchasesErrorMessageDescription ].
	
	^( ( sales collect: [ :aSale | aSale items ] ) flatten ) -> ( ( sales collect: [ :aSale | aSale total ] ) sum )! !

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'GDH 6/23/2021 22:23:41'!
PASSED!

!testRun: #StoreTest #test15ListingPurchasesOfDifferentClientsShouldReturnDifferentListsOfSales stamp: 'GDH 6/23/2021 22:23:43'!
PASSED!
!Store methodsFor: 'checkout' stamp: 'GDH 6/23/2021 22:29:01' prior: 50942403!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 
	
	| cart creditCard cashier transactionId clientId salesOfClient |
	
	cart := self cartFor: aCartId.

	creditCard := CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.	
	 
	clientId := clientByCartId at: aCartId .
	salesOfClient := salesByClientId at: clientId ifAbsent: [ salesByClientId at: clientId put: OrderedCollection new. salesOfClient := salesByClientId at: clientId ]. 
	
	cashier := Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: dateAndTime
		registeringOn: salesOfClient.
		
	cashier checkOut.
	
	transactionId := nextTransactionId .
	nextTransactionId := nextTransactionId + 1 .
	
	^transactionId.
			

	! !
!Store methodsFor: 'checkout' stamp: 'GDH 6/23/2021 22:30:33'!
getNextTransactionId
	
	| transactionId |
	
	transactionId := nextTransactionId .
	nextTransactionId := nextTransactionId + 1 .
	
	^transactionId.
			

	! !
!Store methodsFor: 'checkout' stamp: 'GDH 6/23/2021 22:38:31'!
salesOfClientAssociatedWith: aCartId
	
	| clientId salesOfClient |
	
	clientId := clientByCartId at: aCartId .
	salesOfClient := salesByClientId at: clientId ifAbsentPut: [ OrderedCollection new ]. 
	

	! !
!Store methodsFor: 'checkout' stamp: 'GDH 6/23/2021 22:38:39' prior: 50942521!
salesOfClientAssociatedWith: aCartId
	
	| clientId salesOfClient |
	
	clientId := clientByCartId at: aCartId .
	
	^salesByClientId at: clientId ifAbsentPut: [ OrderedCollection new ]. 
	

	! !
!Store methodsFor: 'checkout' stamp: 'GDH 6/23/2021 22:38:43' prior: 50942530!
salesOfClientAssociatedWith: aCartId
	
	| clientId |
	
	clientId := clientByCartId at: aCartId .
	
	^salesByClientId at: clientId ifAbsentPut: [ OrderedCollection new ]. 
	

	! !
!Store methodsFor: 'checkout' stamp: 'GDH 6/23/2021 22:39:51' prior: 50942485!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 
	
	| cart creditCard cashier transactionId clientId |
	
	cart := self cartFor: aCartId.

	creditCard := CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.	
	 
	cashier := Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: dateAndTime
		registeringOn: (self salesOfClientAssociatedWith: aCartId ).
		
	cashier checkOut.
	
	^self getNextTransactionId .
			

	! !
!Store methodsFor: 'checkout' stamp: 'GDH 6/23/2021 22:39:54' prior: 50942548!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 
	
	| cart creditCard cashier clientId |
	
	cart := self cartFor: aCartId.

	creditCard := CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.	
	 
	cashier := Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: dateAndTime
		registeringOn: (self salesOfClientAssociatedWith: aCartId ).
		
	cashier checkOut.
	
	^self getNextTransactionId .
			

	! !
!Store methodsFor: 'checkout' stamp: 'GDH 6/23/2021 22:39:58' prior: 50942569!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 
	
	| cart creditCard cashier |
	
	cart := self cartFor: aCartId.

	creditCard := CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.	
	 
	cashier := Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: dateAndTime
		registeringOn: (self salesOfClientAssociatedWith: aCartId ).
		
	cashier checkOut.
	
	^self getNextTransactionId .
			

	! !

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'GDH 6/23/2021 22:40:02'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/23/2021 22:40:02'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'GDH 6/23/2021 22:40:02'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'GDH 6/23/2021 22:40:02'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'GDH 6/23/2021 22:40:02'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/23/2021 22:40:02'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/23/2021 22:40:02'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/23/2021 22:40:02'!
PASSED!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/23/2021 22:40:02'!
PASSED!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'GDH 6/23/2021 22:40:02'!
PASSED!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/23/2021 22:40:02'!
PASSED!

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/23/2021 22:40:02'!
PASSED!

!testRun: #StoreTest #test13ListingPurchasesWithInvalidCredentialsShouldRaiseAnError stamp: 'GDH 6/23/2021 22:40:02'!
PASSED!

!testRun: #StoreTest #test14ListingPurchasesOfClientWithoutPurchasesShouldRaiseAnError stamp: 'GDH 6/23/2021 22:40:02'!
FAILURE!

!testRun: #StoreTest #test15ListingPurchasesOfDifferentClientsShouldReturnDifferentListsOfSales stamp: 'GDH 6/23/2021 22:40:02'!
PASSED!

!testRun: #StoreTest #test14ListingPurchasesOfClientWithoutPurchasesShouldRaiseAnError stamp: 'GDH 6/23/2021 22:40:02'!
FAILURE!

!testRun: #StoreTest #test14ListingPurchasesOfClientWithoutPurchasesShouldRaiseAnError stamp: 'GDH 6/23/2021 22:40:48'!
FAILURE!

!testRun: #StoreTest #test14ListingPurchasesOfClientWithoutPurchasesShouldRaiseAnError stamp: 'GDH 6/23/2021 22:40:57'!
FAILURE!

!testRun: #StoreTest #test14ListingPurchasesOfClientWithoutPurchasesShouldRaiseAnError stamp: 'GDH 6/23/2021 22:40:57'!
FAILURE!
!Store methodsFor: 'accessing' stamp: 'GDH 6/23/2021 22:42:34' prior: 50942462!
purchasesListOf: aClientId using: aClientPassword

	| sales |

	self assertAuthenticationFor: aClientId using: aClientId.
	
	sales := salesByClientId at: aClientId ifAbsent: [ self error: self class clientWithoutPurchasesErrorMessageDescription ].
	
	sales ifEmpty: [ self error: self class clientWithoutPurchasesErrorMessageDescription ].
	
	^( ( sales collect: [ :aSale | aSale items ] ) flatten ) -> ( ( sales collect: [ :aSale | aSale total ] ) sum )! !

!testRun: #StoreTest #test14ListingPurchasesOfClientWithoutPurchasesShouldRaiseAnError stamp: 'GDH 6/23/2021 22:42:36'!
PASSED!

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'GDH 6/23/2021 22:42:40'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/23/2021 22:42:40'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'GDH 6/23/2021 22:42:40'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'GDH 6/23/2021 22:42:40'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'GDH 6/23/2021 22:42:40'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/23/2021 22:42:40'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/23/2021 22:42:40'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/23/2021 22:42:40'!
PASSED!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/23/2021 22:42:40'!
PASSED!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'GDH 6/23/2021 22:42:40'!
PASSED!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/23/2021 22:42:40'!
PASSED!

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/23/2021 22:42:40'!
PASSED!

!testRun: #StoreTest #test13ListingPurchasesWithInvalidCredentialsShouldRaiseAnError stamp: 'GDH 6/23/2021 22:42:40'!
PASSED!

!testRun: #StoreTest #test14ListingPurchasesOfClientWithoutPurchasesShouldRaiseAnError stamp: 'GDH 6/23/2021 22:42:40'!
PASSED!

!testRun: #StoreTest #test15ListingPurchasesOfDifferentClientsShouldReturnDifferentListsOfSales stamp: 'GDH 6/23/2021 22:42:40'!
PASSED!
!Store methodsFor: 'accessing' stamp: 'GDH 6/23/2021 22:53:08'!
assertSalesOfClientExistAndAreNotEmpty: aClientId
	
	| sales |
	
	sales := salesByClientId at: aClientId ifAbsent: [ self error: self class clientWithoutPurchasesErrorMessageDescription ].
	
	sales ifEmpty: [ self error: self class clientWithoutPurchasesErrorMessageDescription ].! !
!Store methodsFor: 'accessing' stamp: 'GDH 6/23/2021 22:53:56' prior: 50942683!
purchasesListOf: aClientId using: aClientPassword

	| sales |

	self assertAuthenticationFor: aClientId using: aClientId.
	self assertSalesOfClientExistAndAreNotEmpty: aClientId .
	
	sales := salesByClientId at: aClientId.
	
	^( ( sales collect: [ :aSale | aSale items ] ) flatten ) -> ( ( sales collect: [ :aSale | aSale total ] ) sum )! !

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'GDH 6/23/2021 22:54:02'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/23/2021 22:54:02'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'GDH 6/23/2021 22:54:02'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'GDH 6/23/2021 22:54:02'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'GDH 6/23/2021 22:54:02'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/23/2021 22:54:02'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/23/2021 22:54:02'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/23/2021 22:54:02'!
PASSED!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/23/2021 22:54:02'!
PASSED!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'GDH 6/23/2021 22:54:02'!
PASSED!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/23/2021 22:54:02'!
PASSED!

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/23/2021 22:54:02'!
PASSED!

!testRun: #StoreTest #test13ListingPurchasesWithInvalidCredentialsShouldRaiseAnError stamp: 'GDH 6/23/2021 22:54:02'!
PASSED!

!testRun: #StoreTest #test14ListingPurchasesOfClientWithoutPurchasesShouldRaiseAnError stamp: 'GDH 6/23/2021 22:54:02'!
PASSED!

!testRun: #StoreTest #test15ListingPurchasesOfDifferentClientsShouldReturnDifferentListsOfSales stamp: 'GDH 6/23/2021 22:54:02'!
PASSED!
!Store methodsFor: 'accessing' stamp: 'GDH 6/23/2021 23:02:42'!
itemsSoldOf: aSalesCollection
	
	^( aSalesCollection collect: [ :aSale | aSale items ] ) flatten! !
!Store methodsFor: 'accessing' stamp: 'GDH 6/23/2021 23:03:52' prior: 50942774!
purchasesListOf: aClientId using: aClientPassword

	| sales |

	self assertAuthenticationFor: aClientId using: aClientId.
	self assertSalesOfClientExistAndAreNotEmpty: aClientId .
	
	sales := salesByClientId at: aClientId.
	
	^ self itemsSoldOf: sales -> ( ( sales collect: [ :aSale | aSale total ] ) sum )! !
!Store methodsFor: 'accessing' stamp: 'GDH 6/23/2021 23:04:41'!
totalAmountOf: aSalesCollection

	^( aSalesCollection collect: [ :aSale | aSale total ] ) sum ! !
!Store methodsFor: 'accessing' stamp: 'GDH 6/23/2021 23:05:30' prior: 50942851!
purchasesListOf: aClientId using: aClientPassword

	| sales |

	self assertAuthenticationFor: aClientId using: aClientId.
	self assertSalesOfClientExistAndAreNotEmpty: aClientId .
	
	sales := salesByClientId at: aClientId.
	
	^ (self itemsSoldOf: sales) -> (self totalAmountOf: sales)! !

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'GDH 6/23/2021 23:05:32'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/23/2021 23:05:32'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'GDH 6/23/2021 23:05:32'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'GDH 6/23/2021 23:05:32'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'GDH 6/23/2021 23:05:32'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/23/2021 23:05:32'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/23/2021 23:05:32'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/23/2021 23:05:32'!
PASSED!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/23/2021 23:05:32'!
PASSED!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'GDH 6/23/2021 23:05:32'!
PASSED!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/23/2021 23:05:32'!
PASSED!

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/23/2021 23:05:32'!
PASSED!

!testRun: #StoreTest #test13ListingPurchasesWithInvalidCredentialsShouldRaiseAnError stamp: 'GDH 6/23/2021 23:05:32'!
PASSED!

!testRun: #StoreTest #test14ListingPurchasesOfClientWithoutPurchasesShouldRaiseAnError stamp: 'GDH 6/23/2021 23:05:32'!
PASSED!

!testRun: #StoreTest #test15ListingPurchasesOfDifferentClientsShouldReturnDifferentListsOfSales stamp: 'GDH 6/23/2021 23:05:32'!
PASSED!
!Store methodsFor: 'creation' stamp: 'GDH 6/23/2021 23:06:29'!
getNextCartId
	
	| cartId |
	
	cartId := nextCartId.
	
	nextCartId := nextCartId + 1.
	
	^cartId.
	
	! !
!Store methodsFor: 'creation' stamp: 'GDH 6/23/2021 23:06:42' prior: 50942355!
createCartFor: aClientId using: aPassword 

	| cartId |

	self assertAuthenticationFor: aClientId using: aPassword.
	
	cartId := self getNextTransactionId .
	
	cartsById add: cartId -> (Cart acceptingItemsOf: catalog).
	
	clientByCartId at: cartId put: aClientId .
	
	^cartId.
	
	! !
!Store methodsFor: 'creation' stamp: 'GDH 6/23/2021 23:07:03' prior: 50942938!
getNextCartId
	
	| cartId |
	
	cartId := nextCartId.
	nextCartId := nextCartId + 1.
	
	^cartId.
	
	! !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 23:21:30'!
test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError
	
	| store cartId isbn |
		
	store := self createStoreWithDefaultCatalog.
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
		
	cartId := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	store add: 1 of: isbn to: cartId.
	! !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 23:23:26' prior: 50942962!
test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError
	
	| store cartId isbn |
		
	store := self createStoreWithDefaultCatalog.
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
		
	cartId := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	self should: [ store add: 1 of: isbn to: cartId. ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store cartExpiredErrorMessageDescription.
	! !

!testRun: #StoreTest #test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/23/2021 23:23:37'!
ERROR!
!Store class methodsFor: 'as yet unclassified' stamp: 'GDH 6/23/2021 23:24:11'!
cartExpiredErrorMessageDescription
	self shouldBeImplemented.! !
!Store class methodsFor: 'as yet unclassified' stamp: 'GDH 6/23/2021 23:24:33' prior: 50942999!
cartExpiredErrorMessageDescription
	
	^'The cart has expired after 30 mins of creation'! !
!Store class methodsFor: 'as yet unclassified' stamp: 'GDH 6/23/2021 23:25:20' prior: 50943005!
cartExpiredErrorMessageDescription
	
	^'The cart has expired after 30 mins of no usage'! !

!testRun: #StoreTest #test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/23/2021 23:25:28'!
FAILURE!
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 23:39:39' prior: 50942977!
test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError
	
	| store cartId isbn |
		
	store := self createStoreWithDefaultCatalog.
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
		
	cartId := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	self should: [ store add: 1 of: isbn to: cartId on: testObjectFactory today . ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store cartExpiredErrorMessageDescription.
	! !
!StoreTestObjectsFactory methodsFor: 'date' stamp: 'GDH 6/23/2021 23:51:00'!
todayThirtyMinutesInAdvance
	
	| date time |
	
	date := today date.
	time := Time hour: today hour minute: today minute + 30 second: today second .
	
	^ DateAndTime date: today date time: today time + 30! !
!StoreTestObjectsFactory methodsFor: 'date' stamp: 'GDH 6/23/2021 23:51:10' prior: 50943040!
todayThirtyMinutesInAdvance
	
	| date time |
	
	date := today date.
	time := Time hour: today hour minute: today minute + 30 second: today second .
	
	^ DateAndTime date: date time: time.! !

StoreTestObjectsFactory new todayThirtyMinutesInAdvance !
!StoreTestObjectsFactory methodsFor: 'date' stamp: 'GDH 6/23/2021 23:57:51' prior: 50943050!
todayThirtyMinutesInAdvance
	
	^ today + (Duration minutes: 30).! !

StoreTestObjectsFactory new todayThirtyMinutesInAdvance !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/23/2021 23:59:07' prior: 50943021!
test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError
	
	| store cartId isbn |
		
	store := self createStoreWithDefaultCatalog.
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
		
	cartId := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	self should: [ store add: 1 of: isbn to: cartId on: testObjectFactory todayThirtyMinutesInAdvance . ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store cartExpiredErrorMessageDescription.
	! !

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'GDH 6/24/2021 00:08:26'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/24/2021 00:08:26'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'GDH 6/24/2021 00:08:26'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'GDH 6/24/2021 00:08:26'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'GDH 6/24/2021 00:08:26'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/24/2021 00:08:26'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/24/2021 00:08:26'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/24/2021 00:08:26'!
PASSED!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/24/2021 00:08:26'!
PASSED!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'GDH 6/24/2021 00:08:26'!
PASSED!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/24/2021 00:08:26'!
PASSED!

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/24/2021 00:08:26'!
PASSED!

!testRun: #StoreTest #test13ListingPurchasesWithInvalidCredentialsShouldRaiseAnError stamp: 'GDH 6/24/2021 00:08:26'!
PASSED!

!testRun: #StoreTest #test14ListingPurchasesOfClientWithoutPurchasesShouldRaiseAnError stamp: 'GDH 6/24/2021 00:08:26'!
PASSED!

!testRun: #StoreTest #test15ListingPurchasesOfDifferentClientsShouldReturnDifferentListsOfSales stamp: 'GDH 6/24/2021 00:08:26'!
PASSED!

!testRun: #StoreTest #test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 00:08:26'!
ERROR!

!testRun: #StoreTest #test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 00:08:26'!
ERROR!
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/24/2021 00:08:39' prior: 50943068!
test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError
	
	| store cartId isbn |
		
	store := self createStoreWithDefaultCatalog.
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
		
	cartId := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	self should: [ store add: 1 of: isbn to: cartId ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store cartExpiredErrorMessageDescription.
	! !

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'GDH 6/24/2021 00:10:46'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/24/2021 00:10:46'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'GDH 6/24/2021 00:10:46'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'GDH 6/24/2021 00:10:46'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'GDH 6/24/2021 00:10:46'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/24/2021 00:10:46'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/24/2021 00:10:46'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/24/2021 00:10:46'!
PASSED!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/24/2021 00:10:46'!
PASSED!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'GDH 6/24/2021 00:10:46'!
PASSED!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/24/2021 00:10:46'!
PASSED!

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/24/2021 00:10:46'!
PASSED!

!testRun: #StoreTest #test13ListingPurchasesWithInvalidCredentialsShouldRaiseAnError stamp: 'GDH 6/24/2021 00:10:46'!
PASSED!

!testRun: #StoreTest #test14ListingPurchasesOfClientWithoutPurchasesShouldRaiseAnError stamp: 'GDH 6/24/2021 00:10:46'!
PASSED!

!testRun: #StoreTest #test15ListingPurchasesOfDifferentClientsShouldReturnDifferentListsOfSales stamp: 'GDH 6/24/2021 00:10:46'!
PASSED!

!testRun: #StoreTest #test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 00:10:46'!
FAILURE!

!testRun: #StoreTest #test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 00:10:46'!
FAILURE!

Object subclass: #AdvanceableDateAndTime
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #AdvanceableDateAndTime category: 'TusLibros' stamp: 'GDH 6/24/2021 00:11:16'!
Object subclass: #AdvanceableDateAndTime
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

DateAndTime subclass: #AdvanceableDateAndTime
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #AdvanceableDateAndTime category: 'TusLibros' stamp: 'GDH 6/24/2021 00:11:24'!
DateAndTime subclass: #AdvanceableDateAndTime
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!AdvanceableDateAndTime methodsFor: 'advance' stamp: 'GDH 6/24/2021 00:11:55'!
next: aMinuteAmount
	
	self + (Duration minutes: aMinuteAmount ).! !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/24/2021 00:13:17' prior: 50943154!
test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError
	
	| store cartId isbn advanceableDateAndTime |
		
	store := self createStoreWithDefaultCatalog.
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
		
	cartId := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	self should: [ store add: 1 of: isbn to: cartId ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store cartExpiredErrorMessageDescription.
	! !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/24/2021 00:13:38' prior: 50943267!
test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError
	
	| store cartId isbn advanceableDateAndTime |
		
	store := self createStoreWithDefaultCatalog.
	advanceableDateAndTime  := testObjectFactory advanceableDateAndTimeFromToday.
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
		
	cartId := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	self should: [ store add: 1 of: isbn to: cartId ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store cartExpiredErrorMessageDescription.
	! !
!StoreTestObjectsFactory methodsFor: 'date' stamp: 'GDH 6/24/2021 00:14:09'!
advanceableDateAndTimeFromToday
	
	^ AdvanceableDateAndTime now.! !

AdvanceableDateAndTime now!
!StoreTest methodsFor: 'creation' stamp: 'GDH 6/24/2021 00:16:58'!
createStoreWithDefaultCatalogAndTime: aDateAndTime

	^Store openStoreOn: aDateAndTime 
			authenticatingWith: self 
			processingThrough: self 
			acceptingItemsFrom: testObjectFactory defaultCatalog .! !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/24/2021 00:17:37' prior: 50943286!
test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError
	
	| store cartId isbn advanceableDateAndTime |
		
	store := self createStoreWithDefaultCatalogAndTime: testObjectFactory advanceableDateAndTimeFromToday .
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
		
	cartId := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	self should: [ store add: 1 of: isbn to: cartId ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store cartExpiredErrorMessageDescription.
	! !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/24/2021 00:17:55' prior: 50943322!
test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError
	
	| store cartId isbn advanceableDateAndTime |
	
	advanceableDateAndTime := testObjectFactory advanceableDateAndTimeFromToday.
	store := self createStoreWithDefaultCatalogAndTime:  advanceableDateAndTime .
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
		
	cartId := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	self should: [ store add: 1 of: isbn to: cartId ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store cartExpiredErrorMessageDescription.
	! !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/24/2021 00:18:21' prior: 50943343!
test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError
	
	| store cartId isbn advanceableDateAndTime |
	
	advanceableDateAndTime := testObjectFactory advanceableDateAndTimeFromToday.
	store := self createStoreWithDefaultCatalogAndTime:  advanceableDateAndTime .
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
		
	cartId := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	advanceableDateAndTime next: 30.
	
	self should: [ store add: 1 of: isbn to: cartId ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store cartExpiredErrorMessageDescription.
	! !

!testRun: #StoreTest #test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 00:18:30'!
FAILURE!
!Store methodsFor: 'creation' stamp: 'GDH 6/24/2021 00:20:01' prior: 50942944!
createCartFor: aClientId using: aPassword 

	| cartId cartWithCreationTime |

	self assertAuthenticationFor: aClientId using: aPassword.
	
	cartId := self getNextTransactionId .
	
	cartWithCreationTime := (Cart acceptingItemsOf: catalog) -> dateAndTime .
	cartsById add: cartId -> cartWithCreationTime.
	
	clientByCartId at: cartId put: aClientId .
	
	^cartId.
	
	! !
!Store methodsFor: 'accessing' stamp: 'GDH 6/24/2021 00:21:26' prior: 50939624!
listCart: aCartId 

	^(self cartFor: aCartId) key items.! !
!Store methodsFor: 'checkout' stamp: 'GDH 6/24/2021 00:21:49' prior: 50942589!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 
	
	| cart creditCard cashier |
	
	cart := (self cartFor: aCartId) key.

	creditCard := CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.	
	 
	cashier := Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: dateAndTime
		registeringOn: (self salesOfClientAssociatedWith: aCartId ).
		
	cashier checkOut.
	
	^self getNextTransactionId .
			

	! !
!Store methodsFor: 'adding' stamp: 'GDH 6/24/2021 00:21:58' prior: 50939644!
add: aQuantity of: anIsbn to: aCartId 

	| cart |
	
	cart := (self cartFor: aCartId) key.
	
	cart add: aQuantity of: anIsbn.
	! !
!Store methodsFor: 'adding' stamp: 'GDH 6/24/2021 00:23:05' prior: 50943433!
add: aQuantity of: anIsbn to: aCartId 

	| cart |
	
	cart := (self cartFor: aCartId) key.
	
	cart add: aQuantity of: anIsbn.
	! !
!Store methodsFor: 'adding' stamp: 'GDH 6/24/2021 00:23:13' prior: 50943440!
add: aQuantity of: anIsbn to: aCartId 

	| cart |
	
	cart := (self cartFor: aCartId).
	
	cart add: aQuantity of: anIsbn.
	! !
!Store methodsFor: 'checkout' stamp: 'GDH 6/24/2021 00:23:23' prior: 50943413!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 
	
	| cart creditCard cashier |
	
	cart := self cartFor: aCartId.

	creditCard := CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.	
	 
	cashier := Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: dateAndTime
		registeringOn: (self salesOfClientAssociatedWith: aCartId ).
		
	cashier checkOut.
	
	^self getNextTransactionId .
			

	! !
!Store methodsFor: 'accessing' stamp: 'GDH 6/24/2021 00:23:32' prior: 50943408!
listCart: aCartId 

	^(self cartFor: aCartId) items.! !
!Store methodsFor: 'accessing - private' stamp: 'GDH 6/24/2021 00:24:06' prior: 50939629!
cartFor: aCartId 
	
	| cartWithCreationTime |
	
	cartWithCreationTime := cartsById at: aCartId ifAbsent: [ self error: self class invalidCartIdErrorMessageDescription ].
! !
!Store methodsFor: 'accessing - private' stamp: 'GDH 6/24/2021 00:25:22' prior: 50943479!
cartFor: aCartId 
	
	| cartWithCreationTime |
	
	cartWithCreationTime := cartsById at: aCartId ifAbsent: [ self error: self class invalidCartIdErrorMessageDescription ].
	
	self assertTimeElapsedHasNotExceededMaximum: cartWithCreationTime value.
	
	
	
! !
!Store methodsFor: 'accessing - private' stamp: 'GDH 6/24/2021 00:26:58' prior: 50943488!
cartFor: aCartId 
	
	| cartWithCreationTime |
	
	cartWithCreationTime := cartsById at: aCartId ifAbsent: [ self error: self class invalidCartIdErrorMessageDescription ].
	
	self assertTimeElapsedHasNotExceededMaximum: cartWithCreationTime value.
	
	
	
	
! !
!AdvanceableDateAndTime methodsFor: 'advance' stamp: 'GDH 6/24/2021 00:31:07'!
now
	
	self + (Duration minutes: 30 ).! !

!methodRemoval: AdvanceableDateAndTime #next: stamp: 'GDH 6/24/2021 00:31:09'!
next: aMinuteAmount
	
	self + (Duration minutes: aMinuteAmount ).!
!AdvanceableDateAndTime methodsFor: 'advance' stamp: 'GDH 6/24/2021 00:31:14' prior: 50943510!
now
	
	self + ( Duration minutes: 30 ).! !
!Store methodsFor: 'accessing - private' stamp: 'GDH 6/24/2021 00:34:07' prior: 50943499!
cartFor: aCartId 
	
	| cartWithCreationTime |
	
	cartWithCreationTime := cartsById at: aCartId ifAbsent: [ self error: self class invalidCartIdErrorMessageDescription ].
	
	self assertTimeElapsedHasNotExceededMaximum: cartWithCreationTime value.
	
	cartsById at: aCartId put: cartWithCreationTime key -> dateAndTime now.
	
	^cartWithCreationTime key
	
	
	
	
! !
!Store methodsFor: 'accessing - private' stamp: 'GDH 6/24/2021 00:37:13'!
assertTimeElapsedHasNotExceededMaximum: aCreationDateAndTime.
	
	dateAndTime - (Duration minutes: 30) < aCreationDateAndTime ifFalse: [ ^self error: self class cartExpiredErrorMessageDescription ].
	
	
	
	
! !
!Store methodsFor: 'accessing - private' stamp: 'GDH 6/24/2021 00:38:19' prior: 50943524!
cartFor: aCartId 
	
	| cartWithLastUpdateTime |
	
	cartWithLastUpdateTime := cartsById at: aCartId ifAbsent: [ self error: self class invalidCartIdErrorMessageDescription ].
	
	self assertTimeElapsedHasNotExceededMaximum: cartWithLastUpdateTime value.
	
	cartWithLastUpdateTime := cartWithLastUpdateTime key -> dateAndTime now.
	
	cartsById at: aCartId put: cartWithLastUpdateTime.
	
	^cartWithLastUpdateTime key
	
	
	
	
! !

!classDefinition: #AdvanceableDateAndTime category: 'TusLibros' stamp: 'GDH 6/24/2021 00:39:19'!
DateAndTime subclass: #AdvanceableDateAndTime
	instanceVariableNames: 'minutesToAdvance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!AdvanceableDateAndTime methodsFor: 'advance' stamp: 'GDH 6/24/2021 00:39:17' prior: 50943519!
now
	
	self + ( Duration minutes: minutesToAdvance ).! !
!AdvanceableDateAndTime methodsFor: 'advance' stamp: 'GDH 6/24/2021 00:39:33' overrides: 16896425!
initialize
	
	minutesToAdvance := 0.! !
!AdvanceableDateAndTime methodsFor: 'advance' stamp: 'GDH 6/24/2021 00:40:24'!
advanceByMinutes: aMinutesAmount
	
	minutesToAdvance := minutesToAdvance + aMinutesAmount .! !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/24/2021 00:40:56' prior: 50943366!
test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError
	
	| store cartId isbn advanceableDateAndTime |
	
	advanceableDateAndTime := testObjectFactory advanceableDateAndTimeFromToday.
	store := self createStoreWithDefaultCatalogAndTime:  advanceableDateAndTime .
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
		
	cartId := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	advanceableDateAndTime advanceByMinutes: 30.
	
	self should: [ store add: 1 of: isbn to: cartId ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store cartExpiredErrorMessageDescription.
	! !

!testRun: #StoreTest #test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 00:40:57'!
ERROR!
!AdvanceableDateAndTime methodsFor: 'ansi protocol' stamp: 'GDH 6/24/2021 00:42:45' prior: 50943573!
now
	
	self now + ( Duration minutes: minutesToAdvance ).! !
!AdvanceableDateAndTime methodsFor: 'ansi protocol' stamp: 'GDH 6/24/2021 00:43:01' prior: 50943617!
now
	
	super now + ( Duration minutes: minutesToAdvance ).! !

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'GDH 6/24/2021 00:43:04'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/24/2021 00:43:04'!
ERROR!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'GDH 6/24/2021 00:43:04'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'GDH 6/24/2021 00:43:04'!
ERROR!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'GDH 6/24/2021 00:43:04'!
ERROR!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/24/2021 00:43:04'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/24/2021 00:43:04'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/24/2021 00:43:04'!
ERROR!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/24/2021 00:43:04'!
ERROR!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'GDH 6/24/2021 00:43:04'!
PASSED!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/24/2021 00:43:04'!
ERROR!

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/24/2021 00:43:04'!
ERROR!

!testRun: #StoreTest #test13ListingPurchasesWithInvalidCredentialsShouldRaiseAnError stamp: 'GDH 6/24/2021 00:43:04'!
PASSED!

!testRun: #StoreTest #test14ListingPurchasesOfClientWithoutPurchasesShouldRaiseAnError stamp: 'GDH 6/24/2021 00:43:04'!
PASSED!

!testRun: #StoreTest #test15ListingPurchasesOfDifferentClientsShouldReturnDifferentListsOfSales stamp: 'GDH 6/24/2021 00:43:04'!
ERROR!

!testRun: #StoreTest #test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 00:43:04'!
ERROR!

AdvanceableDateAndTime now!

asd := AdvanceableDateAndTime now.!

asd advanceByMinutes: 30.!

asd := AdvanceableDateAndTime now. 
asd advanceByMinutes: 30.
asd now.!
!Store methodsFor: 'initialization' stamp: 'GDH 6/24/2021 00:47:59' prior: 50942308!
initializeAuthenticatingWith: anAuthenticator processingThrough: aMerchantProcessor acceptingItemsFrom: aCatalog on: aDateAndTimeClass .

	nextCartId := 1.
	nextTransactionId := 1.
	cartsById := Dictionary new.
	clientByCartId := Dictionary new.
	salesByClientId := Dictionary new.
	
	authenticator := anAuthenticator.
	merchantProcessor := aMerchantProcessor.
	catalog := aCatalog.
	dateAndTime := aDateAndTimeClass.! !

!classDefinition: 'AdvanceableDateAndTime class' category: 'TusLibros' stamp: 'GDH 6/24/2021 00:48:31'!
AdvanceableDateAndTime class
	instanceVariableNames: 'minutesToAdvance'!
!AdvanceableDateAndTime class methodsFor: 'nil' stamp: 'GDH 6/24/2021 00:48:29'!
advanceByMinutes: aMinutesAmount
	
	minutesToAdvance := minutesToAdvance + aMinutesAmount .! !
!AdvanceableDateAndTime class methodsFor: 'nil' stamp: 'GDH 6/24/2021 00:48:55' overrides: 16829159!
now
	
	super now + ( Duration minutes: minutesToAdvance ).! !

!methodRemoval: AdvanceableDateAndTime #initialize stamp: 'GDH 6/24/2021 00:49:08'!
initialize
	
	minutesToAdvance := 0.!

!methodRemoval: AdvanceableDateAndTime #advanceByMinutes: stamp: 'GDH 6/24/2021 00:49:09'!
advanceByMinutes: aMinutesAmount
	
	minutesToAdvance := minutesToAdvance + aMinutesAmount .!

!methodRemoval: AdvanceableDateAndTime #now stamp: 'GDH 6/24/2021 00:49:12'!
now
	
	super now + ( Duration minutes: minutesToAdvance ).!
!AdvanceableDateAndTime class methodsFor: 'ansi protocol' stamp: 'GDH 6/24/2021 00:50:18'!
nowWithMinutesOffset: aMinutesAmount
	
	super now + ( Duration minutes: aMinutesAmount ).! !

!methodRemoval: AdvanceableDateAndTime class #now stamp: 'GDH 6/24/2021 00:50:24'!
now
	
	super now + ( Duration minutes: minutesToAdvance ).!

!methodRemoval: AdvanceableDateAndTime class #advanceByMinutes: stamp: 'GDH 6/24/2021 00:50:31'!
advanceByMinutes: aMinutesAmount
	
	minutesToAdvance := minutesToAdvance + aMinutesAmount .!

!methodRemoval: AdvanceableDateAndTime class #nowWithMinutesOffset: stamp: 'GDH 6/24/2021 00:55:27'!
nowWithMinutesOffset: aMinutesAmount
	
	super now + ( Duration minutes: aMinutesAmount ).!
!AdvanceableDateAndTime class methodsFor: 'ansi protocol' stamp: 'GDH 6/24/2021 00:55:41' overrides: 16829431!
initialize
	
	minutesToAdvance := 0.! !
!AdvanceableDateAndTime class methodsFor: 'ansi protocol' stamp: 'GDH 6/24/2021 00:56:11' overrides: 16829159!
now
	
	^super now + ( Duration minutes: minutesToAdvance ).! !
!AdvanceableDateAndTime class methodsFor: 'advance' stamp: 'GDH 6/24/2021 00:56:36'!
advanceByMinutesAmount: aMinutesAmount
	
	minutesToAdvance := minutesToAdvance + aMinutesAmount .! !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/24/2021 00:56:56' prior: 50943588!
test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError
	
	| store cartId isbn advanceableDateAndTime |
	
	advanceableDateAndTime := testObjectFactory advanceableDateAndTimeFromToday.
	store := self createStoreWithDefaultCatalogAndTime:  advanceableDateAndTime .
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
		
	cartId := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	advanceableDateAndTime advanceByMinutesAmount: 30.
	
	self should: [ store add: 1 of: isbn to: cartId ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store cartExpiredErrorMessageDescription.
	! !

!testRun: #StoreTest #test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 00:56:57'!
ERROR!
!AdvanceableDateAndTime class methodsFor: 'ansi protocol' stamp: 'GDH 6/24/2021 00:58:48' prior: 50943771 overrides: 16829159!
now
	
	minutesToAdvance ifNil: 0.
	
	^super now + ( Duration minutes: minutesToAdvance ).! !
!AdvanceableDateAndTime class methodsFor: 'ansi protocol' stamp: 'GDH 6/24/2021 00:59:12' prior: 50943812 overrides: 16829159!
now
	
	minutesToAdvance ifNil: [ minutesToAdvance := 0 ].
	
	^super now + ( Duration minutes: minutesToAdvance ).! !
!AdvanceableDateAndTime class methodsFor: 'advance' stamp: 'GDH 6/24/2021 00:59:19' prior: 50943776!
advanceByMinutesAmount: aMinutesAmount

	minutesToAdvance ifNil: [ minutesToAdvance := 0 ].
	
	minutesToAdvance := minutesToAdvance + aMinutesAmount .! !

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'GDH 6/24/2021 00:59:22'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/24/2021 00:59:22'!
ERROR!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'GDH 6/24/2021 00:59:22'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'GDH 6/24/2021 00:59:22'!
ERROR!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'GDH 6/24/2021 00:59:22'!
ERROR!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/24/2021 00:59:22'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/24/2021 00:59:22'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/24/2021 00:59:22'!
ERROR!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/24/2021 00:59:22'!
ERROR!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'GDH 6/24/2021 00:59:22'!
PASSED!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/24/2021 00:59:22'!
ERROR!

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/24/2021 00:59:22'!
ERROR!

!testRun: #StoreTest #test13ListingPurchasesWithInvalidCredentialsShouldRaiseAnError stamp: 'GDH 6/24/2021 00:59:22'!
PASSED!

!testRun: #StoreTest #test14ListingPurchasesOfClientWithoutPurchasesShouldRaiseAnError stamp: 'GDH 6/24/2021 00:59:22'!
PASSED!

!testRun: #StoreTest #test15ListingPurchasesOfDifferentClientsShouldReturnDifferentListsOfSales stamp: 'GDH 6/24/2021 00:59:22'!
ERROR!

!testRun: #StoreTest #test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 00:59:22'!
ERROR!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/24/2021 00:59:28'!
ERROR!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/24/2021 00:59:28'!
ERROR!
!StoreTest methodsFor: 'creation' stamp: 'GDH 6/24/2021 01:00:11' prior: 50943313!
createStoreWithDefaultCatalogAndTime: aDateAndTime

	^Store openStoreOn: DateAndTime 
			authenticatingWith: self 
			processingThrough: self 
			acceptingItemsFrom: testObjectFactory defaultCatalog .! !
!StoreTest methodsFor: 'creation' stamp: 'GDH 6/24/2021 01:00:22' prior: 50943903!
createStoreWithDefaultCatalogAndTime: aDateAndTime

	^Store openStoreOn: aDateAndTime 
			authenticatingWith: self 
			processingThrough: self 
			acceptingItemsFrom: testObjectFactory defaultCatalog .! !
!AdvanceableDateAndTime class methodsFor: 'initialization' stamp: 'GDH 6/24/2021 01:02:39'!
initializeFor: aDateAndTime
	
	self new initializeFor: aDateAndTime.! !
!AdvanceableDateAndTime methodsFor: 'nil' stamp: 'GDH 6/24/2021 01:02:48' overrides: 16896425!
initialize
	
	minutesToAdvance := 0.! !

!classDefinition: #AdvanceableDateAndTime category: 'TusLibros' stamp: 'GDH 6/24/2021 01:04:08'!
DateAndTime subclass: #AdvanceableDateAndTime
	instanceVariableNames: 'minutesToAdvance dateAndTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!AdvanceableDateAndTime methodsFor: 'as yet unclassified' stamp: 'GDH 6/24/2021 01:04:07'!
now
	
	^dateAndTime now + ( Duration minutes: minutesToAdvance ).! !
!AdvanceableDateAndTime methodsFor: 'as yet unclassified' stamp: 'GDH 6/24/2021 01:04:21'!
initializeFor: aDateAndTime
	
	minutesToAdvance := 0.! !

!methodRemoval: AdvanceableDateAndTime #initialize stamp: 'GDH 6/24/2021 01:04:23'!
initialize
	
	minutesToAdvance := 0.!
!AdvanceableDateAndTime methodsFor: 'as yet unclassified' stamp: 'GDH 6/24/2021 01:04:32' prior: 50943946!
initializeFor: aDateAndTime
	
	minutesToAdvance := 0.
	dateAndTime := aDateAndTime .! !
!AdvanceableDateAndTime methodsFor: 'as yet unclassified' stamp: 'GDH 6/24/2021 01:04:41' prior: 50943941!
now
	
	^dateAndTime + ( Duration minutes: minutesToAdvance ).! !
!AdvanceableDateAndTime methodsFor: 'nil' stamp: 'GDH 6/24/2021 01:04:53'!
advanceByMinutes: aMinutesAmount
	
	minutesToAdvance := minutesToAdvance + aMinutesAmount .! !

Object subclass: #AdvanceableDateAndTime
	instanceVariableNames: 'minutesToAdvance dateAndTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #AdvanceableDateAndTime category: 'TusLibros' stamp: 'GDH 6/24/2021 01:05:05'!
Object subclass: #AdvanceableDateAndTime
	instanceVariableNames: 'minutesToAdvance dateAndTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRenamed: #AdvanceableDateAndTime as: #AdvanceableClock stamp: 'GDH 6/24/2021 01:05:29'!
Smalltalk renameClassNamed: #AdvanceableDateAndTime as: #AdvanceableClock!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GDH 6/24/2021 01:05:29' prior: 50943307!
advanceableDateAndTimeFromToday
	
	^ AdvanceableClock now.! !

Object subclass: #Clock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Clock category: 'TusLibros' stamp: 'GDH 6/24/2021 01:05:46'!
Object subclass: #Clock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Clock methodsFor: 'nil' stamp: 'GDH 6/24/2021 01:05:56'!
now
	
	self subclassResponsibility ! !

Clock subclass: #AdvanceableClock
	instanceVariableNames: 'minutesToAdvance dateAndTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #AdvanceableClock category: 'TusLibros' stamp: 'GDH 6/24/2021 01:06:02'!
Clock subclass: #AdvanceableClock
	instanceVariableNames: 'minutesToAdvance dateAndTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: 'Clock class' category: 'TusLibros' stamp: 'GDH 6/24/2021 01:06:38'!
Clock class
	instanceVariableNames: 'dateAndTime'!
!Clock class methodsFor: 'no messages' stamp: 'GDH 6/24/2021 01:06:36'!
for: aDateAndTime
	
	dateAndTime := aDateAndTime.! !

Clock subclass: #AdvanceableClock
	instanceVariableNames: 'minutesToAdvance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #AdvanceableClock category: 'TusLibros' stamp: 'GDH 6/24/2021 01:07:49'!
Clock subclass: #AdvanceableClock
	instanceVariableNames: 'minutesToAdvance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #Clock
	instanceVariableNames: 'dateAndTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Clock category: 'TusLibros' stamp: 'GDH 6/24/2021 01:07:53'!
Object subclass: #Clock
	instanceVariableNames: 'dateAndTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Clock methodsFor: 'as yet unclassified' stamp: 'GDH 6/24/2021 01:08:04' prior: 50944007!
now
	
	^dateAndTime ! !
!Clock class methodsFor: 'initialization' stamp: 'GDH 6/24/2021 01:08:22' prior: 50944028!
for: aDateAndTime
	
	self new initializeFor: aDateAndTime.! !
!Clock methodsFor: 'as yet unclassified' stamp: 'GDH 6/24/2021 01:08:40'!
initializeFor: aDateAndTime
	
	dateAndTime := aDateAndTime .! !
!StoreTestObjectsFactory methodsFor: 'date' stamp: 'GDH 6/24/2021 01:09:47'!
todayClock
	
	^ Clock for: today.! !
!StoreTestObjectsFactory methodsFor: 'date' stamp: 'GDH 6/24/2021 01:10:22'!
todayClockAdvanceable
	
	^ AdvanceableClock for: today.! !

!methodRemoval: StoreTestObjectsFactory #todayThirtyMinutesInAdvance stamp: 'GDH 6/24/2021 01:10:35'!
todayThirtyMinutesInAdvance
	
	^ today + (Duration minutes: 30).!

!methodRemoval: StoreTestObjectsFactory #advanceableDateAndTimeFromToday stamp: 'GDH 6/24/2021 01:10:39'!
advanceableDateAndTimeFromToday
	
	^ AdvanceableClock now.!
!StoreTest methodsFor: 'creation' stamp: 'GDH 6/24/2021 01:10:49' prior: 50940695!
createStoreWithBigCatalog

	^Store openStoreOn: testObjectFactory todayClock 
			authenticatingWith: self 
			processingThrough: self 
			acceptingItemsFrom: testObjectFactory bigCatalog .! !
!StoreTest methodsFor: 'creation' stamp: 'GDH 6/24/2021 01:10:53' prior: 50940686!
createStoreWithDefaultCatalog

	^Store openStoreOn: testObjectFactory todayClock 
			authenticatingWith: self 
			processingThrough: self 
			acceptingItemsFrom: testObjectFactory defaultCatalog .! !
!StoreTest methodsFor: 'creation' stamp: 'GDH 6/24/2021 01:11:12' prior: 50943912!
createStoreWithDefaultCatalogAndTime: aClock

	^Store openStoreOn: aClock 
			authenticatingWith: self 
			processingThrough: self 
			acceptingItemsFrom: testObjectFactory defaultCatalog .! !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/24/2021 01:11:32' prior: 50943782!
test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError
	
	| store cartId isbn advanceableDateAndTime |
	
	advanceableDateAndTime := testObjectFactory todayClockAdvanceable .
	store := self createStoreWithDefaultCatalogAndTime:  advanceableDateAndTime .
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
		
	cartId := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	advanceableDateAndTime advanceByMinutes: 30.
	
	self should: [ store add: 1 of: isbn to: cartId ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store cartExpiredErrorMessageDescription.
	! !

!testRun: #StoreTest #test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 01:11:33'!
ERROR!
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/24/2021 01:12:01' prior: 50944116!
test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError
	
	| store cartId isbn advanceableClock |
	
	advanceableClock := testObjectFactory todayClockAdvanceable .
	store := self createStoreWithDefaultCatalogAndTime:  advanceableClock .
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
		
	cartId := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	advanceableClock advanceByMinutes: 30.
	
	self should: [ store add: 1 of: isbn to: cartId ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store cartExpiredErrorMessageDescription.
	! !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/24/2021 01:12:05' prior: 50944144!
test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError
	
	| store cartId isbn advanceableClock |
	
	advanceableClock := testObjectFactory todayClockAdvanceable .
	store := self createStoreWithDefaultCatalogAndTime:  advanceableClock .
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
		
	cartId := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	advanceableClock advanceByMinutes: 30.
	
	self should: [ store add: 1 of: isbn to: cartId ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store cartExpiredErrorMessageDescription.
	! !

!testRun: #StoreTest #test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 01:12:05'!
ERROR!

!methodRemoval: AdvanceableClock class #advanceByMinutesAmount: stamp: 'GDH 6/24/2021 01:12:34'!
advanceByMinutesAmount: aMinutesAmount

	minutesToAdvance ifNil: [ minutesToAdvance := 0 ].
	
	minutesToAdvance := minutesToAdvance + aMinutesAmount .!

!methodRemoval: AdvanceableClock class #initialize stamp: 'GDH 6/24/2021 01:12:44'!
initialize
	
	minutesToAdvance := 0.!
!Clock class methodsFor: 'initialization' stamp: 'GDH 6/24/2021 01:12:53' prior: 50944060!
for: aDateAndTime
	
	^self new initializeFor: aDateAndTime.! !

!methodRemoval: AdvanceableClock class #initializeFor: stamp: 'GDH 6/24/2021 01:12:56'!
initializeFor: aDateAndTime
	
	self new initializeFor: aDateAndTime.!

!methodRemoval: AdvanceableClock class #now stamp: 'GDH 6/24/2021 01:13:01'!
now
	
	minutesToAdvance ifNil: [ minutesToAdvance := 0 ].
	
	^super now + ( Duration minutes: minutesToAdvance ).!

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'GDH 6/24/2021 01:13:07'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/24/2021 01:13:07'!
ERROR!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'GDH 6/24/2021 01:13:07'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'GDH 6/24/2021 01:13:07'!
ERROR!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'GDH 6/24/2021 01:13:07'!
ERROR!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:13:07'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:13:07'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/24/2021 01:13:07'!
ERROR!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/24/2021 01:13:07'!
ERROR!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:13:07'!
PASSED!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/24/2021 01:13:07'!
ERROR!

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/24/2021 01:13:07'!
ERROR!

!testRun: #StoreTest #test13ListingPurchasesWithInvalidCredentialsShouldRaiseAnError stamp: 'GDH 6/24/2021 01:13:07'!
PASSED!

!testRun: #StoreTest #test14ListingPurchasesOfClientWithoutPurchasesShouldRaiseAnError stamp: 'GDH 6/24/2021 01:13:07'!
PASSED!

!testRun: #StoreTest #test15ListingPurchasesOfDifferentClientsShouldReturnDifferentListsOfSales stamp: 'GDH 6/24/2021 01:13:07'!
ERROR!

!testRun: #StoreTest #test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 01:13:07'!
ERROR!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/24/2021 01:13:11'!
ERROR!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/24/2021 01:13:11'!
ERROR!
!Store methodsFor: 'assertions' stamp: 'GDH 6/24/2021 01:13:43' prior: 50943538!
assertTimeElapsedHasNotExceededMaximum: aCreationDateAndTime.
	
	dateAndTime now - (Duration minutes: 30) < aCreationDateAndTime ifFalse: [ ^self error: self class cartExpiredErrorMessageDescription ].
	
	
	
	
! !

dateAndTime now - (Duration minutes: 30)!
!Store methodsFor: 'assertions' stamp: 'GDH 6/24/2021 01:15:16' prior: 50944291!
assertTimeElapsedHasNotExceededMaximum: aCreationDateAndTime.
	
	dateAndTime now - (Duration minutes: 30) < aCreationDateAndTime now ifFalse: [ ^self error: self class cartExpiredErrorMessageDescription ].
	
	
	
	
! !

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/24/2021 01:15:19'!
PASSED!

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'GDH 6/24/2021 01:15:19'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/24/2021 01:15:19'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'GDH 6/24/2021 01:15:19'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'GDH 6/24/2021 01:15:19'!
ERROR!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'GDH 6/24/2021 01:15:19'!
ERROR!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:15:19'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:15:19'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/24/2021 01:15:19'!
ERROR!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/24/2021 01:15:19'!
ERROR!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:15:19'!
PASSED!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/24/2021 01:15:19'!
ERROR!

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/24/2021 01:15:19'!
ERROR!

!testRun: #StoreTest #test13ListingPurchasesWithInvalidCredentialsShouldRaiseAnError stamp: 'GDH 6/24/2021 01:15:19'!
PASSED!

!testRun: #StoreTest #test14ListingPurchasesOfClientWithoutPurchasesShouldRaiseAnError stamp: 'GDH 6/24/2021 01:15:19'!
PASSED!

!testRun: #StoreTest #test15ListingPurchasesOfDifferentClientsShouldReturnDifferentListsOfSales stamp: 'GDH 6/24/2021 01:15:19'!
ERROR!

!testRun: #StoreTest #test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 01:15:19'!
FAILURE!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'GDH 6/24/2021 01:15:22'!
ERROR!

!classDefinition: #Store category: 'TusLibros' stamp: 'GDH 6/24/2021 01:17:14'!
Object subclass: #Store
	instanceVariableNames: 'authenticator nextCartId catalog cartsById merchantProcessor clock nextTransactionId clientByCartId salesByClientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'as yet unclassified' stamp: 'GDH 6/24/2021 01:17:14' prior: 50943548!
cartFor: aCartId 
	
	| cartWithLastUpdateTime |
	
	cartWithLastUpdateTime := cartsById at: aCartId ifAbsent: [ self error: self class invalidCartIdErrorMessageDescription ].
	
	self assertTimeElapsedHasNotExceededMaximum: cartWithLastUpdateTime value.
	
	cartWithLastUpdateTime := cartWithLastUpdateTime key -> clock now.
	
	cartsById at: aCartId put: cartWithLastUpdateTime.
	
	^cartWithLastUpdateTime key
	
	
	
	
! !
!Store methodsFor: 'as yet unclassified' stamp: 'GDH 6/24/2021 01:17:14' prior: 50943695!
initializeAuthenticatingWith: anAuthenticator processingThrough: aMerchantProcessor acceptingItemsFrom: aCatalog on: aDateAndTimeClass .

	nextCartId := 1.
	nextTransactionId := 1.
	cartsById := Dictionary new.
	clientByCartId := Dictionary new.
	salesByClientId := Dictionary new.
	
	authenticator := anAuthenticator.
	merchantProcessor := aMerchantProcessor.
	catalog := aCatalog.
	clock := aDateAndTimeClass.! !
!Store methodsFor: 'as yet unclassified' stamp: 'GDH 6/24/2021 01:17:14' prior: 50944302!
assertTimeElapsedHasNotExceededMaximum: aCreationDateAndTime.
	
	clock now - (Duration minutes: 30) < aCreationDateAndTime now ifFalse: [ ^self error: self class cartExpiredErrorMessageDescription ].
	
	
	
	
! !
!Store methodsFor: 'as yet unclassified' stamp: 'GDH 6/24/2021 01:17:14' prior: 50943454!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 
	
	| cart creditCard cashier |
	
	cart := self cartFor: aCartId.

	creditCard := CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.	
	 
	cashier := Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: clock
		registeringOn: (self salesOfClientAssociatedWith: aCartId ).
		
	cashier checkOut.
	
	^self getNextTransactionId .
			

	! !
!Store methodsFor: 'as yet unclassified' stamp: 'GDH 6/24/2021 01:17:14' prior: 50943394!
createCartFor: aClientId using: aPassword 

	| cartId cartWithCreationTime |

	self assertAuthenticationFor: aClientId using: aPassword.
	
	cartId := self getNextTransactionId .
	
	cartWithCreationTime := (Cart acceptingItemsOf: catalog) -> clock .
	cartsById add: cartId -> cartWithCreationTime.
	
	clientByCartId at: cartId put: aClientId .
	
	^cartId.
	
	! !
!Store methodsFor: 'initialization' stamp: 'GDH 6/24/2021 01:17:27' prior: 50944407!
initializeAuthenticatingWith: anAuthenticator processingThrough: aMerchantProcessor acceptingItemsFrom: aCatalog on: aClock .

	nextCartId := 1.
	nextTransactionId := 1.
	cartsById := Dictionary new.
	clientByCartId := Dictionary new.
	salesByClientId := Dictionary new.
	
	authenticator := anAuthenticator.
	merchantProcessor := aMerchantProcessor.
	catalog := aCatalog.
	clock := aClock.! !
!Store methodsFor: 'creation' stamp: 'GDH 6/24/2021 01:18:59' prior: 50944453!
createCartFor: aClientId using: aPassword 

	| cartId cartWithCreationTime |

	self assertAuthenticationFor: aClientId using: aPassword.
	
	cartId := self getNextTransactionId .
	
	cartWithCreationTime := (Cart acceptingItemsOf: catalog) -> clock now.
	cartsById add: cartId -> cartWithCreationTime.
	
	clientByCartId at: cartId put: aClientId .
	
	^cartId.
	
	! !
!Store methodsFor: 'assertions' stamp: 'GDH 6/24/2021 01:19:31' prior: 50944423!
assertTimeElapsedHasNotExceededMaximum: aCreationDateAndTime.
	
	clock now - (Duration minutes: 30) < aCreationDateAndTime ifFalse: [ ^self error: self class cartExpiredErrorMessageDescription ].
	
	
	
	
! !

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'GDH 6/24/2021 01:19:32'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/24/2021 01:19:32'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'GDH 6/24/2021 01:19:32'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'GDH 6/24/2021 01:19:32'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'GDH 6/24/2021 01:19:32'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:19:32'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:19:32'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/24/2021 01:19:32'!
PASSED!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/24/2021 01:19:32'!
PASSED!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:19:32'!
PASSED!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/24/2021 01:19:32'!
ERROR!

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/24/2021 01:19:32'!
ERROR!

!testRun: #StoreTest #test13ListingPurchasesWithInvalidCredentialsShouldRaiseAnError stamp: 'GDH 6/24/2021 01:19:32'!
PASSED!

!testRun: #StoreTest #test14ListingPurchasesOfClientWithoutPurchasesShouldRaiseAnError stamp: 'GDH 6/24/2021 01:19:32'!
PASSED!

!testRun: #StoreTest #test15ListingPurchasesOfDifferentClientsShouldReturnDifferentListsOfSales stamp: 'GDH 6/24/2021 01:19:32'!
ERROR!

!testRun: #StoreTest #test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 01:19:32'!
PASSED!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/24/2021 01:19:36'!
ERROR!
!Store methodsFor: 'checkout' stamp: 'GDH 6/24/2021 01:19:59' prior: 50944433!
checkOut: aCartId forCco: aCreditCardOwner withCcn: aCreditCardNumber expiringOn: aCreditCardExpirationMonthOfYear 
	
	| cart creditCard cashier |
	
	cart := self cartFor: aCartId.

	creditCard := CreditCard expiringOn: aCreditCardExpirationMonthOfYear withCcn: aCreditCardNumber withCco: aCreditCardOwner.	
	 
	cashier := Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: clock now
		registeringOn: (self salesOfClientAssociatedWith: aCartId ).
		
	cashier checkOut.
	
	^self getNextTransactionId .
			

	! !

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/24/2021 01:20:07'!
PASSED!

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'GDH 6/24/2021 01:20:07'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/24/2021 01:20:07'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'GDH 6/24/2021 01:20:07'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'GDH 6/24/2021 01:20:07'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'GDH 6/24/2021 01:20:07'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:20:07'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:20:07'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/24/2021 01:20:07'!
PASSED!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/24/2021 01:20:07'!
PASSED!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:20:07'!
PASSED!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/24/2021 01:20:07'!
PASSED!

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/24/2021 01:20:07'!
PASSED!

!testRun: #StoreTest #test13ListingPurchasesWithInvalidCredentialsShouldRaiseAnError stamp: 'GDH 6/24/2021 01:20:07'!
PASSED!

!testRun: #StoreTest #test14ListingPurchasesOfClientWithoutPurchasesShouldRaiseAnError stamp: 'GDH 6/24/2021 01:20:07'!
PASSED!

!testRun: #StoreTest #test15ListingPurchasesOfDifferentClientsShouldReturnDifferentListsOfSales stamp: 'GDH 6/24/2021 01:20:07'!
PASSED!

!testRun: #StoreTest #test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 01:20:07'!
PASSED!
!Clock methodsFor: 'time' stamp: 'GDH 6/24/2021 01:23:59' prior: 50944056!
now
	
	^DateAndTime now. ! !

!methodRemoval: Clock class #for: stamp: 'GDH 6/24/2021 01:24:16'!
for: aDateAndTime
	
	^self new initializeFor: aDateAndTime.!
!AdvanceableClock class methodsFor: 'no messages' stamp: 'GDH 6/24/2021 01:24:20'!
for: aDateAndTime
	
	^self new initializeFor: aDateAndTime.! !

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'GDH 6/24/2021 01:24:33'!
ERROR!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/24/2021 01:24:33'!
ERROR!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'GDH 6/24/2021 01:24:33'!
ERROR!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'GDH 6/24/2021 01:24:33'!
ERROR!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'GDH 6/24/2021 01:24:33'!
ERROR!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:24:33'!
ERROR!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:24:33'!
ERROR!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/24/2021 01:24:33'!
ERROR!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/24/2021 01:24:33'!
ERROR!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:24:33'!
ERROR!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/24/2021 01:24:33'!
ERROR!

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/24/2021 01:24:33'!
ERROR!

!testRun: #StoreTest #test13ListingPurchasesWithInvalidCredentialsShouldRaiseAnError stamp: 'GDH 6/24/2021 01:24:33'!
ERROR!

!testRun: #StoreTest #test14ListingPurchasesOfClientWithoutPurchasesShouldRaiseAnError stamp: 'GDH 6/24/2021 01:24:33'!
ERROR!

!testRun: #StoreTest #test15ListingPurchasesOfDifferentClientsShouldReturnDifferentListsOfSales stamp: 'GDH 6/24/2021 01:24:33'!
ERROR!

!testRun: #StoreTest #test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 01:24:33'!
PASSED!

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'GDH 6/24/2021 01:24:36'!
ERROR!

!methodRemoval: Clock #initializeFor: stamp: 'GDH 6/24/2021 01:32:33'!
initializeFor: aDateAndTime
	
	dateAndTime := aDateAndTime .!
!StoreTest methodsFor: 'creation' stamp: 'GDH 6/24/2021 01:33:05' prior: 50944089!
createStoreWithBigCatalog

	^Store openStoreOn: testObjectFactory todayClockAdvanceable 
			authenticatingWith: self 
			processingThrough: self 
			acceptingItemsFrom: testObjectFactory bigCatalog .! !
!StoreTest methodsFor: 'creation' stamp: 'GDH 6/24/2021 01:33:12' prior: 50944098!
createStoreWithDefaultCatalog

	^Store openStoreOn: testObjectFactory todayClockAdvanceable 
			authenticatingWith: self 
			processingThrough: self 
			acceptingItemsFrom: testObjectFactory defaultCatalog .! !

!methodRemoval: StoreTest #createStoreWithDefaultCatalogAndTime: stamp: 'GDH 6/24/2021 01:33:19'!
createStoreWithDefaultCatalogAndTime: aClock

	^Store openStoreOn: aClock 
			authenticatingWith: self 
			processingThrough: self 
			acceptingItemsFrom: testObjectFactory defaultCatalog .!
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/24/2021 01:33:31' prior: 50944167!
test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError
	
	| store cartId isbn advanceableClock |
	
	advanceableClock := testObjectFactory todayClockAdvanceable .
	store := self createStoreWithDefaultCatalogAndTime:  advanceableClock .
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
		
	cartId := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	advanceableClock advanceByMinutes: 30.
	
	self should: [ store add: 1 of: isbn to: cartId ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store cartExpiredErrorMessageDescription.
	! !
!StoreTest methodsFor: 'creation' stamp: 'GDH 6/24/2021 01:33:48'!
createStoreWithDefaultCatalogWithClock: aClock

	^Store openStoreOn: aClock 
			authenticatingWith: self 
			processingThrough: self 
			acceptingItemsFrom: testObjectFactory defaultCatalog .! !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/24/2021 01:34:03' prior: 50944767!
test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError
	
	| store cartId isbn advanceableClock |
	
	advanceableClock := testObjectFactory todayClockAdvanceable .
	store := self createStoreWithDefaultCatalogWithClock:  advanceableClock .
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
		
	cartId := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	advanceableClock advanceByMinutes: 30.
	
	self should: [ store add: 1 of: isbn to: cartId ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store cartExpiredErrorMessageDescription.
	! !

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'GDH 6/24/2021 01:34:04'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/24/2021 01:34:04'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'GDH 6/24/2021 01:34:04'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'GDH 6/24/2021 01:34:04'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'GDH 6/24/2021 01:34:04'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:34:04'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:34:04'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/24/2021 01:34:04'!
PASSED!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/24/2021 01:34:04'!
PASSED!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:34:04'!
PASSED!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/24/2021 01:34:04'!
PASSED!

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/24/2021 01:34:04'!
PASSED!

!testRun: #StoreTest #test13ListingPurchasesWithInvalidCredentialsShouldRaiseAnError stamp: 'GDH 6/24/2021 01:34:04'!
PASSED!

!testRun: #StoreTest #test14ListingPurchasesOfClientWithoutPurchasesShouldRaiseAnError stamp: 'GDH 6/24/2021 01:34:04'!
PASSED!

!testRun: #StoreTest #test15ListingPurchasesOfDifferentClientsShouldReturnDifferentListsOfSales stamp: 'GDH 6/24/2021 01:34:04'!
PASSED!

!testRun: #StoreTest #test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 01:34:04'!
PASSED!
!AdvanceableClock class methodsFor: 'instance creation' stamp: 'GDH 6/24/2021 01:34:38'!
from: aDateAndTime
	
	^self new initializeFor: aDateAndTime.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GDH 6/24/2021 01:34:38' prior: 50944070!
todayClock
	
	^ Clock from: today.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GDH 6/24/2021 01:34:38' prior: 50944074!
todayClockAdvanceable
	
	^ AdvanceableClock from: today.! !

!methodRemoval: AdvanceableClock class #for: stamp: 'GDH 6/24/2021 01:34:38'!
for: aDateAndTime
	
	^self new initializeFor: aDateAndTime.!

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'GDH 6/24/2021 01:34:42'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/24/2021 01:34:42'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'GDH 6/24/2021 01:34:42'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'GDH 6/24/2021 01:34:42'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'GDH 6/24/2021 01:34:42'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:34:42'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:34:42'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/24/2021 01:34:42'!
PASSED!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/24/2021 01:34:42'!
PASSED!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:34:42'!
PASSED!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/24/2021 01:34:42'!
PASSED!

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/24/2021 01:34:42'!
PASSED!

!testRun: #StoreTest #test13ListingPurchasesWithInvalidCredentialsShouldRaiseAnError stamp: 'GDH 6/24/2021 01:34:42'!
PASSED!

!testRun: #StoreTest #test14ListingPurchasesOfClientWithoutPurchasesShouldRaiseAnError stamp: 'GDH 6/24/2021 01:34:42'!
PASSED!

!testRun: #StoreTest #test15ListingPurchasesOfDifferentClientsShouldReturnDifferentListsOfSales stamp: 'GDH 6/24/2021 01:34:42'!
PASSED!

!testRun: #StoreTest #test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 01:34:42'!
PASSED!
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/24/2021 01:36:09'!
test16CheckoutCartAfterThirtyMinsOfCreationShouldRaiseAnError
	
	| store cartId isbn advanceableClock |
	
	advanceableClock := testObjectFactory todayClockAdvanceable .
	store := self createStoreWithDefaultCatalogWithClock:  advanceableClock .
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
		
	cartId := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	store add: 1 of: isbn to: cartId.
	
	advanceableClock advanceByMinutes: 30.
	
	self should: [ store checkOut: cartId forCco: 'Matias' withCcn: '1122334455667788' expiringOn: testObjectFactory nextYear ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store cartExpiredErrorMessageDescription.
	! !

!testRun: #StoreTest #test16CheckoutCartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 01:36:11'!
PASSED!

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'GDH 6/24/2021 01:36:11'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/24/2021 01:36:11'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'GDH 6/24/2021 01:36:11'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'GDH 6/24/2021 01:36:11'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'GDH 6/24/2021 01:36:11'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:36:11'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:36:11'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/24/2021 01:36:11'!
PASSED!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/24/2021 01:36:11'!
PASSED!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:36:11'!
PASSED!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/24/2021 01:36:11'!
PASSED!

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/24/2021 01:36:11'!
PASSED!

!testRun: #StoreTest #test13ListingPurchasesWithInvalidCredentialsShouldRaiseAnError stamp: 'GDH 6/24/2021 01:36:11'!
PASSED!

!testRun: #StoreTest #test14ListingPurchasesOfClientWithoutPurchasesShouldRaiseAnError stamp: 'GDH 6/24/2021 01:36:11'!
PASSED!

!testRun: #StoreTest #test15ListingPurchasesOfDifferentClientsShouldReturnDifferentListsOfSales stamp: 'GDH 6/24/2021 01:36:11'!
PASSED!

!testRun: #StoreTest #test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 01:36:11'!
PASSED!

!testRun: #StoreTest #test16CheckoutCartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 01:36:11'!
PASSED!
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/24/2021 01:37:07'!
test16ListingPurchasesAfterThirtyMinsOfCreationShouldRaiseAnError
	
	| store cartId isbn advanceableClock |
	
	advanceableClock := testObjectFactory todayClockAdvanceable .
	store := self createStoreWithDefaultCatalogWithClock:  advanceableClock .
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
		
	cartId := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	store add: 1 of: isbn to: cartId.
	
	store checkOut: cartId forCco: 'Matias' withCcn: '1122334455667788' expiringOn: testObjectFactory nextYear.
	
	advanceableClock advanceByMinutes: 30.
	
	self should: [ store purchasesListOf: 'validUserId' using: 'validPassword' ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store cartExpiredErrorMessageDescription.
	! !

!testRun: #StoreTest #test16ListingPurchasesAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 01:37:08'!
ERROR!
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/24/2021 01:37:23' prior: 50945062!
test16ListingPurchasesAfterThirtyMinsOfCreationShouldRaiseAnError
	
	| store cartId isbn advanceableClock |
	
	advanceableClock := testObjectFactory todayClockAdvanceable .
	store := self createStoreWithDefaultCatalogWithClock:  advanceableClock .
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
		
	cartId := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	store add: 1 of: isbn to: cartId.
	
	store checkOut: cartId forCco: 'Matias' withCcn: 1122334455667788 expiringOn: testObjectFactory nextYear.
	
	advanceableClock advanceByMinutes: 30.
	
	self should: [ store purchasesListOf: 'validUserId' using: 'validPassword' ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store cartExpiredErrorMessageDescription.
	! !

!testRun: #StoreTest #test16ListingPurchasesAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 01:37:24'!
ERROR!
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/24/2021 01:37:40' prior: 50945095!
test16ListingPurchasesAfterThirtyMinsOfCreationShouldRaiseAnError
	
	| store cartId isbn advanceableClock |
	
	advanceableClock := testObjectFactory todayClockAdvanceable .
	store := self createStoreWithDefaultCatalogWithClock:  advanceableClock .
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	debitBehavior  := [].
		
	cartId := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	store add: 1 of: isbn to: cartId.
	
	store checkOut: cartId forCco: 'Matias' withCcn: 1122334455667788 expiringOn: testObjectFactory nextYear.
	
	advanceableClock advanceByMinutes: 30.
	
	self should: [ store purchasesListOf: 'validUserId' using: 'validPassword' ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store cartExpiredErrorMessageDescription.
	! !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/24/2021 01:37:47' prior: 50945128!
test16ListingPurchasesAfterThirtyMinsOfCreationShouldRaiseAnError
	
	| store cartId isbn advanceableClock |
	
	advanceableClock := testObjectFactory todayClockAdvanceable .
	store := self createStoreWithDefaultCatalogWithClock:  advanceableClock .
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	debitBehavior := [ :anAmount :aCreditCard | ].
		
	cartId := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	store add: 1 of: isbn to: cartId.
	
	store checkOut: cartId forCco: 'Matias' withCcn: 1122334455667788 expiringOn: testObjectFactory nextYear.
	
	advanceableClock advanceByMinutes: 30.
	
	self should: [ store purchasesListOf: 'validUserId' using: 'validPassword' ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store cartExpiredErrorMessageDescription.
	! !

!testRun: #StoreTest #test16ListingPurchasesAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 01:37:48'!
FAILURE!
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/24/2021 01:38:50'!
test16ListingACartAfterThirtyMinsOfCreationShouldRaiseAnError
	
	| store cartId isbn advanceableClock |
	
	advanceableClock := testObjectFactory todayClockAdvanceable .
	store := self createStoreWithDefaultCatalogWithClock:  advanceableClock .
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	debitBehavior := [ :anAmount :aCreditCard | ].
		
	cartId := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
			
	advanceableClock advanceByMinutes: 30.
	
	self should: [ store listCart: cartId ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store cartExpiredErrorMessageDescription.
	! !
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/24/2021 01:39:06' prior: 50945191!
test16ListingACartAfterThirtyMinsOfCreationShouldRaiseAnError
	
	| store cartId advanceableClock |
	
	advanceableClock := testObjectFactory todayClockAdvanceable .
	store := self createStoreWithDefaultCatalogWithClock:  advanceableClock .
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
		
	cartId := store createCartFor: 'validUserId' using: 'validPassword' .
				
	advanceableClock advanceByMinutes: 30.
	
	self should: [ store listCart: cartId ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store cartExpiredErrorMessageDescription.
	! !

!testRun: #StoreTest #test16ListingACartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 01:39:07'!
PASSED!

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'GDH 6/24/2021 01:39:07'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/24/2021 01:39:07'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'GDH 6/24/2021 01:39:07'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'GDH 6/24/2021 01:39:07'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'GDH 6/24/2021 01:39:07'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:39:07'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:39:07'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/24/2021 01:39:07'!
PASSED!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/24/2021 01:39:07'!
PASSED!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:39:07'!
PASSED!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/24/2021 01:39:07'!
PASSED!

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/24/2021 01:39:07'!
PASSED!

!testRun: #StoreTest #test13ListingPurchasesWithInvalidCredentialsShouldRaiseAnError stamp: 'GDH 6/24/2021 01:39:07'!
PASSED!

!testRun: #StoreTest #test14ListingPurchasesOfClientWithoutPurchasesShouldRaiseAnError stamp: 'GDH 6/24/2021 01:39:07'!
PASSED!

!testRun: #StoreTest #test15ListingPurchasesOfDifferentClientsShouldReturnDifferentListsOfSales stamp: 'GDH 6/24/2021 01:39:07'!
PASSED!

!testRun: #StoreTest #test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 01:39:07'!
PASSED!

!testRun: #StoreTest #test16CheckoutCartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 01:39:07'!
PASSED!

!testRun: #StoreTest #test16ListingACartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 01:39:07'!
PASSED!

!testRun: #StoreTest #test16ListingPurchasesAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 01:39:07'!
FAILURE!

!testRun: #StoreTest #test16ListingPurchasesAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 01:39:07'!
FAILURE!

!methodRemoval: StoreTest #test16ListingPurchasesAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 01:39:16'!
test16ListingPurchasesAfterThirtyMinsOfCreationShouldRaiseAnError
	
	| store cartId isbn advanceableClock |
	
	advanceableClock := testObjectFactory todayClockAdvanceable .
	store := self createStoreWithDefaultCatalogWithClock:  advanceableClock .
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
	debitBehavior := [ :anAmount :aCreditCard | ].
		
	cartId := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	store add: 1 of: isbn to: cartId.
	
	store checkOut: cartId forCco: 'Matias' withCcn: 1122334455667788 expiringOn: testObjectFactory nextYear.
	
	advanceableClock advanceByMinutes: 30.
	
	self should: [ store purchasesListOf: 'validUserId' using: 'validPassword' ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store cartExpiredErrorMessageDescription.
	!

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'GDH 6/24/2021 01:39:18'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/24/2021 01:39:18'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'GDH 6/24/2021 01:39:18'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'GDH 6/24/2021 01:39:18'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'GDH 6/24/2021 01:39:18'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:39:18'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:39:18'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/24/2021 01:39:18'!
PASSED!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/24/2021 01:39:18'!
PASSED!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:39:18'!
PASSED!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/24/2021 01:39:18'!
PASSED!

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/24/2021 01:39:18'!
PASSED!

!testRun: #StoreTest #test13ListingPurchasesWithInvalidCredentialsShouldRaiseAnError stamp: 'GDH 6/24/2021 01:39:18'!
PASSED!

!testRun: #StoreTest #test14ListingPurchasesOfClientWithoutPurchasesShouldRaiseAnError stamp: 'GDH 6/24/2021 01:39:18'!
PASSED!

!testRun: #StoreTest #test15ListingPurchasesOfDifferentClientsShouldReturnDifferentListsOfSales stamp: 'GDH 6/24/2021 01:39:18'!
PASSED!

!testRun: #StoreTest #test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 01:39:18'!
PASSED!

!testRun: #StoreTest #test16CheckoutCartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 01:39:18'!
PASSED!

!testRun: #StoreTest #test16ListingACartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 01:39:18'!
PASSED!
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/24/2021 01:39:24'!
test18ListingACartAfterThirtyMinsOfCreationShouldRaiseAnError
	
	| store cartId advanceableClock |
	
	advanceableClock := testObjectFactory todayClockAdvanceable .
	store := self createStoreWithDefaultCatalogWithClock:  advanceableClock .
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
		
	cartId := store createCartFor: 'validUserId' using: 'validPassword' .
				
	advanceableClock advanceByMinutes: 30.
	
	self should: [ store listCart: cartId ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store cartExpiredErrorMessageDescription.
	! !

!methodRemoval: StoreTest #test16ListingACartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 01:39:24'!
test16ListingACartAfterThirtyMinsOfCreationShouldRaiseAnError
	
	| store cartId advanceableClock |
	
	advanceableClock := testObjectFactory todayClockAdvanceable .
	store := self createStoreWithDefaultCatalogWithClock:  advanceableClock .
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
		
	cartId := store createCartFor: 'validUserId' using: 'validPassword' .
				
	advanceableClock advanceByMinutes: 30.
	
	self should: [ store listCart: cartId ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store cartExpiredErrorMessageDescription.
	!
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/24/2021 01:39:29'!
test17CheckoutCartAfterThirtyMinsOfCreationShouldRaiseAnError
	
	| store cartId isbn advanceableClock |
	
	advanceableClock := testObjectFactory todayClockAdvanceable .
	store := self createStoreWithDefaultCatalogWithClock:  advanceableClock .
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
		
	cartId := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	store add: 1 of: isbn to: cartId.
	
	advanceableClock advanceByMinutes: 30.
	
	self should: [ store checkOut: cartId forCco: 'Matias' withCcn: '1122334455667788' expiringOn: testObjectFactory nextYear ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store cartExpiredErrorMessageDescription.
	! !

!methodRemoval: StoreTest #test16CheckoutCartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 01:39:29'!
test16CheckoutCartAfterThirtyMinsOfCreationShouldRaiseAnError
	
	| store cartId isbn advanceableClock |
	
	advanceableClock := testObjectFactory todayClockAdvanceable .
	store := self createStoreWithDefaultCatalogWithClock:  advanceableClock .
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
		
	cartId := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	store add: 1 of: isbn to: cartId.
	
	advanceableClock advanceByMinutes: 30.
	
	self should: [ store checkOut: cartId forCco: 'Matias' withCcn: '1122334455667788' expiringOn: testObjectFactory nextYear ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store cartExpiredErrorMessageDescription.
	!

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'GDH 6/24/2021 01:39:31'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/24/2021 01:39:31'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'GDH 6/24/2021 01:39:31'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'GDH 6/24/2021 01:39:31'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'GDH 6/24/2021 01:39:31'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:39:31'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:39:31'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/24/2021 01:39:31'!
PASSED!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/24/2021 01:39:31'!
PASSED!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:39:31'!
PASSED!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/24/2021 01:39:31'!
PASSED!

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/24/2021 01:39:31'!
PASSED!

!testRun: #StoreTest #test13ListingPurchasesWithInvalidCredentialsShouldRaiseAnError stamp: 'GDH 6/24/2021 01:39:31'!
PASSED!

!testRun: #StoreTest #test14ListingPurchasesOfClientWithoutPurchasesShouldRaiseAnError stamp: 'GDH 6/24/2021 01:39:31'!
PASSED!

!testRun: #StoreTest #test15ListingPurchasesOfDifferentClientsShouldReturnDifferentListsOfSales stamp: 'GDH 6/24/2021 01:39:31'!
PASSED!

!testRun: #StoreTest #test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 01:39:31'!
PASSED!

!testRun: #StoreTest #test17CheckoutCartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 01:39:31'!
PASSED!

!testRun: #StoreTest #test18ListingACartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 01:39:31'!
PASSED!
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/24/2021 01:40:01'!
test17CheckoutCartAfterThirtyMinsOfLastUsageShouldRaiseAnError
	
	| store cartId isbn advanceableClock |
	
	advanceableClock := testObjectFactory todayClockAdvanceable .
	store := self createStoreWithDefaultCatalogWithClock:  advanceableClock .
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
		
	cartId := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	store add: 1 of: isbn to: cartId.
	
	advanceableClock advanceByMinutes: 30.
	
	self should: [ store checkOut: cartId forCco: 'Matias' withCcn: '1122334455667788' expiringOn: testObjectFactory nextYear ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store cartExpiredErrorMessageDescription.
	! !

!methodRemoval: StoreTest #test17CheckoutCartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 01:40:01'!
test17CheckoutCartAfterThirtyMinsOfCreationShouldRaiseAnError
	
	| store cartId isbn advanceableClock |
	
	advanceableClock := testObjectFactory todayClockAdvanceable .
	store := self createStoreWithDefaultCatalogWithClock:  advanceableClock .
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
		
	cartId := store createCartFor: 'validUserId' using: 'validPassword' .
	
	isbn := testObjectFactory defaultCatalog keys first .
	
	store add: 1 of: isbn to: cartId.
	
	advanceableClock advanceByMinutes: 30.
	
	self should: [ store checkOut: cartId forCco: 'Matias' withCcn: '1122334455667788' expiringOn: testObjectFactory nextYear ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store cartExpiredErrorMessageDescription.
	!
!StoreTest methodsFor: 'tests' stamp: 'GDH 6/24/2021 01:40:08'!
test18ListingACartAfterThirtyMinsOfLastUsageShouldRaiseAnError
	
	| store cartId advanceableClock |
	
	advanceableClock := testObjectFactory todayClockAdvanceable .
	store := self createStoreWithDefaultCatalogWithClock:  advanceableClock .
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
		
	cartId := store createCartFor: 'validUserId' using: 'validPassword' .
				
	advanceableClock advanceByMinutes: 30.
	
	self should: [ store listCart: cartId ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store cartExpiredErrorMessageDescription.
	! !

!methodRemoval: StoreTest #test18ListingACartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 01:40:08'!
test18ListingACartAfterThirtyMinsOfCreationShouldRaiseAnError
	
	| store cartId advanceableClock |
	
	advanceableClock := testObjectFactory todayClockAdvanceable .
	store := self createStoreWithDefaultCatalogWithClock:  advanceableClock .
	authenticateBehaviour := [ :aClientId :aClientPassword | true ].
		
	cartId := store createCartFor: 'validUserId' using: 'validPassword' .
				
	advanceableClock advanceByMinutes: 30.
	
	self should: [ store listCart: cartId ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: Store cartExpiredErrorMessageDescription.
	!

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'GDH 6/24/2021 01:40:10'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/24/2021 01:40:10'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'GDH 6/24/2021 01:40:10'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'GDH 6/24/2021 01:40:10'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'GDH 6/24/2021 01:40:10'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:40:10'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:40:10'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/24/2021 01:40:10'!
PASSED!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/24/2021 01:40:10'!
PASSED!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:40:10'!
PASSED!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/24/2021 01:40:10'!
PASSED!

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/24/2021 01:40:10'!
PASSED!

!testRun: #StoreTest #test13ListingPurchasesWithInvalidCredentialsShouldRaiseAnError stamp: 'GDH 6/24/2021 01:40:10'!
PASSED!

!testRun: #StoreTest #test14ListingPurchasesOfClientWithoutPurchasesShouldRaiseAnError stamp: 'GDH 6/24/2021 01:40:10'!
PASSED!

!testRun: #StoreTest #test15ListingPurchasesOfDifferentClientsShouldReturnDifferentListsOfSales stamp: 'GDH 6/24/2021 01:40:10'!
PASSED!

!testRun: #StoreTest #test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 01:40:10'!
PASSED!

!testRun: #StoreTest #test17CheckoutCartAfterThirtyMinsOfLastUsageShouldRaiseAnError stamp: 'GDH 6/24/2021 01:40:10'!
PASSED!

!testRun: #StoreTest #test18ListingACartAfterThirtyMinsOfLastUsageShouldRaiseAnError stamp: 'GDH 6/24/2021 01:40:10'!
PASSED!

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'GDH 6/24/2021 01:40:11'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/24/2021 01:40:11'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'GDH 6/24/2021 01:40:11'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'GDH 6/24/2021 01:40:11'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'GDH 6/24/2021 01:40:11'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:40:11'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:40:11'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/24/2021 01:40:11'!
PASSED!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/24/2021 01:40:11'!
PASSED!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:40:11'!
PASSED!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/24/2021 01:40:11'!
PASSED!

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/24/2021 01:40:11'!
PASSED!

!testRun: #StoreTest #test13ListingPurchasesWithInvalidCredentialsShouldRaiseAnError stamp: 'GDH 6/24/2021 01:40:11'!
PASSED!

!testRun: #StoreTest #test14ListingPurchasesOfClientWithoutPurchasesShouldRaiseAnError stamp: 'GDH 6/24/2021 01:40:11'!
PASSED!

!testRun: #StoreTest #test15ListingPurchasesOfDifferentClientsShouldReturnDifferentListsOfSales stamp: 'GDH 6/24/2021 01:40:11'!
PASSED!

!testRun: #StoreTest #test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 01:40:11'!
PASSED!

!testRun: #StoreTest #test17CheckoutCartAfterThirtyMinsOfLastUsageShouldRaiseAnError stamp: 'GDH 6/24/2021 01:40:11'!
PASSED!

!testRun: #StoreTest #test18ListingACartAfterThirtyMinsOfLastUsageShouldRaiseAnError stamp: 'GDH 6/24/2021 01:40:11'!
PASSED!

!testRun: #StoreTest #test01CreateCartWithInvalidCredentialsShouldRaiseError stamp: 'GDH 6/24/2021 01:40:13'!
PASSED!

!testRun: #StoreTest #test02CreateCartWithValidCredentialsShouldCreateACart stamp: 'GDH 6/24/2021 01:40:13'!
PASSED!

!testRun: #StoreTest #test03CreatingManyCartsShouldGiveDifferentCartsIds stamp: 'GDH 6/24/2021 01:40:13'!
PASSED!

!testRun: #StoreTest #test04AddBookToExistingCartShouldExpectBookInCartList stamp: 'GDH 6/24/2021 01:40:13'!
PASSED!

!testRun: #StoreTest #test05AddDifferentBooksToCartsShouldExpectCartListsToBeDifferent stamp: 'GDH 6/24/2021 01:40:13'!
PASSED!

!testRun: #StoreTest #test06AddingBookUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:40:13'!
PASSED!

!testRun: #StoreTest #test07ListingCartUsingInvalidCartIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:40:13'!
PASSED!

!testRun: #StoreTest #test08CheckingOutUsingInvalidCreditCardNumberLengthShouldRaiseAnError stamp: 'GDH 6/24/2021 01:40:13'!
PASSED!

!testRun: #StoreTest #test09CheckingOutUsingInvalidCreditCardNameShouldRaiseAnError stamp: 'GDH 6/24/2021 01:40:13'!
PASSED!

!testRun: #StoreTest #test10CheckingOutWithNonExistentIdShouldRaiseAnError stamp: 'GDH 6/24/2021 01:40:13'!
PASSED!

!testRun: #StoreTest #test11CheckingOutSuccesfullyShouldReturnDifferentTransactionsId stamp: 'GDH 6/24/2021 01:40:13'!
PASSED!

!testRun: #StoreTest #test12CheckingOutAndListingPurchasesShouldReturnListOfSales stamp: 'GDH 6/24/2021 01:40:13'!
PASSED!

!testRun: #StoreTest #test13ListingPurchasesWithInvalidCredentialsShouldRaiseAnError stamp: 'GDH 6/24/2021 01:40:13'!
PASSED!

!testRun: #StoreTest #test14ListingPurchasesOfClientWithoutPurchasesShouldRaiseAnError stamp: 'GDH 6/24/2021 01:40:13'!
PASSED!

!testRun: #StoreTest #test15ListingPurchasesOfDifferentClientsShouldReturnDifferentListsOfSales stamp: 'GDH 6/24/2021 01:40:13'!
PASSED!

!testRun: #StoreTest #test16AddingToCartAfterThirtyMinsOfCreationShouldRaiseAnError stamp: 'GDH 6/24/2021 01:40:13'!
PASSED!

!testRun: #StoreTest #test17CheckoutCartAfterThirtyMinsOfLastUsageShouldRaiseAnError stamp: 'GDH 6/24/2021 01:40:13'!
PASSED!

!testRun: #StoreTest #test18ListingACartAfterThirtyMinsOfLastUsageShouldRaiseAnError stamp: 'GDH 6/24/2021 01:40:13'!
PASSED!

----QUIT----(24 June 2021 01:40:32) CuisUniversity-4532.image priorSource: 19228058!